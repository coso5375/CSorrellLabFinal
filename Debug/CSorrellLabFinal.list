
CSorrellLabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007970  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c34  08007b20  08007b20  00008b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009754  08009754  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800975c  0800975c  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009764  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00025d00  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d88  20025d88  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fba4  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc9  00000000  00000000  0001ac5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  0001dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  0001eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269dc  00000000  00000000  0001f723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146f0  00000000  00000000  000460ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0220  00000000  00000000  0005a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013aa0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048b8  00000000  00000000  0013aa54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013f30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b08 	.word	0x08007b08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08007b08 	.word	0x08007b08

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//initialise_monitor_handles(); // Allows printf functionality
    LTCD__Init();
 8000594:	f001 fb3a 	bl	8001c0c <LTCD__Init>
    LTCD_Layer_Init(0);
 8000598:	2000      	movs	r0, #0
 800059a:	f001 faf7 	bl	8001b8c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800059e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 fc42 	bl	8001e2c <LCD_Clear>



    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a8:	f001 fd42 	bl	8002030 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <ApplicationInit+0x2c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005b2:	f000 f825 	bl	8000600 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS



}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000a8 	.word	0x200000a8

080005c0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
    EXTI_HandleTypeDef localStruct = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
    localStruct.Line = EXTI_LINE_0;
 80005ce:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 80005d2:	603b      	str	r3, [r7, #0]

    // Temporarily disable the interrupt to prevent re-entry
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005d4:	2006      	movs	r0, #6
 80005d6:	f003 f952 	bl	800387e <HAL_NVIC_DisableIRQ>

    // Add the ROTATE_EVENT to the scheduler
    addSchedulerEvent(ROTATE_EVENT);
 80005da:	2010      	movs	r0, #16
 80005dc:	f001 fd6a 	bl	80020b4 <addSchedulerEvent>

    // Clear pending interrupts
    HAL_EXTI_ClearPending(&localStruct, EXTI_TRIGGER_RISING);
 80005e0:	463b      	mov	r3, r7
 80005e2:	2101      	movs	r1, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 f973 	bl	80038d0 <HAL_EXTI_ClearPending>
    HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80005ea:	2006      	movs	r0, #6
 80005ec:	f003 f961 	bl	80038b2 <HAL_NVIC_ClearPendingIRQ>

    // Re-enable the interrupt
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f0:	2006      	movs	r0, #6
 80005f2:	f003 f936 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000618:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800061a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800061e:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a0c      	ldr	r2, [pc, #48]	@ (8000664 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4807      	ldr	r0, [pc, #28]	@ (8000668 <LCDTouchScreenInterruptGPIOInit+0x68>)
 800064a:	f003 f959 	bl	8003900 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f003 f907 	bl	8003862 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000656:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000658:	601a      	str	r2, [r3, #0]

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	200000b0 	.word	0x200000b0
 8000670:	0600000f 	.word	0x0600000f

08000674 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800067a:	2028      	movs	r0, #40	@ 0x28
 800067c:	f003 f8ff 	bl	800387e <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000680:	2300      	movs	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]
//	while(count == 0){
//		count = STMPE811_Read(STMPE811_FIFO_SIZE);
//	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000684:	200a      	movs	r0, #10
 8000686:	f001 fce9 	bl	800205c <ReadRegisterFromTouchModule>
 800068a:	4603      	mov	r3, r0
 800068c:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 800068e:	2100      	movs	r1, #0
 8000690:	200a      	movs	r0, #10
 8000692:	f001 fcf1 	bl	8002078 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000696:	200b      	movs	r0, #11
 8000698:	f001 fce0 	bl	800205c <ReadRegisterFromTouchModule>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b39      	ldr	r3, [pc, #228]	@ (8000788 <EXTI15_10_IRQHandler+0x114>)
 80006a2:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80006a4:	4b38      	ldr	r3, [pc, #224]	@ (8000788 <EXTI15_10_IRQHandler+0x114>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	4619      	mov	r1, r3
 80006b2:	200b      	movs	r0, #11
 80006b4:	f001 fce0 	bl	8002078 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006b8:	2040      	movs	r0, #64	@ 0x40
 80006ba:	f001 fccf 	bl	800205c <ReadRegisterFromTouchModule>
 80006be:	4603      	mov	r3, r0
 80006c0:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da01      	bge.n	80006ce <EXTI15_10_IRQHandler+0x5a>
	{
		isTouchDetected = true;
 80006ca:	2301      	movs	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]

	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d039      	beq.n	8000748 <EXTI15_10_IRQHandler+0xd4>
	{

		printf("\nPressed");
 80006d4:	482d      	ldr	r0, [pc, #180]	@ (800078c <EXTI15_10_IRQHandler+0x118>)
 80006d6:	f006 fbab 	bl	8006e30 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 80006da:	482d      	ldr	r0, [pc, #180]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 80006dc:	f001 fcb3 	bl	8002046 <DetermineTouchPosition>
		if (StaticTouchData.x > 120 && firstPress == 1) // if touch is right half of screen
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	2b78      	cmp	r3, #120	@ 0x78
 80006e6:	d906      	bls.n	80006f6 <EXTI15_10_IRQHandler+0x82>
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <EXTI15_10_IRQHandler+0x120>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <EXTI15_10_IRQHandler+0x82>
		{
			addSchedulerEvent(MOVE_RIGHT_EVENT);
 80006f0:	2020      	movs	r0, #32
 80006f2:	f001 fcdf 	bl	80020b4 <addSchedulerEvent>
		}
		if(StaticTouchData.x <= 120 && firstPress)
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b78      	cmp	r3, #120	@ 0x78
 80006fc:	d806      	bhi.n	800070c <EXTI15_10_IRQHandler+0x98>
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <EXTI15_10_IRQHandler+0x120>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <EXTI15_10_IRQHandler+0x98>
		{
			addSchedulerEvent(MOVE_LEFT_EVENT); //left touch detected
 8000706:	2040      	movs	r0, #64	@ 0x40
 8000708:	f001 fcd4 	bl	80020b4 <addSchedulerEvent>
		}
		if(firstPress == 0)
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <EXTI15_10_IRQHandler+0x120>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d016      	beq.n	8000748 <EXTI15_10_IRQHandler+0xd4>
		{
			if(StaticTouchData.x >50 && StaticTouchData.x < 190 && StaticTouchData.y < 210 && StaticTouchData.y > 70 )
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	2b32      	cmp	r3, #50	@ 0x32
 8000720:	d912      	bls.n	8000748 <EXTI15_10_IRQHandler+0xd4>
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2bbd      	cmp	r3, #189	@ 0xbd
 8000728:	d80e      	bhi.n	8000748 <EXTI15_10_IRQHandler+0xd4>
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 800072c:	885b      	ldrh	r3, [r3, #2]
 800072e:	2bd1      	cmp	r3, #209	@ 0xd1
 8000730:	d80a      	bhi.n	8000748 <EXTI15_10_IRQHandler+0xd4>
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <EXTI15_10_IRQHandler+0x11c>)
 8000734:	885b      	ldrh	r3, [r3, #2]
 8000736:	2b46      	cmp	r3, #70	@ 0x46
 8000738:	d906      	bls.n	8000748 <EXTI15_10_IRQHandler+0xd4>
			{
				addSchedulerEvent(START_EVENT);
 800073a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800073e:	f001 fcb9 	bl	80020b4 <addSchedulerEvent>
				firstPress = true;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <EXTI15_10_IRQHandler+0x120>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
		/* Touch not pressed */
		//printf("\nNot pressed \n");
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000748:	2101      	movs	r1, #1
 800074a:	204b      	movs	r0, #75	@ 0x4b
 800074c:	f002 fbc8 	bl	8002ee0 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000750:	2100      	movs	r1, #0
 8000752:	204b      	movs	r0, #75	@ 0x4b
 8000754:	f002 fbc4 	bl	8002ee0 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	4619      	mov	r1, r3
 800075c:	200a      	movs	r0, #10
 800075e:	f001 fc8b 	bl	8002078 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000762:	2103      	movs	r1, #3
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <EXTI15_10_IRQHandler+0x124>)
 8000766:	f003 f8b3 	bl	80038d0 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800076a:	2028      	movs	r0, #40	@ 0x28
 800076c:	f003 f8a1 	bl	80038b2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000770:	2028      	movs	r0, #40	@ 0x28
 8000772:	f003 f876 	bl	8003862 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	4619      	mov	r1, r3
 800077a:	200b      	movs	r0, #11
 800077c:	f001 fc7c 	bl	8002078 <WriteDataToTouchModule>

}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000b8 	.word	0x200000b8
 800078c:	08007b44 	.word	0x08007b44
 8000790:	200000a8 	.word	0x200000a8
 8000794:	200000a4 	.word	0x200000a4
 8000798:	200000b0 	.word	0x200000b0

0800079c <rotateBlock>:
    },
    .color = LCD_COLOR_RED
};

void rotateBlock(TetrisBlockPropertiesTypeDef *block)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    deleteBlock(block); // delete the previous shape off the screen
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f8d7 	bl	8000958 <deleteBlock>
    block->rotation = (block->rotation + 1) % 4; // new rotation will be: (0 + 1) % 4 = 1 (modulo so rotation never exceeds 3)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	3301      	adds	r3, #1
 80007b0:	425a      	negs	r2, r3
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	f002 0203 	and.w	r2, r2, #3
 80007ba:	bf58      	it	pl
 80007bc:	4253      	negpl	r3, r2
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	6113      	str	r3, [r2, #16]
    drawBlock(block);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f843 	bl	800084e <drawBlock>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <moveBlockDown>:

void moveBlockDown(TetrisBlockPropertiesTypeDef *block)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    deleteBlock(block);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f8bd 	bl	8000958 <deleteBlock>
    block->y += block->cellsize;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	441a      	add	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	609a      	str	r2, [r3, #8]
    drawBlock(block);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f82e 	bl	800084e <drawBlock>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <moveBlockLeft>:

void moveBlockLeft(TetrisBlockPropertiesTypeDef *block)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
    deleteBlock(block);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f8a8 	bl	8000958 <deleteBlock>
    block->x -= block->cellsize;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	1ad2      	subs	r2, r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	605a      	str	r2, [r3, #4]
    drawBlock(block);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f819 	bl	800084e <drawBlock>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <moveBlockRight>:

void moveBlockRight(TetrisBlockPropertiesTypeDef *block)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    deleteBlock(block);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f893 	bl	8000958 <deleteBlock>
    block->x += block->cellsize;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685a      	ldr	r2, [r3, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	441a      	add	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	605a      	str	r2, [r3, #4]
    drawBlock(block);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f804 	bl	800084e <drawBlock>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <drawBlock>:

void drawBlock(const TetrisBlockPropertiesTypeDef *block)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b088      	sub	sp, #32
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
    uint16_t shapeData = block->shapeType->shape_rotations[block->rotation % 4]; // get the 16bit shape for the block depending on rotation
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	4259      	negs	r1, r3
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	f001 0103 	and.w	r1, r1, #3
 8000868:	bf58      	it	pl
 800086a:	424b      	negpl	r3, r1
 800086c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000870:	82fb      	strh	r3, [r7, #22]
    uint16_t blockColor = block->shapeType->color;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	891b      	ldrh	r3, [r3, #8]
 8000878:	82bb      	strh	r3, [r7, #20]

    for (int row = 0; row < 4; row++) //loop through the shapes 4x4 grid
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e063      	b.n	8000948 <drawBlock+0xfa>
    {
        uint8_t rowBits = getRowBits(shapeData, row); //shift the row (4 bits) to the least significant 4 bits, then mask with 0xF to isolate the 4 bits.
 8000880:	8afb      	ldrh	r3, [r7, #22]
 8000882:	69f9      	ldr	r1, [r7, #28]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fbfd 	bl	8001084 <getRowBits>
 800088a:	4603      	mov	r3, r0
 800088c:	74fb      	strb	r3, [r7, #19]
        //rowBits will hold the 4 bits of the current row
        for (int col = 0; col < 4; col++) //iterate through the 4 columns of the current row
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	e053      	b.n	800093c <drawBlock+0xee>
        {
            if (isCellInShape(rowBits, col) == true)  // IF cell is apart of our block shape
 8000894:	7cfb      	ldrb	r3, [r7, #19]
 8000896:	69b9      	ldr	r1, [r7, #24]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc0b 	bl	80010b4 <isCellInShape>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d048      	beq.n	8000936 <drawBlock+0xe8>
            {
                int pixel_x = block->x + col * block->cellsize; //get pixel coordinates of the cell
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	69b9      	ldr	r1, [r7, #24]
 80008ae:	fb01 f303 	mul.w	r3, r1, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
                int pixel_y = block->y + row * block->cellsize;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	69f9      	ldr	r1, [r7, #28]
 80008c0:	fb01 f303 	mul.w	r3, r1, r3
 80008c4:	4413      	add	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
                LCD_Draw_Square_Fill(pixel_x + block->cellsize / 2, pixel_y + block->cellsize / 2, block->cellsize, LCD_COLOR_WHITE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0fda      	lsrs	r2, r3, #31
 80008ce:	4413      	add	r3, r2
 80008d0:	105b      	asrs	r3, r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4413      	add	r3, r2
 80008da:	b298      	uxth	r0, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0fda      	lsrs	r2, r3, #31
 80008e2:	4413      	add	r3, r2
 80008e4:	105b      	asrs	r3, r3, #1
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	b299      	uxth	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008fa:	f001 fa03 	bl	8001d04 <LCD_Draw_Square_Fill>
				LCD_Draw_Square_Fill(pixel_x + block->cellsize / 2, pixel_y + block->cellsize / 2, block->cellsize - 2, blockColor);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	0fda      	lsrs	r2, r3, #31
 8000904:	4413      	add	r3, r2
 8000906:	105b      	asrs	r3, r3, #1
 8000908:	b29a      	uxth	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b298      	uxth	r0, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	0fda      	lsrs	r2, r3, #31
 8000918:	4413      	add	r3, r2
 800091a:	105b      	asrs	r3, r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4413      	add	r3, r2
 8000924:	b299      	uxth	r1, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	b29b      	uxth	r3, r3
 800092c:	3b02      	subs	r3, #2
 800092e:	b29a      	uxth	r2, r3
 8000930:	8abb      	ldrh	r3, [r7, #20]
 8000932:	f001 f9e7 	bl	8001d04 <LCD_Draw_Square_Fill>
        for (int col = 0; col < 4; col++) //iterate through the 4 columns of the current row
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	3301      	adds	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2b03      	cmp	r3, #3
 8000940:	dda8      	ble.n	8000894 <drawBlock+0x46>
    for (int row = 0; row < 4; row++) //loop through the shapes 4x4 grid
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3301      	adds	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	2b03      	cmp	r3, #3
 800094c:	dd98      	ble.n	8000880 <drawBlock+0x32>
            }
        }
    }
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <deleteBlock>:

void deleteBlock(const TetrisBlockPropertiesTypeDef *block)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    uint16_t shapeData = block->shapeType->shape_rotations[block->rotation % 4]; //grab the 16 bit shape
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	4259      	negs	r1, r3
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	f001 0103 	and.w	r1, r1, #3
 8000972:	bf58      	it	pl
 8000974:	424b      	negpl	r3, r1
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	82fb      	strh	r3, [r7, #22]

    for (int row = 0; row < 4; row++) //loop through the 4x4 grid of the shape
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	e084      	b.n	8000a8c <deleteBlock+0x134>
    {
        uint8_t rowBits = getRowBits(shapeData, row);
 8000982:	8afb      	ldrh	r3, [r7, #22]
 8000984:	69f9      	ldr	r1, [r7, #28]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fb7c 	bl	8001084 <getRowBits>
 800098c:	4603      	mov	r3, r0
 800098e:	757b      	strb	r3, [r7, #21]
        for (int col = 0; col < 4; col++)
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	e074      	b.n	8000a80 <deleteBlock+0x128>
        {
            if (isCellInShape(rowBits, col) == true)  // IF cell is apart of our block shape
 8000996:	7d7b      	ldrb	r3, [r7, #21]
 8000998:	69b9      	ldr	r1, [r7, #24]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fb8a 	bl	80010b4 <isCellInShape>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d069      	beq.n	8000a7a <deleteBlock+0x122>
            {
                int pixel_x = block->x + col * block->cellsize; // calculate pixel coordinates
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	69b9      	ldr	r1, [r7, #24]
 80009b0:	fb01 f303 	mul.w	r3, r1, r3
 80009b4:	4413      	add	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
                int pixel_y = block->y + row * block->cellsize;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	69f9      	ldr	r1, [r7, #28]
 80009c2:	fb01 f303 	mul.w	r3, r1, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]

                LCD_Draw_Square_Fill(pixel_x + block->cellsize / 2, pixel_y + block->cellsize / 2, block->cellsize, LCD_COLOR_BLACK);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	0fda      	lsrs	r2, r3, #31
 80009d0:	4413      	add	r3, r2
 80009d2:	105b      	asrs	r3, r3, #1
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b298      	uxth	r0, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	0fda      	lsrs	r2, r3, #31
 80009e4:	4413      	add	r3, r2
 80009e6:	105b      	asrs	r3, r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4413      	add	r3, r2
 80009f0:	b299      	uxth	r1, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	f001 f983 	bl	8001d04 <LCD_Draw_Square_Fill>
                //draw black square to "erase"
                LCD_Draw_Horizontal_Line(pixel_x, pixel_y, block->cellsize, LCD_COLOR_WHITE); // redraw the white gridlines
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	b298      	uxth	r0, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	b299      	uxth	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a10:	f001 f9e5 	bl	8001dde <LCD_Draw_Horizontal_Line>
                LCD_Draw_Horizontal_Line(pixel_x, pixel_y + block->cellsize, block->cellsize, LCD_COLOR_WHITE);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	b298      	uxth	r0, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b299      	uxth	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a30:	f001 f9d5 	bl	8001dde <LCD_Draw_Horizontal_Line>
                LCD_Draw_Vertical_Line(pixel_x, pixel_y, block->cellsize, LCD_COLOR_WHITE);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	b298      	uxth	r0, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	b299      	uxth	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a46:	f001 f9a3 	bl	8001d90 <LCD_Draw_Vertical_Line>
                LCD_Draw_Vertical_Line(pixel_x + block->cellsize, pixel_y, block->cellsize, LCD_COLOR_WHITE);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4413      	add	r3, r2
 8000a56:	b298      	uxth	r0, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a66:	f001 f993 	bl	8001d90 <LCD_Draw_Vertical_Line>
            	LCD_Draw_Vertical_Line(GRID_WIDTH - 1, 0, GRID_HEIGHT-7, LCD_COLOR_WHITE); // for the right edge of screen
 8000a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a6e:	f240 1239 	movw	r2, #313	@ 0x139
 8000a72:	2100      	movs	r1, #0
 8000a74:	20ef      	movs	r0, #239	@ 0xef
 8000a76:	f001 f98b 	bl	8001d90 <LCD_Draw_Vertical_Line>
        for (int col = 0; col < 4; col++)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	dd87      	ble.n	8000996 <deleteBlock+0x3e>
    for (int row = 0; row < 4; row++) //loop through the 4x4 grid of the shape
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	f77f af77 	ble.w	8000982 <deleteBlock+0x2a>
            }
        }
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <lockBlock>:

void lockBlock(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize])
{
 8000a9e:	b5b0      	push	{r4, r5, r7, lr}
 8000aa0:	b08c      	sub	sp, #48	@ 0x30
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
void lockBlock(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize])
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	22f0      	movs	r2, #240	@ 0xf0
 8000aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	22f0      	movs	r2, #240	@ 0xf0
 8000abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	4614      	mov	r4, r2
 8000ac6:	461d      	mov	r5, r3
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	012b      	lsls	r3, r5, #4
 8000ad2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ad6:	0122      	lsls	r2, r4, #4
	//**need to edit this function so that it checks for collisions before spawning a block (if grid gets full)
    uint16_t shapeData = block->shapeType->shape_rotations[block->rotation % 4]; // get the 16 bits for the shape
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	4259      	negs	r1, r3
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	f001 0103 	and.w	r1, r1, #3
 8000aea:	bf58      	it	pl
 8000aec:	424b      	negpl	r3, r1
 8000aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af2:	847b      	strh	r3, [r7, #34]	@ 0x22
    int blockTopLeftX = block->x / block->cellsize; // get the top left (x,y) coords in the grid
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]
    int blockTopLeftY = block->y / block->cellsize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b0e:	61bb      	str	r3, [r7, #24]

    for (int row = 0; row < 4; row++) // loop thru the blocks 4x4 grid of bits
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b14:	e034      	b.n	8000b80 <lockBlock+0xe2>
    {
        uint8_t rowBits = getRowBits(shapeData, row);
 8000b16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fab2 	bl	8001084 <getRowBits>
 8000b20:	4603      	mov	r3, r0
 8000b22:	75fb      	strb	r3, [r7, #23]
        for (int col = 0; col < 4; col++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b28:	e024      	b.n	8000b74 <lockBlock+0xd6>
        {
            if (isCellInShape(rowBits, col) == true)  // IF cell is apart of our block shape
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fac0 	bl	80010b4 <isCellInShape>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d019      	beq.n	8000b6e <lockBlock+0xd0>
            {
                int GridCellX = blockTopLeftX + col; // grab the (x,y) coords of the current cell
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b3e:	4413      	add	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
                int GridCellY = blockTopLeftY + row;
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
                // permanently lock the block into the game grid by setting the color of the cells
                gameGrid[GridCellY][GridCellX] = block->shapeType->color;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695a      	ldr	r2, [r3, #20]
void lockBlock(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize])
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	21f0      	movs	r1, #240	@ 0xf0
 8000b54:	fb91 f3f3 	sdiv	r3, r1, r3
                gameGrid[GridCellY][GridCellX] = block->shapeType->color;
 8000b58:	4619      	mov	r1, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	fb01 f303 	mul.w	r3, r1, r3
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	440b      	add	r3, r1
 8000b66:	8911      	ldrh	r1, [r2, #8]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int col = 0; col < 4; col++)
 8000b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b70:	3301      	adds	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	ddd7      	ble.n	8000b2a <lockBlock+0x8c>
    for (int row = 0; row < 4; row++) // loop thru the blocks 4x4 grid of bits
 8000b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	ddc7      	ble.n	8000b16 <lockBlock+0x78>
            }
        }
    }
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}

08000b90 <spawnBlock>:

void spawnBlock(TetrisBlockPropertiesTypeDef *block, uint32_t blockType)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
    const BlockShape* shapeType[] = {&T, &I, &L, &J, &O, &S, &Z}; // array for all 7 blocks so that random num gen can provide an int 1-7
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <spawnBlock+0x70>)
 8000b9c:	f107 040c 	add.w	r4, r7, #12
 8000ba0:	461d      	mov	r5, r3
 8000ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	block->cellsize = 24; // initialize cellsize to 24 (should be smaller for a real 10x20 tetris grid)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2218      	movs	r2, #24
 8000bb2:	60da      	str	r2, [r3, #12]
    block->x = (GRID_WIDTH / 2) - (block->cellsize); // setting start x coord
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f1c3 0278 	rsb	r2, r3, #120	@ 0x78
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	605a      	str	r2, [r3, #4]
    block->y = 0; // start y coord
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    block->block_color = shapeType[blockType-1]->color; // initialize block color
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	3328      	adds	r3, #40	@ 0x28
 8000bce:	443b      	add	r3, r7
 8000bd0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000bd4:	891a      	ldrh	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	801a      	strh	r2, [r3, #0]
    block->rotation = 0; // start at NO rotation
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
    block->shapeType = shapeType[blockType -1];
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	3328      	adds	r3, #40	@ 0x28
 8000be8:	443b      	add	r3, r7
 8000bea:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	615a      	str	r2, [r3, #20]
    drawBlock(block);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fe2b 	bl	800084e <drawBlock>
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000c00:	08007b50 	.word	0x08007b50

08000c04 <detectCollision>:

bool detectCollision(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize], int MOVE_X, int MOVE_Y)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b08e      	sub	sp, #56	@ 0x38
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
bool detectCollision(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize], int MOVE_X, int MOVE_Y)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	22f0      	movs	r2, #240	@ 0xf0
 8000c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	22f0      	movs	r2, #240	@ 0xf0
 8000c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4614      	mov	r4, r2
 8000c30:	461d      	mov	r5, r3
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	012b      	lsls	r3, r5, #4
 8000c3c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000c40:	0122      	lsls	r2, r4, #4
    uint16_t shapeData = block->shapeType->shape_rotations[block->rotation % 4]; // grab 16-bit shape
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	4259      	negs	r1, r3
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	f001 0103 	and.w	r1, r1, #3
 8000c54:	bf58      	it	pl
 8000c56:	424b      	negpl	r3, r1
 8000c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    int blockTopLeftX = (block->x / block->cellsize) + MOVE_X; // find the x,y coords of the shape in the grid
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    int blockTopLeftY = (block->y / block->cellsize) + MOVE_Y;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	623b      	str	r3, [r7, #32]
    for (int row = 0; row < 4; row++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c86:	e053      	b.n	8000d30 <detectCollision+0x12c>
    {
        uint8_t rowBits = getRowBits(shapeData, row);
 8000c88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f9f9 	bl	8001084 <getRowBits>
 8000c92:	4603      	mov	r3, r0
 8000c94:	77fb      	strb	r3, [r7, #31]

        for (int col = 0; col < 4; col++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c9a:	e043      	b.n	8000d24 <detectCollision+0x120>
        {
            if (isCellInShape(rowBits, col) == true)  // IF cell is apart of our block shape
 8000c9c:	7ffb      	ldrb	r3, [r7, #31]
 8000c9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa07 	bl	80010b4 <isCellInShape>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d038      	beq.n	8000d1e <detectCollision+0x11a>
            {
                int GridCellX = blockTopLeftX + col; // get the current x,y cell position
 8000cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb0:	4413      	add	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
                int GridCellY = blockTopLeftY + row;
 8000cb4:	6a3a      	ldr	r2, [r7, #32]
 8000cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb8:	4413      	add	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]

                if (MOVE_X != NONE && (GridCellX < 0 || GridCellX >= (GRID_WIDTH / block->cellsize)))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00c      	beq.n	8000cdc <detectCollision+0xd8>
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db07      	blt.n	8000cd8 <detectCollision+0xd4>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	22f0      	movs	r2, #240	@ 0xf0
 8000cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	db01      	blt.n	8000cdc <detectCollision+0xd8>
                {
                    return true; // collision with edge of grid, cant move left/right
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e02d      	b.n	8000d38 <detectCollision+0x134>
                }
                if (MOVE_Y != NONE && GridCellY >= (GRID_HEIGHT / block->cellsize))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <detectCollision+0xf4>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	db01      	blt.n	8000cf8 <detectCollision+0xf4>
                {
                    return true; // collision with bottom of grid, cant move down
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e01f      	b.n	8000d38 <detectCollision+0x134>
bool detectCollision(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize], int MOVE_X, int MOVE_Y)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	22f0      	movs	r2, #240	@ 0xf0
 8000cfe:	fb92 f3f3 	sdiv	r3, r2, r3
                }
                if (gameGrid[GridCellY][GridCellX] != 0)
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	4413      	add	r3, r2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <detectCollision+0x11a>
                {
                    return true; // we have a collision with an existing block
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00c      	b.n	8000d38 <detectCollision+0x134>
        for (int col = 0; col < 4; col++)
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d20:	3301      	adds	r3, #1
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	ddb8      	ble.n	8000c9c <detectCollision+0x98>
    for (int row = 0; row < 4; row++)
 8000d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	dda8      	ble.n	8000c88 <detectCollision+0x84>
                }
            }
        }
    }
    return false; //NO collisions
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3738      	adds	r7, #56	@ 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bdb0      	pop	{r4, r5, r7, pc}

08000d40 <canRotate>:

bool canRotate(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize])
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b08c      	sub	sp, #48	@ 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
bool canRotate(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize])
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	22f0      	movs	r2, #240	@ 0xf0
 8000d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	22f0      	movs	r2, #240	@ 0xf0
 8000d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	4614      	mov	r4, r2
 8000d68:	461d      	mov	r5, r3
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	012b      	lsls	r3, r5, #4
 8000d74:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000d78:	0122      	lsls	r2, r4, #4
    //here we will "pretend" the rotation goes through
    int rotation = (block->rotation + 1) % 4; // find the next rotation #
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	425a      	negs	r2, r3
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	bf58      	it	pl
 8000d8c:	4253      	negpl	r3, r2
 8000d8e:	623b      	str	r3, [r7, #32]
    uint16_t rotatedShapeData = block->shapeType->shape_rotations[rotation]; // get the 16 bit shape data for our newly rotated shape
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	6a3a      	ldr	r2, [r7, #32]
 8000d96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d9a:	83fb      	strh	r3, [r7, #30]
    int blockTopLeftX = block->x / block->cellsize; //grab cell x,y coords
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da8:	61bb      	str	r3, [r7, #24]
    int blockTopLeftY = block->y / block->cellsize;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]

    for (int row = 0; row < 4; row++)  //iterate through the rotated blocks 4x4 block shape
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dbc:	e050      	b.n	8000e60 <canRotate+0x120>
    {
        uint8_t rowBits = getRowBits(rotatedShapeData, row);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f95e 	bl	8001084 <getRowBits>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	74fb      	strb	r3, [r7, #19]

        for (int col = 0; col < 4; col++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dd0:	e040      	b.n	8000e54 <canRotate+0x114>
        {
            if (isCellInShape(rowBits, col) == true)  // check each bit, if we have a shape there, we need to fill in that dell
 8000dd2:	7cfb      	ldrb	r3, [r7, #19]
 8000dd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f96c 	bl	80010b4 <isCellInShape>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d035      	beq.n	8000e4e <canRotate+0x10e>
            {
                int GridCellX = blockTopLeftX + col; // grabbing block cells x,y coords
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
                int GridCellY = blockTopLeftY + row;
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dee:	4413      	add	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]

                //checking allowed boundaries
                if (GridCellX < 0 || GridCellX >= (GRID_WIDTH / block->cellsize))
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db07      	blt.n	8000e08 <canRotate+0xc8>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	22f0      	movs	r2, #240	@ 0xf0
 8000dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	db01      	blt.n	8000e0c <canRotate+0xcc>
                {
                    return false; //collision so block cannot rotqte
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e02d      	b.n	8000e68 <canRotate+0x128>
                }
                if (GridCellY < 0 || GridCellY >= (GRID_HEIGHT / block->cellsize))
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db08      	blt.n	8000e24 <canRotate+0xe4>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	db01      	blt.n	8000e28 <canRotate+0xe8>
                {
                	return false;
 8000e24:	2300      	movs	r3, #0
 8000e26:	e01f      	b.n	8000e68 <canRotate+0x128>
bool canRotate(const TetrisBlockPropertiesTypeDef *block, uint16_t gameGrid[GRID_HEIGHT / block->cellsize][GRID_WIDTH / block->cellsize])
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	22f0      	movs	r2, #240	@ 0xf0
 8000e2e:	fb92 f3f3 	sdiv	r3, r2, r3
                }
                //checking for collisions with other blocks already placed
                if (gameGrid[GridCellY][GridCellX] != 0)
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <canRotate+0x10e>
                {
                    return false;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e00c      	b.n	8000e68 <canRotate+0x128>
        for (int col = 0; col < 4; col++)
 8000e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e50:	3301      	adds	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	ddbb      	ble.n	8000dd2 <canRotate+0x92>
    for (int row = 0; row < 4; row++)  //iterate through the rotated blocks 4x4 block shape
 8000e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	ddab      	ble.n	8000dbe <canRotate+0x7e>
                }
            }
        }
    }
    return true; //no rotation collision detected
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bdb0      	pop	{r4, r5, r7, pc}

08000e70 <drawBlockBlackOutline>:

void drawBlockBlackOutline(const TetrisBlockPropertiesTypeDef *block) // just used for displayBlocks()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    uint16_t shapeData = block->shapeType->shape_rotations[block->rotation % 4]; // get the 16bit shape for the block depending on rotation
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	4259      	negs	r1, r3
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	f001 0103 	and.w	r1, r1, #3
 8000e8a:	bf58      	it	pl
 8000e8c:	424b      	negpl	r3, r1
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	82fb      	strh	r3, [r7, #22]
    uint16_t blockColor = block->shapeType->color; // grab the shapes color
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	891b      	ldrh	r3, [r3, #8]
 8000e9a:	82bb      	strh	r3, [r7, #20]

    for (int row = 0; row < 4; row++) //loop through the shapes 4x4 grid
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	e062      	b.n	8000f68 <drawBlockBlackOutline+0xf8>
    {
        uint8_t rowBits = getRowBits(shapeData, row);
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	69f9      	ldr	r1, [r7, #28]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f8ec 	bl	8001084 <getRowBits>
 8000eac:	4603      	mov	r3, r0
 8000eae:	74fb      	strb	r3, [r7, #19]
        //shift the row (4 bits) to the least significant 4 bits, then mask with 0xF to isolate the 4 bits.
        //rowBits will hold the 4 bits of the current row
        for (int col = 0; col < 4; col++) //iterate through the 4 columns of the current row
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	e052      	b.n	8000f5c <drawBlockBlackOutline+0xec>
        {
            if (isCellInShape(rowBits, col) == true)  // check each bit, if we have a shape there, we need to fill in that dell
 8000eb6:	7cfb      	ldrb	r3, [r7, #19]
 8000eb8:	69b9      	ldr	r1, [r7, #24]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f8fa 	bl	80010b4 <isCellInShape>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d047      	beq.n	8000f56 <drawBlockBlackOutline+0xe6>
            {
                int pixel_x = block->x + col * block->cellsize; //get pixel coordinates of the cell
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
                int pixel_y = block->y + row * block->cellsize;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	69f9      	ldr	r1, [r7, #28]
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60bb      	str	r3, [r7, #8]

                LCD_Draw_Square_Fill(pixel_x + block->cellsize / 2, pixel_y + block->cellsize / 2, block->cellsize, LCD_COLOR_BLACK);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	0fda      	lsrs	r2, r3, #31
 8000ef0:	4413      	add	r3, r2
 8000ef2:	105b      	asrs	r3, r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b298      	uxth	r0, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	0fda      	lsrs	r2, r3, #31
 8000f04:	4413      	add	r3, r2
 8000f06:	105b      	asrs	r3, r3, #1
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	b299      	uxth	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f000 fef3 	bl	8001d04 <LCD_Draw_Square_Fill>
				// draw color slightly smaller to leave the border
				LCD_Draw_Square_Fill(pixel_x + block->cellsize / 2, pixel_y + block->cellsize / 2, block->cellsize - 2, blockColor);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	0fda      	lsrs	r2, r3, #31
 8000f24:	4413      	add	r3, r2
 8000f26:	105b      	asrs	r3, r3, #1
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4413      	add	r3, r2
 8000f30:	b298      	uxth	r0, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	0fda      	lsrs	r2, r3, #31
 8000f38:	4413      	add	r3, r2
 8000f3a:	105b      	asrs	r3, r3, #1
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	b299      	uxth	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	8abb      	ldrh	r3, [r7, #20]
 8000f52:	f000 fed7 	bl	8001d04 <LCD_Draw_Square_Fill>
        for (int col = 0; col < 4; col++) //iterate through the 4 columns of the current row
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	dda9      	ble.n	8000eb6 <drawBlockBlackOutline+0x46>
    for (int row = 0; row < 4; row++) //loop through the shapes 4x4 grid
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	dd99      	ble.n	8000ea2 <drawBlockBlackOutline+0x32>
            }
        }
    }
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DisplayBlocks>:

void DisplayBlocks() // aesthetics for start and end screen
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
	TetrisBlockPropertiesTypeDef block;

	block.cellsize = 24;
 8000f7e:	2318      	movs	r3, #24
 8000f80:	60fb      	str	r3, [r7, #12]
	block.rotation = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
	block.shapeType = &I;
 8000f86:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <DisplayBlocks+0xf0>)
 8000f88:	617b      	str	r3, [r7, #20]
	block.x = 192;
 8000f8a:	23c0      	movs	r3, #192	@ 0xc0
 8000f8c:	607b      	str	r3, [r7, #4]
	block.y = 224;
 8000f8e:	23e0      	movs	r3, #224	@ 0xe0
 8000f90:	60bb      	str	r3, [r7, #8]
    drawBlockBlackOutline(&block);
 8000f92:	463b      	mov	r3, r7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff6b 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 8000f9a:	2318      	movs	r3, #24
 8000f9c:	60fb      	str	r3, [r7, #12]
	block.rotation = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	block.shapeType = &Z;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <DisplayBlocks+0xf4>)
 8000fa4:	617b      	str	r3, [r7, #20]
	block.x = 24;
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	607b      	str	r3, [r7, #4]
	block.y = 248;
 8000faa:	23f8      	movs	r3, #248	@ 0xf8
 8000fac:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 8000fb6:	2318      	movs	r3, #24
 8000fb8:	60fb      	str	r3, [r7, #12]
	block.rotation = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
	block.shapeType = &T;
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <DisplayBlocks+0xf8>)
 8000fc0:	617b      	str	r3, [r7, #20]
	block.x = 96;
 8000fc2:	2360      	movs	r3, #96	@ 0x60
 8000fc4:	607b      	str	r3, [r7, #4]
	block.y = 248;
 8000fc6:	23f8      	movs	r3, #248	@ 0xf8
 8000fc8:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff4f 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 8000fd2:	2318      	movs	r3, #24
 8000fd4:	60fb      	str	r3, [r7, #12]
	block.rotation = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
	block.shapeType = &L;
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <DisplayBlocks+0xfc>)
 8000fdc:	617b      	str	r3, [r7, #20]
	block.x = -24;
 8000fde:	f06f 0317 	mvn.w	r3, #23
 8000fe2:	607b      	str	r3, [r7, #4]
	block.y = 248;
 8000fe4:	23f8      	movs	r3, #248	@ 0xf8
 8000fe6:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff40 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 8000ff0:	2318      	movs	r3, #24
 8000ff2:	60fb      	str	r3, [r7, #12]
	block.rotation = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
	block.shapeType = &S;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <DisplayBlocks+0x100>)
 8000ffa:	617b      	str	r3, [r7, #20]
	block.x = 48;
 8000ffc:	2330      	movs	r3, #48	@ 0x30
 8000ffe:	607b      	str	r3, [r7, #4]
	block.y = 224;
 8001000:	23e0      	movs	r3, #224	@ 0xe0
 8001002:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 8001004:	463b      	mov	r3, r7
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff32 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 800100c:	2318      	movs	r3, #24
 800100e:	60fb      	str	r3, [r7, #12]
	block.rotation = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
	block.shapeType = &J;
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <DisplayBlocks+0x104>)
 8001016:	617b      	str	r3, [r7, #20]
	block.x = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
	block.y = 200;
 800101c:	23c8      	movs	r3, #200	@ 0xc8
 800101e:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 8001020:	463b      	mov	r3, r7
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff24 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 8001028:	2318      	movs	r3, #24
 800102a:	60fb      	str	r3, [r7, #12]
	block.rotation = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
	block.shapeType = &O;
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <DisplayBlocks+0x108>)
 8001032:	617b      	str	r3, [r7, #20]
	block.x = 168;
 8001034:	23a8      	movs	r3, #168	@ 0xa8
 8001036:	607b      	str	r3, [r7, #4]
	block.y = 224;
 8001038:	23e0      	movs	r3, #224	@ 0xe0
 800103a:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 800103c:	463b      	mov	r3, r7
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff16 	bl	8000e70 <drawBlockBlackOutline>
	block.cellsize = 24;
 8001044:	2318      	movs	r3, #24
 8001046:	60fb      	str	r3, [r7, #12]
	block.rotation = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
	block.shapeType = &L;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <DisplayBlocks+0xfc>)
 800104e:	617b      	str	r3, [r7, #20]
	block.x = 120;
 8001050:	2378      	movs	r3, #120	@ 0x78
 8001052:	607b      	str	r3, [r7, #4]
	block.y = 224;
 8001054:	23e0      	movs	r3, #224	@ 0xe0
 8001056:	60bb      	str	r3, [r7, #8]
	drawBlockBlackOutline(&block);
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff08 	bl	8000e70 <drawBlockBlackOutline>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08007bd4 	.word	0x08007bd4
 800106c:	08007c10 	.word	0x08007c10
 8001070:	08007bc8 	.word	0x08007bc8
 8001074:	08007be0 	.word	0x08007be0
 8001078:	08007c04 	.word	0x08007c04
 800107c:	08007bec 	.word	0x08007bec
 8001080:	08007bf8 	.word	0x08007bf8

08001084 <getRowBits>:

//helper functions to check if current cell is within the shape of the block
uint8_t getRowBits(uint16_t shapeData, int row)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	80fb      	strh	r3, [r7, #6]
	uint8_t rowBits = (shapeData >> (12 - row * 4)) & 0xF;
 8001090:	88fa      	ldrh	r2, [r7, #6]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f1c3 0303 	rsb	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa42 f303 	asr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	73fb      	strb	r3, [r7, #15]
	return rowBits;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <isCellInShape>:

bool isCellInShape(uint8_t rowBits, int col)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
    uint8_t column_bitmask = 1 << (3 - col);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f1c3 0303 	rsb	r3, r3, #3
 80010c6:	2201      	movs	r2, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	73fb      	strb	r3, [r7, #15]
    if((rowBits & column_bitmask) != 0)
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <isCellInShape+0x2a>
    {
    	return true;
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <isCellInShape+0x2c>
    }
    else
    {
    	return false;
 80010de:	2300      	movs	r3, #0
    }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <RNG_Init>:

//RNG FUNCTIONS
RNG_HandleTypeDef hrng;

void RNG_Init() // pretty sure theres a HAL function that does this for us? Cant find the proper one
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE(); //enable RNG clock
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <RNG_Init+0x40>)
 80010f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <RNG_Init+0x40>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001100:	6353      	str	r3, [r2, #52]	@ 0x34
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <RNG_Init+0x40>)
 8001104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
	hrng.Instance = RNG; // set instance
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <RNG_Init+0x44>)
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <RNG_Init+0x48>)
 8001112:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) //check if hal is OK
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <RNG_Init+0x44>)
 8001116:	f004 ffd3 	bl	80060c0 <HAL_RNG_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <RNG_Init+0x38>
	{
		while(1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <RNG_Init+0x34>
		{
			//eror handler
		}
	}
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	200000bc 	.word	0x200000bc
 8001134:	50060800 	.word	0x50060800

08001138 <GenerateRandomNum>:

uint32_t GenerateRandomNum()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
    uint32_t randomNumber;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber) != HAL_OK) // generate num & check if hal OK
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	@ (8001174 <GenerateRandomNum+0x3c>)
 8001144:	f004 ffe6 	bl	8006114 <HAL_RNG_GenerateRandomNumber>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <GenerateRandomNum+0x1a>
    {
        while(1)
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <GenerateRandomNum+0x16>
        {
        //Error handler
        }
    }
    return (randomNumber % 7) + 1; // return a random number 1 through 7
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <GenerateRandomNum+0x40>)
 8001156:	fba3 2301 	umull	r2, r3, r3, r1
 800115a:	1aca      	subs	r2, r1, r3
 800115c:	0852      	lsrs	r2, r2, #1
 800115e:	4413      	add	r3, r2
 8001160:	089a      	lsrs	r2, r3, #2
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	1aca      	subs	r2, r1, r3
 800116a:	1c53      	adds	r3, r2, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000bc 	.word	0x200000bc
 8001178:	24924925 	.word	0x24924925

0800117c <Button_Init>:
 */
#include "Button_Driver.h"


void Button_Init() // function to initialize the button
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef localStruct = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]


	//configuring the pin for button
	localStruct.Pin = GPIO_PIN_0; // button pin #
 8001190:	2301      	movs	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
	localStruct.Mode = GPIO_MODE_INPUT; //NEEDS INPUT MODE
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
	localStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
	localStruct.Pull = GPIO_NOPULL; // IDK ABOUT THIS
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
	localStruct.Alternate = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

	Clock_Init();
 80011a4:	f000 f80c 	bl	80011c0 <Clock_Init>
	HAL_GPIO_Init(GPIOA, &localStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <Button_Init+0x40>)
 80011ae:	f002 fba7 	bl	8003900 <HAL_GPIO_Init>



}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000

080011c0 <Clock_Init>:

void Clock_Init() // function to initalize the clock
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE(); //enable gpioa clock for button
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <Clock_Init+0x30>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <Clock_Init+0x30>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <Clock_Init+0x30>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <Initialize_Button_Interrupt>:
		return false;
	}
}

void Initialize_Button_Interrupt()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef localStruct = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
	localStruct.Pin = GPIO_PIN_0;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
	localStruct.Mode = GPIO_MODE_IT_RISING;
 800120c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001210:	60bb      	str	r3, [r7, #8]
	localStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	613b      	str	r3, [r7, #16]
	localStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
	Clock_Init();
 800121a:	f7ff ffd1 	bl	80011c0 <Clock_Init>

	HAL_GPIO_Init(GPIOA, &localStruct);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <Initialize_Button_Interrupt+0x44>)
 8001224:	f002 fb6c 	bl	8003900 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(G_OFFSET); // 6
 8001228:	2006      	movs	r0, #6
 800122a:	f002 fb1a 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000

0800123c <Game_Init>:
static uint8_t doubles;
static uint8_t tetris;   // # of tetris clears (4 rows)
static uint32_t elapsedTime;

void Game_Init()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    firstGameTick = HAL_GetTick(); // used to get elasped time
 8001240:	f002 f9a6 	bl	8003590 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <Game_Init+0x44>)
 8001248:	6013      	str	r3, [r2, #0]
    singles = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <Game_Init+0x48>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
    doubles = 0;
 8001250:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <Game_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
    tetris = 0;
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <Game_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
    elapsedTime = 0;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <Game_Init+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
    LCD_Clear(0, LCD_COLOR_BLACK);
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fde1 	bl	8001e2c <LCD_Clear>
    Draw_Tetris_Grid();
 800126a:	f000 f853 	bl	8001314 <Draw_Tetris_Grid>
    spawnBlock(&activeBlock, GenerateRandomNum());
 800126e:	f7ff ff63 	bl	8001138 <GenerateRandomNum>
 8001272:	4603      	mov	r3, r0
 8001274:	4619      	mov	r1, r3
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <Game_Init+0x58>)
 8001278:	f7ff fc8a 	bl	8000b90 <spawnBlock>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001e8 	.word	0x200001e8
 8001284:	200001ec 	.word	0x200001ec
 8001288:	200001ed 	.word	0x200001ed
 800128c:	200001ee 	.word	0x200001ee
 8001290:	200001f0 	.word	0x200001f0
 8001294:	200000cc 	.word	0x200000cc

08001298 <Display_Start_Screen>:

void Display_Start_Screen()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
    //clear screen to white and then display "Start" msg
    LCD_Clear(0, LCD_COLOR_WHITE);
 800129e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 fdc2 	bl	8001e2c <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fde1 	bl	8001e70 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80012ae:	4816      	ldr	r0, [pc, #88]	@ (8001308 <Display_Start_Screen+0x70>)
 80012b0:	f000 fdee 	bl	8001e90 <LCD_SetFont>
    LCD_Draw_Square_Fill(120, 140, 144, LCD_COLOR_BLACK); // black outline
 80012b4:	2300      	movs	r3, #0
 80012b6:	2290      	movs	r2, #144	@ 0x90
 80012b8:	218c      	movs	r1, #140	@ 0x8c
 80012ba:	2078      	movs	r0, #120	@ 0x78
 80012bc:	f000 fd22 	bl	8001d04 <LCD_Draw_Square_Fill>
    LCD_Draw_Square_Fill(120, 140, 140, LCD_COLOR_RED); //box in middle of screen
 80012c0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012c4:	228c      	movs	r2, #140	@ 0x8c
 80012c6:	218c      	movs	r1, #140	@ 0x8c
 80012c8:	2078      	movs	r0, #120	@ 0x78
 80012ca:	f000 fd1b 	bl	8001d04 <LCD_Draw_Square_Fill>
    //DisplayBlocks(); //THIS BREAKS THE CODE???? NO IDEA WHY
    //message in middle of screen
    int x = 58;
 80012ce:	233a      	movs	r3, #58	@ 0x3a
 80012d0:	607b      	str	r3, [r7, #4]
	int y = 110;
 80012d2:	236e      	movs	r3, #110	@ 0x6e
 80012d4:	603b      	str	r3, [r7, #0]
	LCD_DisplayString(x, y, "Press To");
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	b291      	uxth	r1, r2
 80012de:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <Display_Start_Screen+0x74>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fe75 	bl	8001fd0 <LCD_DisplayString>
	x=80;
 80012e6:	2350      	movs	r3, #80	@ 0x50
 80012e8:	607b      	str	r3, [r7, #4]
	y=140;
 80012ea:	238c      	movs	r3, #140	@ 0x8c
 80012ec:	603b      	str	r3, [r7, #0]
	LCD_DisplayString(x, y, "Start");
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	b291      	uxth	r1, r2
 80012f6:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <Display_Start_Screen+0x78>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fe69 	bl	8001fd0 <LCD_DisplayString>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000004 	.word	0x20000004
 800130c:	08007b6c 	.word	0x08007b6c
 8001310:	08007b78 	.word	0x08007b78

08001314 <Draw_Tetris_Grid>:

void Draw_Tetris_Grid()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	// draw the vertical grid lines
	for (int pixel_x = 0; pixel_x <= GRID_WIDTH; pixel_x += 24) //can eventually take the block as input argument,
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	e00b      	b.n	8001338 <Draw_Tetris_Grid+0x24>
		// so that block->cellsize can be the size of the grid
	{
		LCD_Draw_Vertical_Line(pixel_x, 0, GRID_HEIGHT-7, LCD_COLOR_WHITE); // need to perfect this so the -7 is not needed
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	b298      	uxth	r0, r3
 8001324:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001328:	f240 1239 	movw	r2, #313	@ 0x139
 800132c:	2100      	movs	r1, #0
 800132e:	f000 fd2f 	bl	8001d90 <LCD_Draw_Vertical_Line>
	for (int pixel_x = 0; pixel_x <= GRID_WIDTH; pixel_x += 24) //can eventually take the block as input argument,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3318      	adds	r3, #24
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2bf0      	cmp	r3, #240	@ 0xf0
 800133c:	ddf0      	ble.n	8001320 <Draw_Tetris_Grid+0xc>
	}
	LCD_Draw_Vertical_Line(GRID_WIDTH - 1, 0, GRID_HEIGHT-7, LCD_COLOR_WHITE); // for the right edge of screen
 800133e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001342:	f240 1239 	movw	r2, #313	@ 0x139
 8001346:	2100      	movs	r1, #0
 8001348:	20ef      	movs	r0, #239	@ 0xef
 800134a:	f000 fd21 	bl	8001d90 <LCD_Draw_Vertical_Line>

	// draw the horizontl grid lines
	for (int pixel_y = 0; pixel_y <= GRID_HEIGHT; pixel_y += 24)
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	e00a      	b.n	800136a <Draw_Tetris_Grid+0x56>
	{
		LCD_Draw_Horizontal_Line(0, pixel_y, GRID_WIDTH, LCD_COLOR_WHITE);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b299      	uxth	r1, r3
 8001358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800135c:	22f0      	movs	r2, #240	@ 0xf0
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fd3d 	bl	8001dde <LCD_Draw_Horizontal_Line>
	for (int pixel_y = 0; pixel_y <= GRID_HEIGHT; pixel_y += 24)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3318      	adds	r3, #24
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001370:	ddf0      	ble.n	8001354 <Draw_Tetris_Grid+0x40>
	}
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <Gameplay>:

void Gameplay()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
    if (!detectCollision(&activeBlock, gameGrid, NONE, DOWN))
 8001382:	2301      	movs	r3, #1
 8001384:	2200      	movs	r2, #0
 8001386:	491e      	ldr	r1, [pc, #120]	@ (8001400 <Gameplay+0x84>)
 8001388:	481e      	ldr	r0, [pc, #120]	@ (8001404 <Gameplay+0x88>)
 800138a:	f7ff fc3b 	bl	8000c04 <detectCollision>
 800138e:	4603      	mov	r3, r0
 8001390:	f083 0301 	eor.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <Gameplay+0x26>
    {
        moveBlockDown(&activeBlock);
 800139a:	481a      	ldr	r0, [pc, #104]	@ (8001404 <Gameplay+0x88>)
 800139c:	f7ff fa18 	bl	80007d0 <moveBlockDown>
        {
        	tetris++;
        }
    spawnBlock(&activeBlock, GenerateRandomNum());
    }
}
 80013a0:	e02a      	b.n	80013f8 <Gameplay+0x7c>
        lockBlock(&activeBlock, gameGrid);
 80013a2:	4917      	ldr	r1, [pc, #92]	@ (8001400 <Gameplay+0x84>)
 80013a4:	4817      	ldr	r0, [pc, #92]	@ (8001404 <Gameplay+0x88>)
 80013a6:	f7ff fb7a 	bl	8000a9e <lockBlock>
        uint8_t clearedRows = clearTetrisRows(gameGrid);
 80013aa:	4815      	ldr	r0, [pc, #84]	@ (8001400 <Gameplay+0x84>)
 80013ac:	f000 fa38 	bl	8001820 <clearTetrisRows>
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
        if(clearedRows == 1) // updating game stats
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d105      	bne.n	80013c6 <Gameplay+0x4a>
        	singles++;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <Gameplay+0x8c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <Gameplay+0x8c>)
 80013c4:	701a      	strb	r2, [r3, #0]
        if(clearedRows == 2)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d105      	bne.n	80013d8 <Gameplay+0x5c>
        	doubles++;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <Gameplay+0x90>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <Gameplay+0x90>)
 80013d6:	701a      	strb	r2, [r3, #0]
        if(clearedRows == 4)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d105      	bne.n	80013ea <Gameplay+0x6e>
        	tetris++;
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <Gameplay+0x94>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <Gameplay+0x94>)
 80013e8:	701a      	strb	r2, [r3, #0]
    spawnBlock(&activeBlock, GenerateRandomNum());
 80013ea:	f7ff fea5 	bl	8001138 <GenerateRandomNum>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	@ (8001404 <Gameplay+0x88>)
 80013f4:	f7ff fbcc 	bl	8000b90 <spawnBlock>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200000e4 	.word	0x200000e4
 8001404:	200000cc 	.word	0x200000cc
 8001408:	200001ec 	.word	0x200001ec
 800140c:	200001ed 	.word	0x200001ed
 8001410:	200001ee 	.word	0x200001ee

08001414 <RotateEvent>:

void RotateEvent()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	if (canRotate(&activeBlock, gameGrid))
 8001418:	4906      	ldr	r1, [pc, #24]	@ (8001434 <RotateEvent+0x20>)
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <RotateEvent+0x24>)
 800141c:	f7ff fc90 	bl	8000d40 <canRotate>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <RotateEvent+0x1a>
	{
		rotateBlock(&activeBlock);
 8001426:	4804      	ldr	r0, [pc, #16]	@ (8001438 <RotateEvent+0x24>)
 8001428:	f7ff f9b8 	bl	800079c <rotateBlock>
 800142c:	e000      	b.n	8001430 <RotateEvent+0x1c>
	}
	else
	{
		return; // cant rotate
 800142e:	bf00      	nop
		//maybe put a debug statement here?
	}
}
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000e4 	.word	0x200000e4
 8001438:	200000cc 	.word	0x200000cc

0800143c <MoveLeftEvent>:

void MoveLeftEvent()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    if (!detectCollision(&activeBlock, gameGrid, LEFT, NONE))
 8001440:	2300      	movs	r3, #0
 8001442:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001446:	4907      	ldr	r1, [pc, #28]	@ (8001464 <MoveLeftEvent+0x28>)
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MoveLeftEvent+0x2c>)
 800144a:	f7ff fbdb 	bl	8000c04 <detectCollision>
 800144e:	4603      	mov	r3, r0
 8001450:	f083 0301 	eor.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <MoveLeftEvent+0x24>
    {
        moveBlockLeft(&activeBlock);
 800145a:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MoveLeftEvent+0x2c>)
 800145c:	f7ff f9cd 	bl	80007fa <moveBlockLeft>
    }
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000e4 	.word	0x200000e4
 8001468:	200000cc 	.word	0x200000cc

0800146c <MoveRightEvent>:

void MoveRightEvent()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    if (!detectCollision(&activeBlock, gameGrid, RIGHT, NONE))
 8001470:	2300      	movs	r3, #0
 8001472:	2201      	movs	r2, #1
 8001474:	4907      	ldr	r1, [pc, #28]	@ (8001494 <MoveRightEvent+0x28>)
 8001476:	4808      	ldr	r0, [pc, #32]	@ (8001498 <MoveRightEvent+0x2c>)
 8001478:	f7ff fbc4 	bl	8000c04 <detectCollision>
 800147c:	4603      	mov	r3, r0
 800147e:	f083 0301 	eor.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <MoveRightEvent+0x22>
    {
        moveBlockRight(&activeBlock);
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <MoveRightEvent+0x2c>)
 800148a:	f7ff f9cb 	bl	8000824 <moveBlockRight>
    }
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200000e4 	.word	0x200000e4
 8001498:	200000cc 	.word	0x200000cc

0800149c <MoveBlockDownEvent>:

void MoveBlockDownEvent()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	 while (!detectCollision(&activeBlock, gameGrid, NONE, DOWN))
 80014a0:	e002      	b.n	80014a8 <MoveBlockDownEvent+0xc>
	 {
		 moveBlockDown(&activeBlock); //move block all the way down (until collision)
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <MoveBlockDownEvent+0x40>)
 80014a4:	f7ff f994 	bl	80007d0 <moveBlockDown>
	 while (!detectCollision(&activeBlock, gameGrid, NONE, DOWN))
 80014a8:	2301      	movs	r3, #1
 80014aa:	2200      	movs	r2, #0
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <MoveBlockDownEvent+0x44>)
 80014ae:	480b      	ldr	r0, [pc, #44]	@ (80014dc <MoveBlockDownEvent+0x40>)
 80014b0:	f7ff fba8 	bl	8000c04 <detectCollision>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <MoveBlockDownEvent+0x6>
	 }

	 lockBlock(&activeBlock, gameGrid); //this handles the same way as tickhandler
 80014c0:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <MoveBlockDownEvent+0x44>)
 80014c2:	4806      	ldr	r0, [pc, #24]	@ (80014dc <MoveBlockDownEvent+0x40>)
 80014c4:	f7ff faeb 	bl	8000a9e <lockBlock>
	 spawnBlock(&activeBlock, GenerateRandomNum());
 80014c8:	f7ff fe36 	bl	8001138 <GenerateRandomNum>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <MoveBlockDownEvent+0x40>)
 80014d2:	f7ff fb5d 	bl	8000b90 <spawnBlock>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000cc 	.word	0x200000cc
 80014e0:	200000e4 	.word	0x200000e4

080014e4 <Check_Game_Over>:

bool Check_Game_Over()
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
    for (int col = 0; col < GRID_WIDTH / 24; col++) //goes thru each column in 2nd to top row of grid,
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	e00b      	b.n	8001508 <Check_Game_Over+0x24>
    	//if any cell has a block, games over
    {
        if (gameGrid[2][col] != 0)
 80014f0:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <Check_Game_Over+0x38>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3314      	adds	r3, #20
 80014f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <Check_Game_Over+0x1e>
        {
            return true;
 80014fe:	2301      	movs	r3, #1
 8001500:	e006      	b.n	8001510 <Check_Game_Over+0x2c>
    for (int col = 0; col < GRID_WIDTH / 24; col++) //goes thru each column in 2nd to top row of grid,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b09      	cmp	r3, #9
 800150c:	ddf0      	ble.n	80014f0 <Check_Game_Over+0xc>
        }
    }
    return false;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	200000e4 	.word	0x200000e4

08001520 <Display_End_Screen>:

void Display_End_Screen()
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
    elapsedTime = (HAL_GetTick() - firstGameTick) / 1000; //convert to seconds
 8001526:	f002 f833 	bl	8003590 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	4bac      	ldr	r3, [pc, #688]	@ (80017e0 <Display_End_Screen+0x2c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4aac      	ldr	r2, [pc, #688]	@ (80017e4 <Display_End_Screen+0x2c4>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	4aab      	ldr	r2, [pc, #684]	@ (80017e8 <Display_End_Screen+0x2c8>)
 800153c:	6013      	str	r3, [r2, #0]
    LCD_Clear(0, LCD_COLOR_BLACK);
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f000 fc73 	bl	8001e2c <LCD_Clear>
    LCD_SetFont(&Font16x24);
 8001546:	48a9      	ldr	r0, [pc, #676]	@ (80017ec <Display_End_Screen+0x2cc>)
 8001548:	f000 fca2 	bl	8001e90 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 800154c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001550:	f000 fc8e 	bl	8001e70 <LCD_SetTextColor>

    // "Game Over!"
    int x = 45, y = 10;
 8001554:	232d      	movs	r3, #45	@ 0x2d
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	230a      	movs	r3, #10
 800155a:	60bb      	str	r3, [r7, #8]
    LCD_DisplayString(x, y, "Game Over!");
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	b29b      	uxth	r3, r3
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	b291      	uxth	r1, r2
 8001564:	4aa2      	ldr	r2, [pc, #648]	@ (80017f0 <Display_End_Screen+0x2d0>)
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fd32 	bl	8001fd0 <LCD_DisplayString>

    // "Play Time:"
    x = 10; y = 40;
 800156c:	230a      	movs	r3, #10
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	2328      	movs	r3, #40	@ 0x28
 8001572:	60bb      	str	r3, [r7, #8]
    LCD_DisplayString(x, y, "Play Time:");
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	b29b      	uxth	r3, r3
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	b291      	uxth	r1, r2
 800157c:	4a9d      	ldr	r2, [pc, #628]	@ (80017f4 <Display_End_Screen+0x2d4>)
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fd26 	bl	8001fd0 <LCD_DisplayString>

    //print  elapsed time
    int minutes = elapsedTime / 60; //computing minutes & seconds
 8001584:	4b98      	ldr	r3, [pc, #608]	@ (80017e8 <Display_End_Screen+0x2c8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a9b      	ldr	r2, [pc, #620]	@ (80017f8 <Display_End_Screen+0x2d8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	607b      	str	r3, [r7, #4]
    int seconds = elapsedTime % 60;
 8001592:	4b95      	ldr	r3, [pc, #596]	@ (80017e8 <Display_End_Screen+0x2c8>)
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	4b98      	ldr	r3, [pc, #608]	@ (80017f8 <Display_End_Screen+0x2d8>)
 8001598:	fba3 2301 	umull	r2, r3, r3, r1
 800159c:	095a      	lsrs	r2, r3, #5
 800159e:	4613      	mov	r3, r2
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	1aca      	subs	r2, r1, r3
 80015a8:	603a      	str	r2, [r7, #0]
    x = 180;
 80015aa:	23b4      	movs	r3, #180	@ 0xb4
 80015ac:	60fb      	str	r3, [r7, #12]
    LCD_DisplayChar(x, y, (minutes % 10) + '0'); //display the single digit for minutes
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b298      	uxth	r0, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	b29c      	uxth	r4, r3
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4b90      	ldr	r3, [pc, #576]	@ (80017fc <Display_End_Screen+0x2dc>)
 80015ba:	fb83 1302 	smull	r1, r3, r3, r2
 80015be:	1099      	asrs	r1, r3, #2
 80015c0:	17d3      	asrs	r3, r2, #31
 80015c2:	1ac9      	subs	r1, r1, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	1ad1      	subs	r1, r2, r3
 80015ce:	b2cb      	uxtb	r3, r1
 80015d0:	3330      	adds	r3, #48	@ 0x30
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4621      	mov	r1, r4
 80015d8:	f000 fcd8 	bl	8001f8c <LCD_DisplayChar>
    x += 10;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	330a      	adds	r3, #10
 80015e0:	60fb      	str	r3, [r7, #12]
    LCD_DisplayChar(x, y, ':');
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	b291      	uxth	r1, r2
 80015ea:	223a      	movs	r2, #58	@ 0x3a
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fccd 	bl	8001f8c <LCD_DisplayChar>
    x += 10;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	330a      	adds	r3, #10
 80015f6:	60fb      	str	r3, [r7, #12]
    LCD_DisplayChar(x, y, (seconds / 10) + '0'); //display the tens place seconds
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	b298      	uxth	r0, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	b299      	uxth	r1, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <Display_End_Screen+0x2dc>)
 8001604:	fb82 4203 	smull	r4, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3330      	adds	r3, #48	@ 0x30
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	f000 fcb9 	bl	8001f8c <LCD_DisplayChar>
    x += Font16x24.Width;
 800161a:	4b74      	ldr	r3, [pc, #464]	@ (80017ec <Display_End_Screen+0x2cc>)
 800161c:	889b      	ldrh	r3, [r3, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
    LCD_DisplayChar(x, y, (seconds % 10) + '0'); // display the ones place seconds
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	b298      	uxth	r0, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	b29c      	uxth	r4, r3
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4b72      	ldr	r3, [pc, #456]	@ (80017fc <Display_End_Screen+0x2dc>)
 8001632:	fb83 1302 	smull	r1, r3, r3, r2
 8001636:	1099      	asrs	r1, r3, #2
 8001638:	17d3      	asrs	r3, r2, #31
 800163a:	1ac9      	subs	r1, r1, r3
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	1ad1      	subs	r1, r2, r3
 8001646:	b2cb      	uxtb	r3, r1
 8001648:	3330      	adds	r3, #48	@ 0x30
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4621      	mov	r1, r4
 8001650:	f000 fc9c 	bl	8001f8c <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8001654:	486a      	ldr	r0, [pc, #424]	@ (8001800 <Display_End_Screen+0x2e0>)
 8001656:	f000 fc1b 	bl	8001e90 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_RED);
 800165a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800165e:	f000 fc07 	bl	8001e70 <LCD_SetTextColor>


	x = 10; y += 50;
 8001662:	230a      	movs	r3, #10
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3332      	adds	r3, #50	@ 0x32
 800166a:	60bb      	str	r3, [r7, #8]
	LCD_DisplayString(x, y, "Single Clears:");
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	b29b      	uxth	r3, r3
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	b291      	uxth	r1, r2
 8001674:	4a63      	ldr	r2, [pc, #396]	@ (8001804 <Display_End_Screen+0x2e4>)
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fcaa 	bl	8001fd0 <LCD_DisplayString>
	x = 175;
 800167c:	23af      	movs	r3, #175	@ 0xaf
 800167e:	60fb      	str	r3, [r7, #12]
	LCD_DisplayChar(x, y, (singles / 10) + '0'); // tens
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	b298      	uxth	r0, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	b299      	uxth	r1, r3
 8001688:	4b5f      	ldr	r3, [pc, #380]	@ (8001808 <Display_End_Screen+0x2e8>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4a5f      	ldr	r2, [pc, #380]	@ (800180c <Display_End_Screen+0x2ec>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	08db      	lsrs	r3, r3, #3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	3330      	adds	r3, #48	@ 0x30
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	f000 fc76 	bl	8001f8c <LCD_DisplayChar>
	x += Font12x12.Width;
 80016a0:	4b57      	ldr	r3, [pc, #348]	@ (8001800 <Display_End_Screen+0x2e0>)
 80016a2:	889b      	ldrh	r3, [r3, #4]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
	LCD_DisplayChar(x, y, (singles % 10) + '0'); //ones
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	b298      	uxth	r0, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	b29c      	uxth	r4, r3
 80016b4:	4b54      	ldr	r3, [pc, #336]	@ (8001808 <Display_End_Screen+0x2e8>)
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	4b54      	ldr	r3, [pc, #336]	@ (800180c <Display_End_Screen+0x2ec>)
 80016ba:	fba3 1302 	umull	r1, r3, r3, r2
 80016be:	08d9      	lsrs	r1, r3, #3
 80016c0:	460b      	mov	r3, r1
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3330      	adds	r3, #48	@ 0x30
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4621      	mov	r1, r4
 80016d4:	f000 fc5a 	bl	8001f8c <LCD_DisplayChar>

    LCD_SetTextColor(LCD_COLOR_BLUE);
 80016d8:	201f      	movs	r0, #31
 80016da:	f000 fbc9 	bl	8001e70 <LCD_SetTextColor>
	x = 10; y += 30;
 80016de:	230a      	movs	r3, #10
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	331e      	adds	r3, #30
 80016e6:	60bb      	str	r3, [r7, #8]
	LCD_DisplayString(x, y, "Double Clears:");
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	b291      	uxth	r1, r2
 80016f0:	4a47      	ldr	r2, [pc, #284]	@ (8001810 <Display_End_Screen+0x2f0>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fc6c 	bl	8001fd0 <LCD_DisplayString>
	x = 175;
 80016f8:	23af      	movs	r3, #175	@ 0xaf
 80016fa:	60fb      	str	r3, [r7, #12]
	LCD_DisplayChar(x, y, (doubles / 10) + '0');
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	b298      	uxth	r0, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	b299      	uxth	r1, r3
 8001704:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <Display_End_Screen+0x2f4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4a40      	ldr	r2, [pc, #256]	@ (800180c <Display_End_Screen+0x2ec>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	08db      	lsrs	r3, r3, #3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3330      	adds	r3, #48	@ 0x30
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f000 fc38 	bl	8001f8c <LCD_DisplayChar>
	x += Font12x12.Width;
 800171c:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <Display_End_Screen+0x2e0>)
 800171e:	889b      	ldrh	r3, [r3, #4]
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
	LCD_DisplayChar(x, y, (doubles % 10) + '0');
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	b298      	uxth	r0, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	b29c      	uxth	r4, r3
 8001730:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <Display_End_Screen+0x2f4>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b35      	ldr	r3, [pc, #212]	@ (800180c <Display_End_Screen+0x2ec>)
 8001736:	fba3 1302 	umull	r1, r3, r3, r2
 800173a:	08d9      	lsrs	r1, r3, #3
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3330      	adds	r3, #48	@ 0x30
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4621      	mov	r1, r4
 8001750:	f000 fc1c 	bl	8001f8c <LCD_DisplayChar>

    LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001754:	f44f 407c 	mov.w	r0, #64512	@ 0xfc00
 8001758:	f000 fb8a 	bl	8001e70 <LCD_SetTextColor>
	x = 10; y += 30;
 800175c:	230a      	movs	r3, #10
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	331e      	adds	r3, #30
 8001764:	60bb      	str	r3, [r7, #8]
	LCD_DisplayString(x, y, "Tetris Clears:");
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	b29b      	uxth	r3, r3
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	b291      	uxth	r1, r2
 800176e:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <Display_End_Screen+0x2f8>)
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fc2d 	bl	8001fd0 <LCD_DisplayString>
	x = 175;
 8001776:	23af      	movs	r3, #175	@ 0xaf
 8001778:	60fb      	str	r3, [r7, #12]
	LCD_DisplayChar(x, y, (tetris / 10) + '0');
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	b298      	uxth	r0, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	b299      	uxth	r1, r3
 8001782:	4b26      	ldr	r3, [pc, #152]	@ (800181c <Display_End_Screen+0x2fc>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4a21      	ldr	r2, [pc, #132]	@ (800180c <Display_End_Screen+0x2ec>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3330      	adds	r3, #48	@ 0x30
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	f000 fbf9 	bl	8001f8c <LCD_DisplayChar>
	x += Font12x12.Width;
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <Display_End_Screen+0x2e0>)
 800179c:	889b      	ldrh	r3, [r3, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
	LCD_DisplayChar(x, y, (tetris % 10) + '0');
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	b298      	uxth	r0, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	b29c      	uxth	r4, r3
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <Display_End_Screen+0x2fc>)
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <Display_End_Screen+0x2ec>)
 80017b4:	fba3 1302 	umull	r1, r3, r3, r2
 80017b8:	08d9      	lsrs	r1, r3, #3
 80017ba:	460b      	mov	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3330      	adds	r3, #48	@ 0x30
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	f000 fbdd 	bl	8001f8c <LCD_DisplayChar>

	DisplayBlocks();
 80017d2:	f7ff fbd1 	bl	8000f78 <DisplayBlocks>
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001e8 	.word	0x200001e8
 80017e4:	10624dd3 	.word	0x10624dd3
 80017e8:	200001f0 	.word	0x200001f0
 80017ec:	20000004 	.word	0x20000004
 80017f0:	08007b80 	.word	0x08007b80
 80017f4:	08007b8c 	.word	0x08007b8c
 80017f8:	88888889 	.word	0x88888889
 80017fc:	66666667 	.word	0x66666667
 8001800:	2000000c 	.word	0x2000000c
 8001804:	08007b98 	.word	0x08007b98
 8001808:	200001ec 	.word	0x200001ec
 800180c:	cccccccd 	.word	0xcccccccd
 8001810:	08007ba8 	.word	0x08007ba8
 8001814:	200001ed 	.word	0x200001ed
 8001818:	08007bb8 	.word	0x08007bb8
 800181c:	200001ee 	.word	0x200001ee

08001820 <clearTetrisRows>:


uint8_t clearTetrisRows(uint16_t gameGrid[GRID_HEIGHT / 24][GRID_WIDTH / 24])
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	@ 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    uint8_t linesCleared = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    bool fullRow;
    for (int row = 12; row >= 0; row--) //starting at bottom row, traverse upwards
 800182e:	230c      	movs	r3, #12
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
 8001832:	e0d9      	b.n	80019e8 <clearTetrisRows+0x1c8>
    {
        for (int col = 0; col < 10; col++) // check if row is completely full
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001838:	e013      	b.n	8001862 <clearTetrisRows+0x42>
        {
            if (gameGrid[row][col] == 0) //if any cell is empty, row isn't complete
 800183a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800184c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d103      	bne.n	800185c <clearTetrisRows+0x3c>
            {
                fullRow = false;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                break;
 800185a:	e005      	b.n	8001868 <clearTetrisRows+0x48>
        for (int col = 0; col < 10; col++) // check if row is completely full
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	3301      	adds	r3, #1
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	2b09      	cmp	r3, #9
 8001866:	dde8      	ble.n	800183a <clearTetrisRows+0x1a>
            }
        }
        if (fullRow == true)
 8001868:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80b6 	beq.w	80019de <clearTetrisRows+0x1be>
        {
            linesCleared++;
 8001872:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001876:	3301      	adds	r3, #1
 8001878:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            for (int col = 0; col < 10; col++) // loop thru and set each cell to 0 to clear it
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001880:	e026      	b.n	80018d0 <clearTetrisRows+0xb0>
            {
                gameGrid[row][col] = 0;
 8001882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001894:	2100      	movs	r1, #0
 8001896:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                int pixel_x = col * 24; // get cells pixel coords for lcd drawing
 800189a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	60fb      	str	r3, [r7, #12]
                int pixel_y = row * 24;
 80018a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	60bb      	str	r3, [r7, #8]
                LCD_Draw_Square_Fill(pixel_x + 12, pixel_y + 12, 24, LCD_COLOR_BLACK); //set to black
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	330c      	adds	r3, #12
 80018b8:	b298      	uxth	r0, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	330c      	adds	r3, #12
 80018c0:	b299      	uxth	r1, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	2218      	movs	r2, #24
 80018c6:	f000 fa1d 	bl	8001d04 <LCD_Draw_Square_Fill>
            for (int col = 0; col < 10; col++) // loop thru and set each cell to 0 to clear it
 80018ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018cc:	3301      	adds	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d2:	2b09      	cmp	r3, #9
 80018d4:	ddd5      	ble.n	8001882 <clearTetrisRows+0x62>
            }
            for (int i = row; i > 0; i--) // move every row down 1 row (i = row traverse, starting @ current row)
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018da:	e05d      	b.n	8001998 <clearTetrisRows+0x178>
            {
                for (int col = 0; col < 10; col++)
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	e054      	b.n	800198c <clearTetrisRows+0x16c>
                {
                    gameGrid[i][col] = gameGrid[i - 1][col]; //copy the rows color/block data down
 80018e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3b14      	subs	r3, #20
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	18d1      	adds	r1, r2, r3
 80018f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                    int pixel_x = col * 24;
 800190e:	6a3a      	ldr	r2, [r7, #32]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	617b      	str	r3, [r7, #20]
                    int pixel_y = i * 24;
 800191a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	613b      	str	r3, [r7, #16]
                    if (gameGrid[i][col] != 0) // if the cell has a block
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	6a3a      	ldr	r2, [r7, #32]
 8001938:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <clearTetrisRows+0x14e>
                    {
                        LCD_Draw_Square_Fill(pixel_x + 12, pixel_y + 12, 24, gameGrid[i][col]);//redraw new row with the old block colors
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	330c      	adds	r3, #12
 8001946:	b298      	uxth	r0, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	b29b      	uxth	r3, r3
 800194c:	330c      	adds	r3, #12
 800194e:	b299      	uxth	r1, r3
 8001950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001966:	2218      	movs	r2, #24
 8001968:	f000 f9cc 	bl	8001d04 <LCD_Draw_Square_Fill>
 800196c:	e00b      	b.n	8001986 <clearTetrisRows+0x166>
                    }
                    else
                    {
                        LCD_Draw_Square_Fill(pixel_x + 12, pixel_y + 12, 24, LCD_COLOR_BLACK); //set to black to clear
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	b29b      	uxth	r3, r3
 8001972:	330c      	adds	r3, #12
 8001974:	b298      	uxth	r0, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	b29b      	uxth	r3, r3
 800197a:	330c      	adds	r3, #12
 800197c:	b299      	uxth	r1, r3
 800197e:	2300      	movs	r3, #0
 8001980:	2218      	movs	r2, #24
 8001982:	f000 f9bf 	bl	8001d04 <LCD_Draw_Square_Fill>
                for (int col = 0; col < 10; col++)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	3301      	adds	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	2b09      	cmp	r3, #9
 8001990:	dda7      	ble.n	80018e2 <clearTetrisRows+0xc2>
            for (int i = row; i > 0; i--) // move every row down 1 row (i = row traverse, starting @ current row)
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	3b01      	subs	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	dc9e      	bgt.n	80018dc <clearTetrisRows+0xbc>
                    }
                }
            }
            for (int col = 0; col < 10; col++) // clear new top row
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e016      	b.n	80019d2 <clearTetrisRows+0x1b2>
            {
                gameGrid[0][col] = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	2100      	movs	r1, #0
 80019aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                int pixel_x = col * 24;
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	61bb      	str	r3, [r7, #24]
                LCD_Draw_Square_Fill(pixel_x + 12, 12, 24, LCD_COLOR_BLACK); // set top row to black
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	330c      	adds	r3, #12
 80019c0:	b298      	uxth	r0, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	2218      	movs	r2, #24
 80019c6:	210c      	movs	r1, #12
 80019c8:	f000 f99c 	bl	8001d04 <LCD_Draw_Square_Fill>
            for (int col = 0; col < 10; col++) // clear new top row
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	dde5      	ble.n	80019a4 <clearTetrisRows+0x184>
            }
            row++; //recheck row after shift
 80019d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019da:	3301      	adds	r3, #1
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        Draw_Tetris_Grid(); // redraw grid
 80019de:	f7ff fc99 	bl	8001314 <Draw_Tetris_Grid>
    for (int row = 12; row >= 0; row--) //starting at bottom row, traverse upwards
 80019e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e4:	3b01      	subs	r3, #1
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f6bf af22 	bge.w	8001834 <clearTetrisRows+0x14>
    }
    return linesCleared; //# of lines cleared
 80019f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3738      	adds	r7, #56	@ 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b5a      	ldr	r3, [pc, #360]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a59      	ldr	r2, [pc, #356]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b57      	ldr	r3, [pc, #348]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b53      	ldr	r3, [pc, #332]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a52      	ldr	r2, [pc, #328]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a4b      	ldr	r2, [pc, #300]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b49      	ldr	r3, [pc, #292]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a44      	ldr	r2, [pc, #272]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a36      	ldr	r2, [pc, #216]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b30      	ldr	r3, [pc, #192]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <LCD_GPIO_Init+0x174>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001ac6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001aca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001ad8:	230e      	movs	r3, #14
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4824      	ldr	r0, [pc, #144]	@ (8001b74 <LCD_GPIO_Init+0x178>)
 8001ae4:	f001 ff0c 	bl	8003900 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001ae8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001aec:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4820      	ldr	r0, [pc, #128]	@ (8001b78 <LCD_GPIO_Init+0x17c>)
 8001af6:	f001 ff03 	bl	8003900 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001afa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	481d      	ldr	r0, [pc, #116]	@ (8001b7c <LCD_GPIO_Init+0x180>)
 8001b08:	f001 fefa 	bl	8003900 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001b0c:	2348      	movs	r3, #72	@ 0x48
 8001b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	481a      	ldr	r0, [pc, #104]	@ (8001b80 <LCD_GPIO_Init+0x184>)
 8001b18:	f001 fef2 	bl	8003900 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4816      	ldr	r0, [pc, #88]	@ (8001b84 <LCD_GPIO_Init+0x188>)
 8001b2a:	f001 fee9 	bl	8003900 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001b2e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b32:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4813      	ldr	r0, [pc, #76]	@ (8001b88 <LCD_GPIO_Init+0x18c>)
 8001b3c:	f001 fee0 	bl	8003900 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001b40:	2303      	movs	r3, #3
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001b44:	2309      	movs	r3, #9
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480a      	ldr	r0, [pc, #40]	@ (8001b78 <LCD_GPIO_Init+0x17c>)
 8001b50:	f001 fed6 	bl	8003900 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001b54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <LCD_GPIO_Init+0x18c>)
 8001b62:	f001 fecd 	bl	8003900 <HAL_GPIO_Init>
}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	@ 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800

08001b8c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b090      	sub	sp, #64	@ 0x40
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001b9a:	23f0      	movs	r3, #240	@ 0xf0
 8001b9c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001ba2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ba6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001bac:	23ff      	movs	r3, #255	@ 0xff
 8001bae:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <LTCD_Layer_Init+0x78>)
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001bc8:	23f0      	movs	r3, #240	@ 0xf0
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001bcc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <LTCD_Layer_Init+0x7c>)
 8001bee:	f003 fa4d 	bl	800508c <HAL_LTDC_ConfigLayer>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001bf8:	f000 fa14 	bl	8002024 <LCD_Error_Handler>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	3740      	adds	r7, #64	@ 0x40
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002d0 	.word	0x200002d0
 8001c08:	200001f4 	.word	0x200001f4

08001c0c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001c10:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c12:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc0 <LTCD__Init+0xb4>)
 8001c14:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001c16:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c18:	2209      	movs	r2, #9
 8001c1a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001c1c:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c24:	221d      	movs	r2, #29
 8001c26:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c30:	f240 120d 	movw	r2, #269	@ 0x10d
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c38:	f240 1243 	movw	r2, #323	@ 0x143
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c40:	f240 1217 	movw	r2, #279	@ 0x117
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c48:	f240 1247 	movw	r2, #327	@ 0x147
 8001c4c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <LTCD__Init+0xb8>)
 8001c68:	2208      	movs	r2, #8
 8001c6a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <LTCD__Init+0xb8>)
 8001c6e:	22c0      	movs	r2, #192	@ 0xc0
 8001c70:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001c72:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <LTCD__Init+0xb8>)
 8001c74:	2204      	movs	r2, #4
 8001c76:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <LTCD__Init+0xb8>)
 8001c7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001c80:	4810      	ldr	r0, [pc, #64]	@ (8001cc4 <LTCD__Init+0xb8>)
 8001c82:	f004 f85d 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <LTCD__Init+0xb0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001c9e:	f7ff fead 	bl	80019fc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ca2:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <LTCD__Init+0xb0>)
 8001ca4:	f003 f922 	bl	8004eec <HAL_LTDC_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001cae:	f000 f9b9 	bl	8002024 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001cb2:	f000 fa25 	bl	8002100 <ili9341_Init>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001f4 	.word	0x200001f4
 8001cc0:	40016800 	.word	0x40016800
 8001cc4:	2000029c 	.word	0x2000029c

08001cc8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	80bb      	strh	r3, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001cda:	88ba      	ldrh	r2, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4905      	ldr	r1, [pc, #20]	@ (8001d00 <LCD_Draw_Pixel+0x38>)
 8001cec:	887a      	ldrh	r2, [r7, #2]
 8001cee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200002d0 	.word	0x200002d0

08001d04 <LCD_Draw_Square_Fill>:
    }

}

void LCD_Draw_Square_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t sideLength, uint16_t color)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4603      	mov	r3, r0
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	803b      	strh	r3, [r7, #0]
    int16_t halfsize = sideLength / 2;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	817b      	strh	r3, [r7, #10]
    for (int16_t y = -halfsize; y <= halfsize; y++)
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	425b      	negs	r3, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	81fb      	strh	r3, [r7, #14]
 8001d32:	e022      	b.n	8001d7a <LCD_Draw_Square_Fill+0x76>
    {
        for (int16_t x = -halfsize; x <= halfsize; x++)
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	425b      	negs	r3, r3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	81bb      	strh	r3, [r7, #12]
 8001d3c:	e011      	b.n	8001d62 <LCD_Draw_Square_Fill+0x5e>
        {
            LCD_Draw_Pixel(x + Xpos, y + Ypos, color);
 8001d3e:	89ba      	ldrh	r2, [r7, #12]
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	4413      	add	r3, r2
 8001d44:	b298      	uxth	r0, r3
 8001d46:	89fa      	ldrh	r2, [r7, #14]
 8001d48:	88bb      	ldrh	r3, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	883a      	ldrh	r2, [r7, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7ff ffb9 	bl	8001cc8 <LCD_Draw_Pixel>
        for (int16_t x = -halfsize; x <= halfsize; x++)
 8001d56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	81bb      	strh	r3, [r7, #12]
 8001d62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dde7      	ble.n	8001d3e <LCD_Draw_Square_Fill+0x3a>
    for (int16_t y = -halfsize; y <= halfsize; y++)
 8001d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	81fb      	strh	r3, [r7, #14]
 8001d7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	ddd6      	ble.n	8001d34 <LCD_Draw_Square_Fill+0x30>
        }
    }
}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}

08001d90 <LCD_Draw_Vertical_Line>:


void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4604      	mov	r4, r0
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4623      	mov	r3, r4
 8001da0:	80fb      	strh	r3, [r7, #6]
 8001da2:	4603      	mov	r3, r0
 8001da4:	80bb      	strh	r3, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]
 8001daa:	4613      	mov	r3, r2
 8001dac:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	81fb      	strh	r3, [r7, #14]
 8001db2:	e00b      	b.n	8001dcc <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001db4:	89fa      	ldrh	r2, [r7, #14]
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	b299      	uxth	r1, r3
 8001dbc:	883a      	ldrh	r2, [r7, #0]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff81 	bl	8001cc8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	81fb      	strh	r3, [r7, #14]
 8001dcc:	89fa      	ldrh	r2, [r7, #14]
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3ef      	bcc.n	8001db4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}

08001dde <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001dde:	b590      	push	{r4, r7, lr}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4604      	mov	r4, r0
 8001de6:	4608      	mov	r0, r1
 8001de8:	4611      	mov	r1, r2
 8001dea:	461a      	mov	r2, r3
 8001dec:	4623      	mov	r3, r4
 8001dee:	80fb      	strh	r3, [r7, #6]
 8001df0:	4603      	mov	r3, r0
 8001df2:	80bb      	strh	r3, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	81fb      	strh	r3, [r7, #14]
 8001e00:	e00b      	b.n	8001e1a <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8001e02:	89fa      	ldrh	r2, [r7, #14]
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4413      	add	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	883a      	ldrh	r2, [r7, #0]
 8001e0c:	88b9      	ldrh	r1, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff5a 	bl	8001cc8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	3301      	adds	r3, #1
 8001e18:	81fb      	strh	r3, [r7, #14]
 8001e1a:	89fa      	ldrh	r2, [r7, #14]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d3ef      	bcc.n	8001e02 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	460a      	mov	r2, r1
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e007      	b.n	8001e58 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001e48:	4908      	ldr	r1, [pc, #32]	@ (8001e6c <LCD_Clear+0x40>)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	88ba      	ldrh	r2, [r7, #4]
 8001e4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001e5e:	d3f3      	bcc.n	8001e48 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	200002d0 	.word	0x200002d0

08001e70 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <LCD_SetTextColor+0x1c>)
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	8013      	strh	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	20000000 	.word	0x20000000

08001e90 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001e98:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <LCD_SetFont+0x1c>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200002cc 	.word	0x200002cc

08001eb0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	603a      	str	r2, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e04c      	b.n	8001f68 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	e03f      	b.n	8001f54 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <LCD_Draw_Char+0xd0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	889b      	ldrh	r3, [r3, #4]
 8001ee6:	4a27      	ldr	r2, [pc, #156]	@ (8001f84 <LCD_Draw_Char+0xd4>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	fa42 f303 	asr.w	r3, r2, r3
 8001efc:	400b      	ands	r3, r1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <LCD_Draw_Char+0x5c>
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <LCD_Draw_Char+0xd0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d920      	bls.n	8001f4e <LCD_Draw_Char+0x9e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	fa42 f303 	asr.w	r3, r2, r3
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d104      	bne.n	8001f30 <LCD_Draw_Char+0x80>
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <LCD_Draw_Char+0xd0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d80e      	bhi.n	8001f4e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4413      	add	r3, r2
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <LCD_Draw_Char+0xd8>)
 8001f46:	8812      	ldrh	r2, [r2, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7ff febd 	bl	8001cc8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <LCD_Draw_Char+0xd0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	889b      	ldrh	r3, [r3, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d3b8      	bcc.n	8001ed4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <LCD_Draw_Char+0xd0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	88db      	ldrh	r3, [r3, #6]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d3ab      	bcc.n	8001ece <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200002cc 	.word	0x200002cc
 8001f84:	aaaaaaab 	.word	0xaaaaaaab
 8001f88:	20000000 	.word	0x20000000

08001f8c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	460b      	mov	r3, r1
 8001f98:	80bb      	strh	r3, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	3b20      	subs	r3, #32
 8001fa2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <LCD_DisplayChar+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <LCD_DisplayChar+0x40>)
 8001fae:	6809      	ldr	r1, [r1, #0]
 8001fb0:	88c9      	ldrh	r1, [r1, #6]
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	441a      	add	r2, r3
 8001fba:	88b9      	ldrh	r1, [r7, #4]
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff76 	bl	8001eb0 <LCD_Draw_Char>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200002cc 	.word	0x200002cc

08001fd0 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, const char *str)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	603a      	str	r2, [r7, #0]
 8001fda:	80fb      	strh	r3, [r7, #6]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	80bb      	strh	r3, [r7, #4]
    int i = 0; // starting @ first char of the string
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
    while (str[i] != '\0') //loops through until end of string (when it finds "\0")
 8001fe4:	e011      	b.n	800200a <LCD_DisplayString+0x3a>
    {
        LCD_DisplayChar(Xpos, Ypos, str[i]); //display char
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	88b9      	ldrh	r1, [r7, #4]
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ffca 	bl	8001f8c <LCD_DisplayChar>
        Xpos += LCD_Currentfonts->Width;    //move x over
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <LCD_DisplayString+0x50>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	889a      	ldrh	r2, [r3, #4]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4413      	add	r3, r2
 8002002:	80fb      	strh	r3, [r7, #6]
        i++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3301      	adds	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
    while (str[i] != '\0') //loops through until end of string (when it finds "\0")
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e7      	bne.n	8001fe6 <LCD_DisplayString+0x16>
    }
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200002cc 	.word	0x200002cc

08002024 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <LCD_Error_Handler+0x8>

08002030 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002034:	f000 fe7c 	bl	8002d30 <STMPE811_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b02      	cmp	r3, #2
 800203c:	d001      	beq.n	8002042 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800203e:	bf00      	nop
 8002040:	e7fd      	b.n	800203e <InitializeLCDTouch+0xe>
  }
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}

08002046 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ff58 	bl	8002f04 <STMPE811_DetermineTouchPosition>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 ff28 	bl	8002ebe <STMPE811_Read>
 800206e:	4603      	mov	r3, r0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8002088:	79ba      	ldrb	r2, [r7, #6]
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff26 	bl	8002ee0 <STMPE811_Write>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <getScheduledEvents>:
static uint32_t ScheduledEvents;



uint32_t getScheduledEvents()
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
	return ScheduledEvents;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <getScheduledEvents+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
	// function returns a uint32_t that will be the scheduled events
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20025ad0 	.word	0x20025ad0

080020b4 <addSchedulerEvent>:


void addSchedulerEvent(uint32_t event)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	// function adds a uint32_t that will be the event to be scheduled
	ScheduledEvents |= event;
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <addSchedulerEvent+0x20>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	4a03      	ldr	r2, [pc, #12]	@ (80020d4 <addSchedulerEvent+0x20>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	20025ad0 	.word	0x20025ad0

080020d8 <removeSchedulerEvents>:


void removeSchedulerEvents(uint32_t event)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	ScheduledEvents &= ~event;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	43da      	mvns	r2, r3
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <removeSchedulerEvents+0x24>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4013      	ands	r3, r2
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <removeSchedulerEvents+0x24>)
 80020ec:	6013      	str	r3, [r2, #0]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20025ad0 	.word	0x20025ad0

08002100 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002104:	f000 f9fe 	bl	8002504 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002108:	20ca      	movs	r0, #202	@ 0xca
 800210a:	f000 f943 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800210e:	20c3      	movs	r0, #195	@ 0xc3
 8002110:	f000 f94d 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002114:	2008      	movs	r0, #8
 8002116:	f000 f94a 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800211a:	2050      	movs	r0, #80	@ 0x50
 800211c:	f000 f947 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002120:	20cf      	movs	r0, #207	@ 0xcf
 8002122:	f000 f937 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f941 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800212c:	20c1      	movs	r0, #193	@ 0xc1
 800212e:	f000 f93e 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002132:	2030      	movs	r0, #48	@ 0x30
 8002134:	f000 f93b 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002138:	20ed      	movs	r0, #237	@ 0xed
 800213a:	f000 f92b 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800213e:	2064      	movs	r0, #100	@ 0x64
 8002140:	f000 f935 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 f932 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800214a:	2012      	movs	r0, #18
 800214c:	f000 f92f 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002150:	2081      	movs	r0, #129	@ 0x81
 8002152:	f000 f92c 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002156:	20e8      	movs	r0, #232	@ 0xe8
 8002158:	f000 f91c 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800215c:	2085      	movs	r0, #133	@ 0x85
 800215e:	f000 f926 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f923 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002168:	2078      	movs	r0, #120	@ 0x78
 800216a:	f000 f920 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800216e:	20cb      	movs	r0, #203	@ 0xcb
 8002170:	f000 f910 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002174:	2039      	movs	r0, #57	@ 0x39
 8002176:	f000 f91a 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800217a:	202c      	movs	r0, #44	@ 0x2c
 800217c:	f000 f917 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f000 f914 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002186:	2034      	movs	r0, #52	@ 0x34
 8002188:	f000 f911 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800218c:	2002      	movs	r0, #2
 800218e:	f000 f90e 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002192:	20f7      	movs	r0, #247	@ 0xf7
 8002194:	f000 f8fe 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002198:	2020      	movs	r0, #32
 800219a:	f000 f908 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800219e:	20ea      	movs	r0, #234	@ 0xea
 80021a0:	f000 f8f8 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f000 f902 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f8ff 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80021b0:	20b1      	movs	r0, #177	@ 0xb1
 80021b2:	f000 f8ef 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f000 f8f9 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80021bc:	201b      	movs	r0, #27
 80021be:	f000 f8f6 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80021c2:	20b6      	movs	r0, #182	@ 0xb6
 80021c4:	f000 f8e6 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80021c8:	200a      	movs	r0, #10
 80021ca:	f000 f8f0 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80021ce:	20a2      	movs	r0, #162	@ 0xa2
 80021d0:	f000 f8ed 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80021d4:	20c0      	movs	r0, #192	@ 0xc0
 80021d6:	f000 f8dd 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80021da:	2010      	movs	r0, #16
 80021dc:	f000 f8e7 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80021e0:	20c1      	movs	r0, #193	@ 0xc1
 80021e2:	f000 f8d7 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80021e6:	2010      	movs	r0, #16
 80021e8:	f000 f8e1 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80021ec:	20c5      	movs	r0, #197	@ 0xc5
 80021ee:	f000 f8d1 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80021f2:	2045      	movs	r0, #69	@ 0x45
 80021f4:	f000 f8db 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80021f8:	2015      	movs	r0, #21
 80021fa:	f000 f8d8 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80021fe:	20c7      	movs	r0, #199	@ 0xc7
 8002200:	f000 f8c8 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002204:	2090      	movs	r0, #144	@ 0x90
 8002206:	f000 f8d2 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800220a:	2036      	movs	r0, #54	@ 0x36
 800220c:	f000 f8c2 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002210:	20c8      	movs	r0, #200	@ 0xc8
 8002212:	f000 f8cc 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002216:	20f2      	movs	r0, #242	@ 0xf2
 8002218:	f000 f8bc 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800221c:	2000      	movs	r0, #0
 800221e:	f000 f8c6 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002222:	20b0      	movs	r0, #176	@ 0xb0
 8002224:	f000 f8b6 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002228:	20c2      	movs	r0, #194	@ 0xc2
 800222a:	f000 f8c0 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800222e:	20b6      	movs	r0, #182	@ 0xb6
 8002230:	f000 f8b0 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002234:	200a      	movs	r0, #10
 8002236:	f000 f8ba 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800223a:	20a7      	movs	r0, #167	@ 0xa7
 800223c:	f000 f8b7 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002240:	2027      	movs	r0, #39	@ 0x27
 8002242:	f000 f8b4 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002246:	2004      	movs	r0, #4
 8002248:	f000 f8b1 	bl	80023ae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800224c:	202a      	movs	r0, #42	@ 0x2a
 800224e:	f000 f8a1 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f000 f8ab 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f000 f8a8 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 f8a5 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002264:	20ef      	movs	r0, #239	@ 0xef
 8002266:	f000 f8a2 	bl	80023ae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800226a:	202b      	movs	r0, #43	@ 0x2b
 800226c:	f000 f892 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f000 f89c 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f000 f899 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800227c:	2001      	movs	r0, #1
 800227e:	f000 f896 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002282:	203f      	movs	r0, #63	@ 0x3f
 8002284:	f000 f893 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002288:	20f6      	movs	r0, #246	@ 0xf6
 800228a:	f000 f883 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 f88d 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f000 f88a 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800229a:	2006      	movs	r0, #6
 800229c:	f000 f887 	bl	80023ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80022a0:	202c      	movs	r0, #44	@ 0x2c
 80022a2:	f000 f877 	bl	8002394 <ili9341_Write_Reg>
  LCD_Delay(200);
 80022a6:	20c8      	movs	r0, #200	@ 0xc8
 80022a8:	f000 f9e8 	bl	800267c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80022ac:	2026      	movs	r0, #38	@ 0x26
 80022ae:	f000 f871 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 f87b 	bl	80023ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80022b8:	20e0      	movs	r0, #224	@ 0xe0
 80022ba:	f000 f86b 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 f875 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80022c4:	2029      	movs	r0, #41	@ 0x29
 80022c6:	f000 f872 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80022ca:	2024      	movs	r0, #36	@ 0x24
 80022cc:	f000 f86f 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80022d0:	200c      	movs	r0, #12
 80022d2:	f000 f86c 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80022d6:	200e      	movs	r0, #14
 80022d8:	f000 f869 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80022dc:	2009      	movs	r0, #9
 80022de:	f000 f866 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80022e2:	204e      	movs	r0, #78	@ 0x4e
 80022e4:	f000 f863 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80022e8:	2078      	movs	r0, #120	@ 0x78
 80022ea:	f000 f860 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80022ee:	203c      	movs	r0, #60	@ 0x3c
 80022f0:	f000 f85d 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80022f4:	2009      	movs	r0, #9
 80022f6:	f000 f85a 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80022fa:	2013      	movs	r0, #19
 80022fc:	f000 f857 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002300:	2005      	movs	r0, #5
 8002302:	f000 f854 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002306:	2017      	movs	r0, #23
 8002308:	f000 f851 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800230c:	2011      	movs	r0, #17
 800230e:	f000 f84e 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f000 f84b 	bl	80023ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002318:	20e1      	movs	r0, #225	@ 0xe1
 800231a:	f000 f83b 	bl	8002394 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f845 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002324:	2016      	movs	r0, #22
 8002326:	f000 f842 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800232a:	201b      	movs	r0, #27
 800232c:	f000 f83f 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002330:	2004      	movs	r0, #4
 8002332:	f000 f83c 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002336:	2011      	movs	r0, #17
 8002338:	f000 f839 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800233c:	2007      	movs	r0, #7
 800233e:	f000 f836 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002342:	2031      	movs	r0, #49	@ 0x31
 8002344:	f000 f833 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002348:	2033      	movs	r0, #51	@ 0x33
 800234a:	f000 f830 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800234e:	2042      	movs	r0, #66	@ 0x42
 8002350:	f000 f82d 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002354:	2005      	movs	r0, #5
 8002356:	f000 f82a 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800235a:	200c      	movs	r0, #12
 800235c:	f000 f827 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002360:	200a      	movs	r0, #10
 8002362:	f000 f824 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002366:	2028      	movs	r0, #40	@ 0x28
 8002368:	f000 f821 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800236c:	202f      	movs	r0, #47	@ 0x2f
 800236e:	f000 f81e 	bl	80023ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002372:	200f      	movs	r0, #15
 8002374:	f000 f81b 	bl	80023ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002378:	2011      	movs	r0, #17
 800237a:	f000 f80b 	bl	8002394 <ili9341_Write_Reg>
  LCD_Delay(200);
 800237e:	20c8      	movs	r0, #200	@ 0xc8
 8002380:	f000 f97c 	bl	800267c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002384:	2029      	movs	r0, #41	@ 0x29
 8002386:	f000 f805 	bl	8002394 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800238a:	202c      	movs	r0, #44	@ 0x2c
 800238c:	f000 f802 	bl	8002394 <ili9341_Write_Reg>
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f949 	bl	8002638 <LCD_IO_WriteReg>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f91a 	bl	80025f4 <LCD_IO_WriteData>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80023cc:	4819      	ldr	r0, [pc, #100]	@ (8002434 <SPI_Init+0x6c>)
 80023ce:	f004 f8ec 	bl	80065aa <HAL_SPI_GetState>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12b      	bne.n	8002430 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80023d8:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <SPI_Init+0x6c>)
 80023da:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <SPI_Init+0x70>)
 80023dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <SPI_Init+0x6c>)
 80023e0:	2218      	movs	r2, #24
 80023e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80023e4:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <SPI_Init+0x6c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <SPI_Init+0x6c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <SPI_Init+0x6c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <SPI_Init+0x6c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80023fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <SPI_Init+0x6c>)
 80023fe:	2207      	movs	r2, #7
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002402:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <SPI_Init+0x6c>)
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <SPI_Init+0x6c>)
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <SPI_Init+0x6c>)
 8002410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002414:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002416:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <SPI_Init+0x6c>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800241c:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <SPI_Init+0x6c>)
 800241e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002422:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002424:	4803      	ldr	r0, [pc, #12]	@ (8002434 <SPI_Init+0x6c>)
 8002426:	f000 f833 	bl	8002490 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800242a:	4802      	ldr	r0, [pc, #8]	@ (8002434 <SPI_Init+0x6c>)
 800242c:	f003 fec8 	bl	80061c0 <HAL_SPI_Init>
  }
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20025ad4 	.word	0x20025ad4
 8002438:	40015000 	.word	0x40015000

0800243c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <SPI_Write+0x34>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1db9      	adds	r1, r7, #6
 8002450:	2201      	movs	r2, #1
 8002452:	4808      	ldr	r0, [pc, #32]	@ (8002474 <SPI_Write+0x38>)
 8002454:	f003 ff65 	bl	8006322 <HAL_SPI_Transmit>
 8002458:	4603      	mov	r3, r0
 800245a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002462:	f000 f809 	bl	8002478 <SPI_Error>
  }
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000014 	.word	0x20000014
 8002474:	20025ad4 	.word	0x20025ad4

08002478 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800247c:	4803      	ldr	r0, [pc, #12]	@ (800248c <SPI_Error+0x14>)
 800247e:	f003 ff28 	bl	80062d2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002482:	f7ff ffa1 	bl	80023c8 <SPI_Init>
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20025ad4 	.word	0x20025ad4

08002490 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <SPI_MspInit+0x6c>)
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	4a16      	ldr	r2, [pc, #88]	@ (80024fc <SPI_MspInit+0x6c>)
 80024a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a8:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <SPI_MspInit+0x6c>)
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <SPI_MspInit+0x6c>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <SPI_MspInit+0x6c>)
 80024be:	f043 0320 	orr.w	r3, r3, #32
 80024c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <SPI_MspInit+0x6c>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80024d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80024d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80024da:	2302      	movs	r3, #2
 80024dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80024de:	2301      	movs	r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80024e2:	2305      	movs	r3, #5
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4804      	ldr	r0, [pc, #16]	@ (8002500 <SPI_MspInit+0x70>)
 80024ee:	f001 fa07 	bl	8003900 <HAL_GPIO_Init>
}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	@ 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40021400 	.word	0x40021400

08002504 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800250a:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <LCD_IO_Init+0xe0>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d164      	bne.n	80025dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002512:	4b34      	ldr	r3, [pc, #208]	@ (80025e4 <LCD_IO_Init+0xe0>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	4b32      	ldr	r3, [pc, #200]	@ (80025e8 <LCD_IO_Init+0xe4>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	4a31      	ldr	r2, [pc, #196]	@ (80025e8 <LCD_IO_Init+0xe4>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6313      	str	r3, [r2, #48]	@ 0x30
 8002528:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <LCD_IO_Init+0xe4>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002538:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002542:	2302      	movs	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	4619      	mov	r1, r3
 800254c:	4827      	ldr	r0, [pc, #156]	@ (80025ec <LCD_IO_Init+0xe8>)
 800254e:	f001 f9d7 	bl	8003900 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <LCD_IO_Init+0xe4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a23      	ldr	r2, [pc, #140]	@ (80025e8 <LCD_IO_Init+0xe4>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <LCD_IO_Init+0xe4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800256e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002572:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4619      	mov	r1, r3
 8002586:	4819      	ldr	r0, [pc, #100]	@ (80025ec <LCD_IO_Init+0xe8>)
 8002588:	f001 f9ba 	bl	8003900 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <LCD_IO_Init+0xe4>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <LCD_IO_Init+0xe4>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6313      	str	r3, [r2, #48]	@ 0x30
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <LCD_IO_Init+0xe4>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80025a8:	2304      	movs	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4619      	mov	r1, r3
 80025be:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <LCD_IO_Init+0xec>)
 80025c0:	f001 f99e 	bl	8003900 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80025c4:	2200      	movs	r2, #0
 80025c6:	2104      	movs	r1, #4
 80025c8:	4809      	ldr	r0, [pc, #36]	@ (80025f0 <LCD_IO_Init+0xec>)
 80025ca:	f001 fc51 	bl	8003e70 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80025ce:	2201      	movs	r2, #1
 80025d0:	2104      	movs	r1, #4
 80025d2:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <LCD_IO_Init+0xec>)
 80025d4:	f001 fc4c 	bl	8003e70 <HAL_GPIO_WritePin>

    SPI_Init();
 80025d8:	f7ff fef6 	bl	80023c8 <SPI_Init>
  }
}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20025b2c 	.word	0x20025b2c
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020c00 	.word	0x40020c00
 80025f0:	40020800 	.word	0x40020800

080025f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80025fe:	2201      	movs	r2, #1
 8002600:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002604:	480a      	ldr	r0, [pc, #40]	@ (8002630 <LCD_IO_WriteData+0x3c>)
 8002606:	f001 fc33 	bl	8003e70 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800260a:	2200      	movs	r2, #0
 800260c:	2104      	movs	r1, #4
 800260e:	4809      	ldr	r0, [pc, #36]	@ (8002634 <LCD_IO_WriteData+0x40>)
 8002610:	f001 fc2e 	bl	8003e70 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff10 	bl	800243c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800261c:	2201      	movs	r2, #1
 800261e:	2104      	movs	r1, #4
 8002620:	4804      	ldr	r0, [pc, #16]	@ (8002634 <LCD_IO_WriteData+0x40>)
 8002622:	f001 fc25 	bl	8003e70 <HAL_GPIO_WritePin>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40020800 	.word	0x40020800

08002638 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002648:	480a      	ldr	r0, [pc, #40]	@ (8002674 <LCD_IO_WriteReg+0x3c>)
 800264a:	f001 fc11 	bl	8003e70 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800264e:	2200      	movs	r2, #0
 8002650:	2104      	movs	r1, #4
 8002652:	4809      	ldr	r0, [pc, #36]	@ (8002678 <LCD_IO_WriteReg+0x40>)
 8002654:	f001 fc0c 	bl	8003e70 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff feed 	bl	800243c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002662:	2201      	movs	r2, #1
 8002664:	2104      	movs	r1, #4
 8002666:	4804      	ldr	r0, [pc, #16]	@ (8002678 <LCD_IO_WriteReg+0x40>)
 8002668:	f001 fc02 	bl	8003e70 <HAL_GPIO_WritePin>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40020c00 	.word	0x40020c00
 8002678:	40020800 	.word	0x40020800

0800267c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 ff8f 	bl	80035a8 <HAL_Delay>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8002698:	f004 fa8a 	bl	8006bb0 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269c:	f000 ff12 	bl	80034c4 <HAL_Init>


  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 80026a0:	f000 f870 	bl	8002784 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80026a4:	f7fd ff74 	bl	8000590 <ApplicationInit>

  //LCD_Visual_Demo();
  Button_Init();
 80026a8:	f7fe fd68 	bl	800117c <Button_Init>
  Initialize_Button_Interrupt();
 80026ac:	f7fe fda2 	bl	80011f4 <Initialize_Button_Interrupt>
  RNG_Init();    //initialize RNG
 80026b0:	f7fe fd1c 	bl	80010ec <RNG_Init>
  Display_Start_Screen();
 80026b4:	f7fe fdf0 	bl	8001298 <Display_Start_Screen>
  HAL_Delay(500);
 80026b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026bc:	f000 ff74 	bl	80035a8 <HAL_Delay>

  while(1) //loop to wait until start button is pressed
  {
	  uint32_t eventsToRun = getScheduledEvents();
 80026c0:	f7ff fcec 	bl	800209c <getScheduledEvents>
 80026c4:	60b8      	str	r0, [r7, #8]

	  if(eventsToRun & START_EVENT)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f7      	beq.n	80026c0 <main+0x2e>
	  {
		  Game_Init(); //start the game if pressed
 80026d0:	f7fe fdb4 	bl	800123c <Game_Init>
		  removeSchedulerEvents(START_EVENT);
 80026d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026d8:	f7ff fcfe 	bl	80020d8 <removeSchedulerEvents>
		  break; // exit loop so that we go into main loop
 80026dc:	bf00      	nop
	  }
  }
  uint32_t lastGameTick = HAL_GetTick(); //used to track every 3 secs
 80026de:	f000 ff57 	bl	8003590 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]

  while (1)
  {
	  uint32_t currentTime = HAL_GetTick();
 80026e4:	f000 ff54 	bl	8003590 <HAL_GetTick>
 80026e8:	6078      	str	r0, [r7, #4]


	  if ((currentTime - lastGameTick) >= 1000) //constantly checking for 3 seconds elasped
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026f4:	d304      	bcc.n	8002700 <main+0x6e>
	  {
		  addSchedulerEvent(GAME_TICK_EVENT); //if itsw been 3 seconds, schedule game event
 80026f6:	2001      	movs	r0, #1
 80026f8:	f7ff fcdc 	bl	80020b4 <addSchedulerEvent>
		  lastGameTick = currentTime;    //update tick
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	60fb      	str	r3, [r7, #12]
	  }

	  uint32_t eventsToRun = getScheduledEvents();
 8002700:	f7ff fccc 	bl	800209c <getScheduledEvents>
 8002704:	6038      	str	r0, [r7, #0]

	  if (eventsToRun & GAME_TICK_EVENT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <main+0x88>
	  {
		  Gameplay();
 8002710:	f7fe fe34 	bl	800137c <Gameplay>
		  removeSchedulerEvents(GAME_TICK_EVENT);
 8002714:	2001      	movs	r0, #1
 8002716:	f7ff fcdf 	bl	80020d8 <removeSchedulerEvents>
	  }

	  if (eventsToRun & ROTATE_EVENT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <main+0x9c>
	  {
		  RotateEvent();
 8002724:	f7fe fe76 	bl	8001414 <RotateEvent>
		  removeSchedulerEvents(ROTATE_EVENT);
 8002728:	2010      	movs	r0, #16
 800272a:	f7ff fcd5 	bl	80020d8 <removeSchedulerEvents>
	  }

	  if (eventsToRun & MOVE_LEFT_EVENT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <main+0xb0>
	  {
		  MoveLeftEvent();
 8002738:	f7fe fe80 	bl	800143c <MoveLeftEvent>
		  removeSchedulerEvents(MOVE_LEFT_EVENT);
 800273c:	2040      	movs	r0, #64	@ 0x40
 800273e:	f7ff fccb 	bl	80020d8 <removeSchedulerEvents>
	  }

	  if (eventsToRun & MOVE_RIGHT_EVENT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <main+0xc4>
	  {
		  MoveRightEvent();
 800274c:	f7fe fe8e 	bl	800146c <MoveRightEvent>
		  removeSchedulerEvents(MOVE_RIGHT_EVENT);
 8002750:	2020      	movs	r0, #32
 8002752:	f7ff fcc1 	bl	80020d8 <removeSchedulerEvents>
	  }

	  if (eventsToRun & BUTTON_HOLD_EVENT) // cant get this working. would be cool though
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <main+0xd8>
	  {
	      removeSchedulerEvents(BUTTON_HOLD_EVENT);
 8002760:	2080      	movs	r0, #128	@ 0x80
 8002762:	f7ff fcb9 	bl	80020d8 <removeSchedulerEvents>
	      MoveBlockDownEvent();
 8002766:	f7fe fe99 	bl	800149c <MoveBlockDownEvent>
	  }

	  if (Check_Game_Over()==true)
 800276a:	f7fe febb 	bl	80014e4 <Check_Game_Over>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0b7      	beq.n	80026e4 <main+0x52>
	  {
		  Display_End_Screen();
 8002774:	f7fe fed4 	bl	8001520 <Display_End_Screen>
		  break;
 8002778:	bf00      	nop
 800277a:	2300      	movs	r3, #0
	  }
   }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b092      	sub	sp, #72	@ 0x48
 8002788:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <SystemClockOverride+0x7c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	4a1b      	ldr	r2, [pc, #108]	@ (8002800 <SystemClockOverride+0x7c>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	@ 0x40
 800279a:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <SystemClockOverride+0x7c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027ae:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027ba:	2308      	movs	r3, #8
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027be:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027c8:	2307      	movs	r3, #7
 80027ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fe32 	bl	8005438 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80027d4:	230f      	movs	r3, #15
 80027d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d8:	2302      	movs	r3, #2
 80027da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ea:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80027ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027f0:	2105      	movs	r1, #5
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 f898 	bl	8005928 <HAL_RCC_ClockConfig>
}
 80027f8:	bf00      	nop
 80027fa:	3748      	adds	r7, #72	@ 0x48
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <Error_Handler+0x8>

08002810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_MspInit+0x4c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a0f      	ldr	r2, [pc, #60]	@ (800285c <HAL_MspInit+0x4c>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <HAL_MspInit+0x4c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_MspInit+0x4c>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <HAL_MspInit+0x4c>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	@ 0x40
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_MspInit+0x4c>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800284e:	2007      	movs	r0, #7
 8002850:	f000 ffe0 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800

08002860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a29      	ldr	r2, [pc, #164]	@ (8002924 <HAL_I2C_MspInit+0xc4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d14b      	bne.n	800291a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	4a27      	ldr	r2, [pc, #156]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	6313      	str	r3, [r2, #48]	@ 0x30
 8002892:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a20      	ldr	r2, [pc, #128]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	2312      	movs	r3, #18
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028cc:	2304      	movs	r3, #4
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	4815      	ldr	r0, [pc, #84]	@ (800292c <HAL_I2C_MspInit+0xcc>)
 80028d8:	f001 f812 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80028dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e2:	2312      	movs	r3, #18
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ee:	2304      	movs	r3, #4
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	480d      	ldr	r0, [pc, #52]	@ (8002930 <HAL_I2C_MspInit+0xd0>)
 80028fa:	f001 f801 	bl	8003900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 8002908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800290c:	6413      	str	r3, [r2, #64]	@ 0x40
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_I2C_MspInit+0xc8>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	@ 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40005c00 	.word	0x40005c00
 8002928:	40023800 	.word	0x40023800
 800292c:	40020800 	.word	0x40020800
 8002930:	40020000 	.word	0x40020000

08002934 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b09a      	sub	sp, #104	@ 0x68
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002950:	2230      	movs	r2, #48	@ 0x30
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fa7d 	bl	8006e54 <memset>
  if(hltdc->Instance==LTDC)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a81      	ldr	r2, [pc, #516]	@ (8002b64 <HAL_LTDC_MspInit+0x230>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 80fa 	bne.w	8002b5a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002966:	2308      	movs	r3, #8
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800296a:	2332      	movs	r3, #50	@ 0x32
 800296c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800296e:	2302      	movs	r3, #2
 8002970:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002972:	2300      	movs	r3, #0
 8002974:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f9e0 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002986:	f7ff ff3d 	bl	8002804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a75      	ldr	r2, [pc, #468]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002994:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b73      	ldr	r3, [pc, #460]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029b0:	f043 0320 	orr.w	r3, r3, #32
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	4b68      	ldr	r3, [pc, #416]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a67      	ldr	r2, [pc, #412]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b65      	ldr	r3, [pc, #404]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	4b61      	ldr	r3, [pc, #388]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a60      	ldr	r2, [pc, #384]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a59      	ldr	r2, [pc, #356]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b57      	ldr	r3, [pc, #348]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a52      	ldr	r2, [pc, #328]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b50      	ldr	r3, [pc, #320]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b4c      	ldr	r3, [pc, #304]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a4b      	ldr	r2, [pc, #300]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b49      	ldr	r3, [pc, #292]	@ (8002b68 <HAL_LTDC_MspInit+0x234>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a52:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a60:	230e      	movs	r3, #14
 8002a62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4840      	ldr	r0, [pc, #256]	@ (8002b6c <HAL_LTDC_MspInit+0x238>)
 8002a6c:	f000 ff48 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002a70:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002a74:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a82:	230e      	movs	r3, #14
 8002a84:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4838      	ldr	r0, [pc, #224]	@ (8002b70 <HAL_LTDC_MspInit+0x23c>)
 8002a8e:	f000 ff37 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002a92:	2303      	movs	r3, #3
 8002a94:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002aa2:	2309      	movs	r3, #9
 8002aa4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4831      	ldr	r0, [pc, #196]	@ (8002b74 <HAL_LTDC_MspInit+0x240>)
 8002aae:	f000 ff27 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ab2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ac4:	230e      	movs	r3, #14
 8002ac6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002acc:	4619      	mov	r1, r3
 8002ace:	4829      	ldr	r0, [pc, #164]	@ (8002b74 <HAL_LTDC_MspInit+0x240>)
 8002ad0:	f000 ff16 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ad4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002ad8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ae6:	230e      	movs	r3, #14
 8002ae8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002aee:	4619      	mov	r1, r3
 8002af0:	4821      	ldr	r0, [pc, #132]	@ (8002b78 <HAL_LTDC_MspInit+0x244>)
 8002af2:	f000 ff05 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002af6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002afa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b08:	230e      	movs	r3, #14
 8002b0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b10:	4619      	mov	r1, r3
 8002b12:	481a      	ldr	r0, [pc, #104]	@ (8002b7c <HAL_LTDC_MspInit+0x248>)
 8002b14:	f000 fef4 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002b18:	2348      	movs	r3, #72	@ 0x48
 8002b1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b28:	230e      	movs	r3, #14
 8002b2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b30:	4619      	mov	r1, r3
 8002b32:	4813      	ldr	r0, [pc, #76]	@ (8002b80 <HAL_LTDC_MspInit+0x24c>)
 8002b34:	f000 fee4 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002b38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b4a:	2309      	movs	r3, #9
 8002b4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b52:	4619      	mov	r1, r3
 8002b54:	4808      	ldr	r0, [pc, #32]	@ (8002b78 <HAL_LTDC_MspInit+0x244>)
 8002b56:	f000 fed3 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3768      	adds	r7, #104	@ 0x68
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40016800 	.word	0x40016800
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00

08002b84 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_RNG_MspInit+0x3c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10d      	bne.n	8002bb2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_RNG_MspInit+0x40>)
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <HAL_RNG_MspInit+0x40>)
 8002ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba4:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <HAL_RNG_MspInit+0x40>)
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	50060800 	.word	0x50060800
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_SPI_MspInit+0x84>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d12c      	bne.n	8002c44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_SPI_MspInit+0x88>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <HAL_SPI_MspInit+0x88>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_SPI_MspInit+0x88>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_SPI_MspInit+0x88>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a10      	ldr	r2, [pc, #64]	@ (8002c50 <HAL_SPI_MspInit+0x88>)
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_SPI_MspInit+0x88>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002c22:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c34:	2305      	movs	r3, #5
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <HAL_SPI_MspInit+0x8c>)
 8002c40:	f000 fe5e 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002c44:	bf00      	nop
 8002c46:	3728      	adds	r7, #40	@ 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40015000 	.word	0x40015000
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40021400 	.word	0x40021400

08002c58 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <HAL_SPI_MspDeInit+0x30>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10a      	bne.n	8002c80 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c6a:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_SPI_MspDeInit+0x34>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_SPI_MspDeInit+0x34>)
 8002c70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c74:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002c76:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002c7a:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <HAL_SPI_MspDeInit+0x38>)
 8002c7c:	f000 ffec 	bl	8003c58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40015000 	.word	0x40015000
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40021400 	.word	0x40021400

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <NMI_Handler+0x4>

08002c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <MemManage_Handler+0x4>

08002cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <BusFault_Handler+0x4>

08002cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <UsageFault_Handler+0x4>

08002cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cea:	f000 fc3d 	bl	8003568 <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	@ (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002d36:	f000 f9dd 	bl	80030f4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002d3a:	f000 f99d 	bl	8003078 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d3e:	2202      	movs	r2, #2
 8002d40:	2103      	movs	r1, #3
 8002d42:	2082      	movs	r0, #130	@ 0x82
 8002d44:	f000 fa2a 	bl	800319c <I2C3_Write>
    HAL_Delay(5);
 8002d48:	2005      	movs	r0, #5
 8002d4a:	f000 fc2d 	bl	80035a8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2103      	movs	r1, #3
 8002d52:	2082      	movs	r0, #130	@ 0x82
 8002d54:	f000 fa22 	bl	800319c <I2C3_Write>
    HAL_Delay(2);
 8002d58:	2002      	movs	r0, #2
 8002d5a:	f000 fc25 	bl	80035a8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002d5e:	1cba      	adds	r2, r7, #2
 8002d60:	2302      	movs	r3, #2
 8002d62:	2100      	movs	r1, #0
 8002d64:	2082      	movs	r0, #130	@ 0x82
 8002d66:	f000 fa69 	bl	800323c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f640 0211 	movw	r2, #2065	@ 0x811
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d001      	beq.n	8002d8a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e095      	b.n	8002eb6 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	2082      	movs	r0, #130	@ 0x82
 8002d90:	f000 fa04 	bl	800319c <I2C3_Write>
    HAL_Delay(5);
 8002d94:	2005      	movs	r0, #5
 8002d96:	f000 fc07 	bl	80035a8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2103      	movs	r1, #3
 8002d9e:	2082      	movs	r0, #130	@ 0x82
 8002da0:	f000 f9fc 	bl	800319c <I2C3_Write>
    HAL_Delay(2);
 8002da4:	2002      	movs	r0, #2
 8002da6:	f000 fbff 	bl	80035a8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002daa:	2004      	movs	r0, #4
 8002dac:	f000 f887 	bl	8002ebe <STMPE811_Read>
 8002db0:	4603      	mov	r3, r0
 8002db2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002db4:	797b      	ldrb	r3, [r7, #5]
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002dbc:	797b      	ldrb	r3, [r7, #5]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	2082      	movs	r0, #130	@ 0x82
 8002dc4:	f000 f9ea 	bl	800319c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002dc8:	2004      	movs	r0, #4
 8002dca:	f000 f878 	bl	8002ebe <STMPE811_Read>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002dd2:	797b      	ldrb	r3, [r7, #5]
 8002dd4:	f023 0302 	bic.w	r3, r3, #2
 8002dd8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002dda:	797b      	ldrb	r3, [r7, #5]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2104      	movs	r1, #4
 8002de0:	2082      	movs	r0, #130	@ 0x82
 8002de2:	f000 f9db 	bl	800319c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002de6:	2249      	movs	r2, #73	@ 0x49
 8002de8:	2120      	movs	r1, #32
 8002dea:	2082      	movs	r0, #130	@ 0x82
 8002dec:	f000 f9d6 	bl	800319c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002df0:	2002      	movs	r0, #2
 8002df2:	f000 fbd9 	bl	80035a8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002df6:	2201      	movs	r2, #1
 8002df8:	2121      	movs	r1, #33	@ 0x21
 8002dfa:	2082      	movs	r0, #130	@ 0x82
 8002dfc:	f000 f9ce 	bl	800319c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002e00:	2017      	movs	r0, #23
 8002e02:	f000 f85c 	bl	8002ebe <STMPE811_Read>
 8002e06:	4603      	mov	r3, r0
 8002e08:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002e0a:	797b      	ldrb	r3, [r7, #5]
 8002e0c:	f043 031e 	orr.w	r3, r3, #30
 8002e10:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002e12:	797b      	ldrb	r3, [r7, #5]
 8002e14:	461a      	mov	r2, r3
 8002e16:	2117      	movs	r1, #23
 8002e18:	2082      	movs	r0, #130	@ 0x82
 8002e1a:	f000 f9bf 	bl	800319c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002e1e:	229a      	movs	r2, #154	@ 0x9a
 8002e20:	2141      	movs	r1, #65	@ 0x41
 8002e22:	2082      	movs	r0, #130	@ 0x82
 8002e24:	f000 f9ba 	bl	800319c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	214a      	movs	r1, #74	@ 0x4a
 8002e2c:	2082      	movs	r0, #130	@ 0x82
 8002e2e:	f000 f9b5 	bl	800319c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002e32:	2201      	movs	r2, #1
 8002e34:	214b      	movs	r1, #75	@ 0x4b
 8002e36:	2082      	movs	r0, #130	@ 0x82
 8002e38:	f000 f9b0 	bl	800319c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	214b      	movs	r1, #75	@ 0x4b
 8002e40:	2082      	movs	r0, #130	@ 0x82
 8002e42:	f000 f9ab 	bl	800319c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002e46:	2201      	movs	r2, #1
 8002e48:	2156      	movs	r1, #86	@ 0x56
 8002e4a:	2082      	movs	r0, #130	@ 0x82
 8002e4c:	f000 f9a6 	bl	800319c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002e50:	2201      	movs	r2, #1
 8002e52:	2158      	movs	r1, #88	@ 0x58
 8002e54:	2082      	movs	r0, #130	@ 0x82
 8002e56:	f000 f9a1 	bl	800319c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	2140      	movs	r1, #64	@ 0x40
 8002e5e:	2082      	movs	r0, #130	@ 0x82
 8002e60:	f000 f99c 	bl	800319c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002e64:	22ff      	movs	r2, #255	@ 0xff
 8002e66:	210b      	movs	r1, #11
 8002e68:	2082      	movs	r0, #130	@ 0x82
 8002e6a:	f000 f997 	bl	800319c <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002e6e:	f000 f8c1 	bl	8002ff4 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002e72:	2009      	movs	r0, #9
 8002e74:	f000 f823 	bl	8002ebe <STMPE811_Read>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002e7c:	797b      	ldrb	r3, [r7, #5]
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002e84:	797b      	ldrb	r3, [r7, #5]
 8002e86:	461a      	mov	r2, r3
 8002e88:	2109      	movs	r1, #9
 8002e8a:	2082      	movs	r0, #130	@ 0x82
 8002e8c:	f000 f986 	bl	800319c <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002e90:	200a      	movs	r0, #10
 8002e92:	f000 f814 	bl	8002ebe <STMPE811_Read>
 8002e96:	4603      	mov	r3, r0
 8002e98:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002e9a:	797b      	ldrb	r3, [r7, #5]
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002ea2:	797b      	ldrb	r3, [r7, #5]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	210a      	movs	r1, #10
 8002ea8:	2082      	movs	r0, #130	@ 0x82
 8002eaa:	f000 f977 	bl	800319c <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002eae:	20c8      	movs	r0, #200	@ 0xc8
 8002eb0:	f000 fb7a 	bl	80035a8 <HAL_Delay>

    return STMPE811_State_Ok;
 8002eb4:	2302      	movs	r3, #2

}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002ec8:	f107 020f 	add.w	r2, r7, #15
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	2082      	movs	r0, #130	@ 0x82
 8002ed2:	f000 f98d 	bl	80031f0 <I2C3_Read>

    return readData;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002ef0:	79ba      	ldrb	r2, [r7, #6]
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	2082      	movs	r0, #130	@ 0x82
 8002ef8:	f000 f950 	bl	800319c <I2C3_Write>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	799b      	ldrb	r3, [r3, #6]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d117      	bne.n	8002f44 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f9b1 	bl	8003280 <TM_STMPE811_ReadX>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	885b      	ldrh	r3, [r3, #2]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa04 	bl	800333c <TM_STMPE811_ReadY>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	805a      	strh	r2, [r3, #2]
 8002f42:	e048      	b.n	8002fd6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	799b      	ldrb	r3, [r3, #6]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d112      	bne.n	8002f72 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 f995 	bl	8003280 <TM_STMPE811_ReadX>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	885b      	ldrh	r3, [r3, #2]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f9ea 	bl	800333c <TM_STMPE811_ReadY>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	805a      	strh	r2, [r3, #2]
 8002f70:	e031      	b.n	8002fd6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	799b      	ldrb	r3, [r3, #6]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d115      	bne.n	8002fa6 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	885b      	ldrh	r3, [r3, #2]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f97e 	bl	8003280 <TM_STMPE811_ReadX>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f9d3 	bl	800333c <TM_STMPE811_ReadY>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	801a      	strh	r2, [r3, #0]
 8002fa4:	e017      	b.n	8002fd6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	799b      	ldrb	r3, [r3, #6]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d113      	bne.n	8002fd6 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f964 	bl	8003280 <TM_STMPE811_ReadX>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f9b7 	bl	800333c <TM_STMPE811_ReadY>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	214b      	movs	r1, #75	@ 0x4b
 8002fda:	2082      	movs	r0, #130	@ 0x82
 8002fdc:	f000 f8de 	bl	800319c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	214b      	movs	r1, #75	@ 0x4b
 8002fe4:	2082      	movs	r0, #130	@ 0x82
 8002fe6:	f000 f8d9 	bl	800319c <I2C3_Write>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <enableInterruptSupportForTouch+0x5c>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <enableInterruptSupportForTouch+0x5c>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <enableInterruptSupportForTouch+0x5c>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003028:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800302a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800302e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003034:	2302      	movs	r3, #2
 8003036:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	4619      	mov	r1, r3
 800303c:	4805      	ldr	r0, [pc, #20]	@ (8003054 <enableInterruptSupportForTouch+0x60>)
 800303e:	f000 fc5f 	bl	8003900 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003042:	2028      	movs	r0, #40	@ 0x28
 8003044:	f7ff fe56 	bl	8002cf4 <__NVIC_EnableIRQ>

}
 8003048:	bf00      	nop
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	40020000 	.word	0x40020000

08003058 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20025b84 	.word	0x20025b84

08003078 <I2C3_Init>:

static void I2C3_Init()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <I2C3_Init+0x6c>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <I2C3_Init+0x6c>)
 8003088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800308c:	6413      	str	r3, [r2, #64]	@ 0x40
 800308e:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <I2C3_Init+0x6c>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800309a:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <I2C3_Init+0x70>)
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <I2C3_Init+0x74>)
 800309e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <I2C3_Init+0x70>)
 80030a2:	4a13      	ldr	r2, [pc, #76]	@ (80030f0 <I2C3_Init+0x78>)
 80030a4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <I2C3_Init+0x70>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80030ac:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <I2C3_Init+0x70>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <I2C3_Init+0x70>)
 80030b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030b8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <I2C3_Init+0x70>)
 80030bc:	2200      	movs	r2, #0
 80030be:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <I2C3_Init+0x70>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80030c6:	4808      	ldr	r0, [pc, #32]	@ (80030e8 <I2C3_Init+0x70>)
 80030c8:	f000 feec 	bl	8003ea4 <HAL_I2C_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80030d6:	bf00      	nop
 80030d8:	e7fd      	b.n	80030d6 <I2C3_Init+0x5e>
    }
    return;
 80030da:	bf00      	nop
}
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	20025b30 	.word	0x20025b30
 80030ec:	40005c00 	.word	0x40005c00
 80030f0:	000186a0 	.word	0x000186a0

080030f4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <I2C3_MspInit+0x9c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <I2C3_MspInit+0x9c>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <I2C3_MspInit+0x9c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <I2C3_MspInit+0x9c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4a18      	ldr	r2, [pc, #96]	@ (8003190 <I2C3_MspInit+0x9c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <I2C3_MspInit+0x9c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003146:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003148:	2312      	movs	r3, #18
 800314a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003154:	2304      	movs	r3, #4
 8003156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	4619      	mov	r1, r3
 800315e:	480d      	ldr	r0, [pc, #52]	@ (8003194 <I2C3_MspInit+0xa0>)
 8003160:	f000 fbce 	bl	8003900 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800316a:	2312      	movs	r3, #18
 800316c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003176:	2304      	movs	r3, #4
 8003178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	4619      	mov	r1, r3
 8003180:	4805      	ldr	r0, [pc, #20]	@ (8003198 <I2C3_MspInit+0xa4>)
 8003182:	f000 fbbd 	bl	8003900 <HAL_GPIO_Init>
    
}
 8003186:	bf00      	nop
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40020800 	.word	0x40020800
 8003198:	40020000 	.word	0x40020000

0800319c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af04      	add	r7, sp, #16
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
 80031a6:	460b      	mov	r3, r1
 80031a8:	717b      	strb	r3, [r7, #5]
 80031aa:	4613      	mov	r3, r2
 80031ac:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80031ae:	793b      	ldrb	r3, [r7, #4]
 80031b0:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80031b2:	797b      	ldrb	r3, [r7, #5]
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	88f9      	ldrh	r1, [r7, #6]
 80031b8:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <I2C3_Write+0x48>)
 80031ba:	9302      	str	r3, [sp, #8]
 80031bc:	2301      	movs	r3, #1
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	f107 030f 	add.w	r3, r7, #15
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	4807      	ldr	r0, [pc, #28]	@ (80031e8 <I2C3_Write+0x4c>)
 80031ca:	f000 ffaf 	bl	800412c <HAL_I2C_Mem_Write>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <I2C3_Write+0x50>)
 80031d4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80031d6:	f7ff ff3f 	bl	8003058 <verifyHAL_I2C_IS_OKAY>
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	0003d090 	.word	0x0003d090
 80031e8:	20025b30 	.word	0x20025b30
 80031ec:	20025b84 	.word	0x20025b84

080031f0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	4603      	mov	r3, r0
 80031f8:	603a      	str	r2, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	460b      	mov	r3, r1
 80031fe:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	b299      	uxth	r1, r3
 8003204:	79bb      	ldrb	r3, [r7, #6]
 8003206:	b29a      	uxth	r2, r3
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <I2C3_Read+0x40>)
 800320a:	9302      	str	r3, [sp, #8]
 800320c:	2301      	movs	r3, #1
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2301      	movs	r3, #1
 8003216:	4807      	ldr	r0, [pc, #28]	@ (8003234 <I2C3_Read+0x44>)
 8003218:	f001 f882 	bl	8004320 <HAL_I2C_Mem_Read>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <I2C3_Read+0x48>)
 8003222:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003224:	f7ff ff18 	bl	8003058 <verifyHAL_I2C_IS_OKAY>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	0003d090 	.word	0x0003d090
 8003234:	20025b30 	.word	0x20025b30
 8003238:	20025b84 	.word	0x20025b84

0800323c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af04      	add	r7, sp, #16
 8003242:	603a      	str	r2, [r7, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
 800324a:	460b      	mov	r3, r1
 800324c:	71bb      	strb	r3, [r7, #6]
 800324e:	4613      	mov	r3, r2
 8003250:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	b299      	uxth	r1, r3
 8003256:	79bb      	ldrb	r3, [r7, #6]
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <I2C3_MulitByteRead+0x3c>)
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	88bb      	ldrh	r3, [r7, #4]
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2301      	movs	r3, #1
 8003268:	4804      	ldr	r0, [pc, #16]	@ (800327c <I2C3_MulitByteRead+0x40>)
 800326a:	f001 f859 	bl	8004320 <HAL_I2C_Mem_Read>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	0003d090 	.word	0x0003d090
 800327c:	20025b30 	.word	0x20025b30

08003280 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800328a:	204d      	movs	r0, #77	@ 0x4d
 800328c:	f7ff fe17 	bl	8002ebe <STMPE811_Read>
 8003290:	4603      	mov	r3, r0
 8003292:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003294:	204e      	movs	r0, #78	@ 0x4e
 8003296:	f7ff fe12 	bl	8002ebe <STMPE811_Read>
 800329a:	4603      	mov	r3, r0
 800329c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800329e:	7a7b      	ldrb	r3, [r7, #9]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	7a3b      	ldrb	r3, [r7, #8]
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80032ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80032b4:	4293      	cmp	r3, r2
 80032b6:	dc06      	bgt.n	80032c6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80032be:	330c      	adds	r3, #12
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	81fb      	strh	r3, [r7, #14]
 80032c4:	e005      	b.n	80032d2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80032c6:	89fb      	ldrh	r3, [r7, #14]
 80032c8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80032cc:	3308      	adds	r3, #8
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80032d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032d6:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <TM_STMPE811_ReadX+0xb8>)
 80032d8:	fb82 1203 	smull	r1, r2, r2, r3
 80032dc:	441a      	add	r2, r3
 80032de:	10d2      	asrs	r2, r2, #3
 80032e0:	17db      	asrs	r3, r3, #31
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80032e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ea:	2bef      	cmp	r3, #239	@ 0xef
 80032ec:	dd02      	ble.n	80032f4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80032ee:	23ef      	movs	r3, #239	@ 0xef
 80032f0:	81fb      	strh	r3, [r7, #14]
 80032f2:	e005      	b.n	8003300 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80032f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da01      	bge.n	8003300 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003300:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	429a      	cmp	r2, r3
 8003308:	dd05      	ble.n	8003316 <TM_STMPE811_ReadX+0x96>
 800330a:	89fa      	ldrh	r2, [r7, #14]
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	b29b      	uxth	r3, r3
 8003312:	b21b      	sxth	r3, r3
 8003314:	e004      	b.n	8003320 <TM_STMPE811_ReadX+0xa0>
 8003316:	89fb      	ldrh	r3, [r7, #14]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	b29b      	uxth	r3, r3
 800331e:	b21b      	sxth	r3, r3
 8003320:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003322:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003326:	2b04      	cmp	r3, #4
 8003328:	dd01      	ble.n	800332e <TM_STMPE811_ReadX+0xae>
        return val;
 800332a:	89fb      	ldrh	r3, [r7, #14]
 800332c:	e000      	b.n	8003330 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800332e:	88fb      	ldrh	r3, [r7, #6]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	88888889 	.word	0x88888889

0800333c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003346:	204f      	movs	r0, #79	@ 0x4f
 8003348:	f7ff fdb9 	bl	8002ebe <STMPE811_Read>
 800334c:	4603      	mov	r3, r0
 800334e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003350:	2050      	movs	r0, #80	@ 0x50
 8003352:	f7ff fdb4 	bl	8002ebe <STMPE811_Read>
 8003356:	4603      	mov	r3, r0
 8003358:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800335a:	7a7b      	ldrb	r3, [r7, #9]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	b21a      	sxth	r2, r3
 8003360:	7a3b      	ldrb	r3, [r7, #8]
 8003362:	b21b      	sxth	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003368:	89fb      	ldrh	r3, [r7, #14]
 800336a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800336e:	b29b      	uxth	r3, r3
 8003370:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003376:	4a19      	ldr	r2, [pc, #100]	@ (80033dc <TM_STMPE811_ReadY+0xa0>)
 8003378:	fb82 1203 	smull	r1, r2, r2, r3
 800337c:	1052      	asrs	r2, r2, #1
 800337e:	17db      	asrs	r3, r3, #31
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003388:	2b00      	cmp	r3, #0
 800338a:	dc02      	bgt.n	8003392 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	81fb      	strh	r3, [r7, #14]
 8003390:	e007      	b.n	80033a2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003396:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800339a:	db02      	blt.n	80033a2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800339c:	f240 133f 	movw	r3, #319	@ 0x13f
 80033a0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80033a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	dd05      	ble.n	80033b8 <TM_STMPE811_ReadY+0x7c>
 80033ac:	89fa      	ldrh	r2, [r7, #14]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	b21b      	sxth	r3, r3
 80033b6:	e004      	b.n	80033c2 <TM_STMPE811_ReadY+0x86>
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b29b      	uxth	r3, r3
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80033c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	dd01      	ble.n	80033d0 <TM_STMPE811_ReadY+0x94>
        return val;
 80033cc:	89fb      	ldrh	r3, [r7, #14]
 80033ce:	e000      	b.n	80033d2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80033d0:	88fb      	ldrh	r3, [r7, #6]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2e8ba2e9 	.word	0x2e8ba2e9

080033e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e8:	4a14      	ldr	r2, [pc, #80]	@ (800343c <_sbrk+0x5c>)
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <_sbrk+0x60>)
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <_sbrk+0x64>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <_sbrk+0x68>)
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d207      	bcs.n	8003420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003410:	f003 fd28 	bl	8006e64 <__errno>
 8003414:	4603      	mov	r3, r0
 8003416:	220c      	movs	r2, #12
 8003418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800341e:	e009      	b.n	8003434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <_sbrk+0x64>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	4a05      	ldr	r2, [pc, #20]	@ (8003444 <_sbrk+0x64>)
 8003430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20030000 	.word	0x20030000
 8003440:	00000400 	.word	0x00000400
 8003444:	20025b88 	.word	0x20025b88
 8003448:	20025d88 	.word	0x20025d88

0800344c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <SystemInit+0x20>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	4a05      	ldr	r2, [pc, #20]	@ (800346c <SystemInit+0x20>)
 8003458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800345c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003474:	f7ff ffea 	bl	800344c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003478:	480c      	ldr	r0, [pc, #48]	@ (80034ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800347a:	490d      	ldr	r1, [pc, #52]	@ (80034b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800347c:	4a0d      	ldr	r2, [pc, #52]	@ (80034b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800347e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003480:	e002      	b.n	8003488 <LoopCopyDataInit>

08003482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003486:	3304      	adds	r3, #4

08003488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800348c:	d3f9      	bcc.n	8003482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003490:	4c0a      	ldr	r4, [pc, #40]	@ (80034bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003494:	e001      	b.n	800349a <LoopFillZerobss>

08003496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003498:	3204      	adds	r2, #4

0800349a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800349c:	d3fb      	bcc.n	8003496 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800349e:	f003 fce7 	bl	8006e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034a2:	f7ff f8f6 	bl	8002692 <main>
  bx  lr    
 80034a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80034a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80034ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80034b4:	08009764 	.word	0x08009764
  ldr r2, =_sbss
 80034b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80034bc:	20025d88 	.word	0x20025d88

080034c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c0:	e7fe      	b.n	80034c0 <ADC_IRQHandler>
	...

080034c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <HAL_Init+0x40>)
 80034ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_Init+0x40>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <HAL_Init+0x40>)
 80034da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e0:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <HAL_Init+0x40>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <HAL_Init+0x40>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ec:	2003      	movs	r0, #3
 80034ee:	f000 f991 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034f2:	2000      	movs	r0, #0
 80034f4:	f000 f808 	bl	8003508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f8:	f7ff f98a 	bl	8002810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00

08003508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003510:	4b12      	ldr	r3, [pc, #72]	@ (800355c <HAL_InitTick+0x54>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_InitTick+0x58>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800351e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f9b7 	bl	800389a <HAL_SYSTICK_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e00e      	b.n	8003554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b0f      	cmp	r3, #15
 800353a:	d80a      	bhi.n	8003552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800353c:	2200      	movs	r2, #0
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003544:	f000 f971 	bl	800382a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003548:	4a06      	ldr	r2, [pc, #24]	@ (8003564 <HAL_InitTick+0x5c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000018 	.word	0x20000018
 8003560:	20000020 	.word	0x20000020
 8003564:	2000001c 	.word	0x2000001c

08003568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800356c:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_IncTick+0x20>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_IncTick+0x24>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4413      	add	r3, r2
 8003578:	4a04      	ldr	r2, [pc, #16]	@ (800358c <HAL_IncTick+0x24>)
 800357a:	6013      	str	r3, [r2, #0]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000020 	.word	0x20000020
 800358c:	20025b8c 	.word	0x20025b8c

08003590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return uwTick;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <HAL_GetTick+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20025b8c 	.word	0x20025b8c

080035a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7ff ffee 	bl	8003590 <HAL_GetTick>
 80035b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c0:	d005      	beq.n	80035ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c2:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <HAL_Delay+0x44>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035ce:	bf00      	nop
 80035d0:	f7ff ffde 	bl	8003590 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d8f7      	bhi.n	80035d0 <HAL_Delay+0x28>
  {
  }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000020 	.word	0x20000020

080035f0 <__NVIC_SetPriorityGrouping>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800360c:	4013      	ands	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800361c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003622:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	60d3      	str	r3, [r2, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_GetPriorityGrouping>:
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__NVIC_GetPriorityGrouping+0x18>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 0307 	and.w	r3, r3, #7
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_EnableIRQ>:
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db0b      	blt.n	800367e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4907      	ldr	r1, [pc, #28]	@ (800368c <__NVIC_EnableIRQ+0x38>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2001      	movs	r0, #1
 8003676:	fa00 f202 	lsl.w	r2, r0, r2
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	db12      	blt.n	80036c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	490a      	ldr	r1, [pc, #40]	@ (80036d4 <__NVIC_DisableIRQ+0x44>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2001      	movs	r0, #1
 80036b2:	fa00 f202 	lsl.w	r2, r0, r2
 80036b6:	3320      	adds	r3, #32
 80036b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036bc:	f3bf 8f4f 	dsb	sy
}
 80036c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036c2:	f3bf 8f6f 	isb	sy
}
 80036c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0c      	blt.n	8003704 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4907      	ldr	r1, [pc, #28]	@ (8003710 <__NVIC_ClearPendingIRQ+0x38>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	3360      	adds	r3, #96	@ 0x60
 8003700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000e100 	.word	0xe000e100

08003714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	@ (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	@ 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf28      	it	cs
 8003786:	2304      	movcs	r3, #4
 8003788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3304      	adds	r3, #4
 800378e:	2b06      	cmp	r3, #6
 8003790:	d902      	bls.n	8003798 <NVIC_EncodePriority+0x30>
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b03      	subs	r3, #3
 8003796:	e000      	b.n	800379a <NVIC_EncodePriority+0x32>
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43d9      	mvns	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	4313      	orrs	r3, r2
         );
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	@ 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037f4:	f7ff ff8e 	bl	8003714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fee7 	bl	80035f0 <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff fefc 	bl	8003638 <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff8e 	bl	8003768 <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff feef 	bl	8003654 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff feff 	bl	8003690 <__NVIC_DisableIRQ>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff94 	bl	80037d0 <SysTick_Config>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff09 	bl	80036d8 <__NVIC_ClearPendingIRQ>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2201      	movs	r2, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80038ea:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <HAL_EXTI_ClearPending+0x2c>)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6153      	str	r3, [r2, #20]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40013c00 	.word	0x40013c00

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	@ 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e177      	b.n	8003c0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800391c:	2201      	movs	r2, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	429a      	cmp	r2, r3
 8003936:	f040 8166 	bne.w	8003c06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d005      	beq.n	8003952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394e:	2b02      	cmp	r3, #2
 8003950:	d130      	bne.n	80039b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0201 	and.w	r2, r3, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d017      	beq.n	80039f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d123      	bne.n	8003a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	08da      	lsrs	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3208      	adds	r2, #8
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	220f      	movs	r2, #15
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	08da      	lsrs	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0203 	and.w	r2, r3, #3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80c0 	beq.w	8003c06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b66      	ldr	r3, [pc, #408]	@ (8003c24 <HAL_GPIO_Init+0x324>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_GPIO_Init+0x324>)
 8003a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a96:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_GPIO_Init+0x324>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa2:	4a61      	ldr	r2, [pc, #388]	@ (8003c28 <HAL_GPIO_Init+0x328>)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	@ (8003c2c <HAL_GPIO_Init+0x32c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d037      	beq.n	8003b3e <HAL_GPIO_Init+0x23e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	@ (8003c30 <HAL_GPIO_Init+0x330>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d031      	beq.n	8003b3a <HAL_GPIO_Init+0x23a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a56      	ldr	r2, [pc, #344]	@ (8003c34 <HAL_GPIO_Init+0x334>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02b      	beq.n	8003b36 <HAL_GPIO_Init+0x236>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a55      	ldr	r2, [pc, #340]	@ (8003c38 <HAL_GPIO_Init+0x338>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d025      	beq.n	8003b32 <HAL_GPIO_Init+0x232>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a54      	ldr	r2, [pc, #336]	@ (8003c3c <HAL_GPIO_Init+0x33c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01f      	beq.n	8003b2e <HAL_GPIO_Init+0x22e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a53      	ldr	r2, [pc, #332]	@ (8003c40 <HAL_GPIO_Init+0x340>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d019      	beq.n	8003b2a <HAL_GPIO_Init+0x22a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a52      	ldr	r2, [pc, #328]	@ (8003c44 <HAL_GPIO_Init+0x344>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_GPIO_Init+0x226>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a51      	ldr	r2, [pc, #324]	@ (8003c48 <HAL_GPIO_Init+0x348>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00d      	beq.n	8003b22 <HAL_GPIO_Init+0x222>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a50      	ldr	r2, [pc, #320]	@ (8003c4c <HAL_GPIO_Init+0x34c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <HAL_GPIO_Init+0x21e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4f      	ldr	r2, [pc, #316]	@ (8003c50 <HAL_GPIO_Init+0x350>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <HAL_GPIO_Init+0x21a>
 8003b16:	2309      	movs	r3, #9
 8003b18:	e012      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b1a:	230a      	movs	r3, #10
 8003b1c:	e010      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	e00e      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b22:	2307      	movs	r3, #7
 8003b24:	e00c      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b26:	2306      	movs	r3, #6
 8003b28:	e00a      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b2a:	2305      	movs	r3, #5
 8003b2c:	e008      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	e006      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b32:	2303      	movs	r3, #3
 8003b34:	e004      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e002      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_GPIO_Init+0x240>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	f002 0203 	and.w	r2, r2, #3
 8003b46:	0092      	lsls	r2, r2, #2
 8003b48:	4093      	lsls	r3, r2
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b50:	4935      	ldr	r1, [pc, #212]	@ (8003c28 <HAL_GPIO_Init+0x328>)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	3302      	adds	r3, #2
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b82:	4a34      	ldr	r2, [pc, #208]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b88:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bac:	4a29      	ldr	r2, [pc, #164]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bb2:	4b28      	ldr	r3, [pc, #160]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c00:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <HAL_GPIO_Init+0x354>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	f67f ae84 	bls.w	800391c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3724      	adds	r7, #36	@ 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020c00 	.word	0x40020c00
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40021400 	.word	0x40021400
 8003c44:	40021800 	.word	0x40021800
 8003c48:	40021c00 	.word	0x40021c00
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40022400 	.word	0x40022400
 8003c54:	40013c00 	.word	0x40013c00

08003c58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e0d9      	b.n	8003e28 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c74:	2201      	movs	r2, #1
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f040 80c9 	bne.w	8003e22 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c90:	4a6b      	ldr	r2, [pc, #428]	@ (8003e40 <HAL_GPIO_DeInit+0x1e8>)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	220f      	movs	r2, #15
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a63      	ldr	r2, [pc, #396]	@ (8003e44 <HAL_GPIO_DeInit+0x1ec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d037      	beq.n	8003d2a <HAL_GPIO_DeInit+0xd2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a62      	ldr	r2, [pc, #392]	@ (8003e48 <HAL_GPIO_DeInit+0x1f0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_GPIO_DeInit+0xce>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a61      	ldr	r2, [pc, #388]	@ (8003e4c <HAL_GPIO_DeInit+0x1f4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02b      	beq.n	8003d22 <HAL_GPIO_DeInit+0xca>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a60      	ldr	r2, [pc, #384]	@ (8003e50 <HAL_GPIO_DeInit+0x1f8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_DeInit+0xc6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a5f      	ldr	r2, [pc, #380]	@ (8003e54 <HAL_GPIO_DeInit+0x1fc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_DeInit+0xc2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8003e58 <HAL_GPIO_DeInit+0x200>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_DeInit+0xbe>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e5c <HAL_GPIO_DeInit+0x204>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_DeInit+0xba>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a5c      	ldr	r2, [pc, #368]	@ (8003e60 <HAL_GPIO_DeInit+0x208>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_DeInit+0xb6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a5b      	ldr	r2, [pc, #364]	@ (8003e64 <HAL_GPIO_DeInit+0x20c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_DeInit+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e68 <HAL_GPIO_DeInit+0x210>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_DeInit+0xae>
 8003d02:	2309      	movs	r3, #9
 8003d04:	e012      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d06:	230a      	movs	r3, #10
 8003d08:	e010      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	e00e      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d0e:	2307      	movs	r3, #7
 8003d10:	e00c      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d12:	2306      	movs	r3, #6
 8003d14:	e00a      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d16:	2305      	movs	r3, #5
 8003d18:	e008      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e006      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e004      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e002      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_GPIO_DeInit+0xd4>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	f002 0203 	and.w	r2, r2, #3
 8003d32:	0092      	lsls	r2, r2, #2
 8003d34:	4093      	lsls	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d132      	bne.n	8003da2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	4949      	ldr	r1, [pc, #292]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d4a:	4b48      	ldr	r3, [pc, #288]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	4946      	ldr	r1, [pc, #280]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d58:	4b44      	ldr	r3, [pc, #272]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	4942      	ldr	r1, [pc, #264]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d66:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	493f      	ldr	r1, [pc, #252]	@ (8003e6c <HAL_GPIO_DeInit+0x214>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d84:	4a2e      	ldr	r2, [pc, #184]	@ (8003e40 <HAL_GPIO_DeInit+0x1e8>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	43da      	mvns	r2, r3
 8003d94:	482a      	ldr	r0, [pc, #168]	@ (8003e40 <HAL_GPIO_DeInit+0x1e8>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2103      	movs	r1, #3
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	08d2      	lsrs	r2, r2, #3
 8003dd8:	4019      	ands	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2103      	movs	r1, #3
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	2103      	movs	r1, #3
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3301      	adds	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b0f      	cmp	r3, #15
 8003e2c:	f67f af22 	bls.w	8003c74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40020000 	.word	0x40020000
 8003e48:	40020400 	.word	0x40020400
 8003e4c:	40020800 	.word	0x40020800
 8003e50:	40020c00 	.word	0x40020c00
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40021400 	.word	0x40021400
 8003e5c:	40021800 	.word	0x40021800
 8003e60:	40021c00 	.word	0x40021c00
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40022400 	.word	0x40022400
 8003e6c:	40013c00 	.word	0x40013c00

08003e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e80:	787b      	ldrb	r3, [r7, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e8c:	e003      	b.n	8003e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	619a      	str	r2, [r3, #24]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e12b      	b.n	800410e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe fcc8 	bl	8002860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	@ 0x24
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f08:	f001 ff06 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 8003f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4a81      	ldr	r2, [pc, #516]	@ (8004118 <HAL_I2C_Init+0x274>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d807      	bhi.n	8003f28 <HAL_I2C_Init+0x84>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a80      	ldr	r2, [pc, #512]	@ (800411c <HAL_I2C_Init+0x278>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	bf94      	ite	ls
 8003f20:	2301      	movls	r3, #1
 8003f22:	2300      	movhi	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e006      	b.n	8003f36 <HAL_I2C_Init+0x92>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004120 <HAL_I2C_Init+0x27c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0e7      	b.n	800410e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a78      	ldr	r2, [pc, #480]	@ (8004124 <HAL_I2C_Init+0x280>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0c9b      	lsrs	r3, r3, #18
 8003f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004118 <HAL_I2C_Init+0x274>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d802      	bhi.n	8003f78 <HAL_I2C_Init+0xd4>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3301      	adds	r3, #1
 8003f76:	e009      	b.n	8003f8c <HAL_I2C_Init+0xe8>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	4a69      	ldr	r2, [pc, #420]	@ (8004128 <HAL_I2C_Init+0x284>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	099b      	lsrs	r3, r3, #6
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	495c      	ldr	r1, [pc, #368]	@ (8004118 <HAL_I2C_Init+0x274>)
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	d819      	bhi.n	8003fe0 <HAL_I2C_Init+0x13c>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e59      	subs	r1, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fc0:	400b      	ands	r3, r1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_I2C_Init+0x138>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e59      	subs	r1, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fda:	e051      	b.n	8004080 <HAL_I2C_Init+0x1dc>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	e04f      	b.n	8004080 <HAL_I2C_Init+0x1dc>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d111      	bne.n	800400c <HAL_I2C_Init+0x168>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1e58      	subs	r0, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e012      	b.n	8004032 <HAL_I2C_Init+0x18e>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Init+0x196>
 8004036:	2301      	movs	r3, #1
 8004038:	e022      	b.n	8004080 <HAL_I2C_Init+0x1dc>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10e      	bne.n	8004060 <HAL_I2C_Init+0x1bc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1e58      	subs	r0, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	440b      	add	r3, r1
 8004050:	fbb0 f3f3 	udiv	r3, r0, r3
 8004054:	3301      	adds	r3, #1
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800405e:	e00f      	b.n	8004080 <HAL_I2C_Init+0x1dc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e58      	subs	r0, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	0099      	lsls	r1, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	fbb0 f3f3 	udiv	r3, r0, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	6809      	ldr	r1, [r1, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6911      	ldr	r1, [r2, #16]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	000186a0 	.word	0x000186a0
 800411c:	001e847f 	.word	0x001e847f
 8004120:	003d08ff 	.word	0x003d08ff
 8004124:	431bde83 	.word	0x431bde83
 8004128:	10624dd3 	.word	0x10624dd3

0800412c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004146:	f7ff fa23 	bl	8003590 <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 80d9 	bne.w	800430c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2319      	movs	r3, #25
 8004160:	2201      	movs	r2, #1
 8004162:	496d      	ldr	r1, [pc, #436]	@ (8004318 <HAL_I2C_Mem_Write+0x1ec>)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fc8b 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	e0cc      	b.n	800430e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_I2C_Mem_Write+0x56>
 800417e:	2302      	movs	r3, #2
 8004180:	e0c5      	b.n	800430e <HAL_I2C_Mem_Write+0x1e2>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d007      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2221      	movs	r2, #33	@ 0x21
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2240      	movs	r2, #64	@ 0x40
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a4d      	ldr	r2, [pc, #308]	@ (800431c <HAL_I2C_Mem_Write+0x1f0>)
 80041e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ea:	88f8      	ldrh	r0, [r7, #6]
 80041ec:	893a      	ldrh	r2, [r7, #8]
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4603      	mov	r3, r0
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fac2 	bl	8004784 <I2C_RequestMemoryWrite>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d052      	beq.n	80042ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e081      	b.n	800430e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fd50 	bl	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	2b04      	cmp	r3, #4
 8004220:	d107      	bne.n	8004232 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004230:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e06b      	b.n	800430e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d11b      	bne.n	80042ac <HAL_I2C_Mem_Write+0x180>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1aa      	bne.n	800420a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fd43 	bl	8004d44 <I2C_WaitOnBTFFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d107      	bne.n	80042dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e016      	b.n	800430e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	00100002 	.word	0x00100002
 800431c:	ffff0000 	.word	0xffff0000

08004320 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	@ 0x30
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4603      	mov	r3, r0
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	460b      	mov	r3, r1
 8004334:	813b      	strh	r3, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800433a:	f7ff f929 	bl	8003590 <HAL_GetTick>
 800433e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 8214 	bne.w	8004776 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2319      	movs	r3, #25
 8004354:	2201      	movs	r2, #1
 8004356:	497b      	ldr	r1, [pc, #492]	@ (8004544 <HAL_I2C_Mem_Read+0x224>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fb91 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
 8004366:	e207      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Mem_Read+0x56>
 8004372:	2302      	movs	r3, #2
 8004374:	e200      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d007      	beq.n	800439c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2222      	movs	r2, #34	@ 0x22
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	@ 0x40
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a5b      	ldr	r2, [pc, #364]	@ (8004548 <HAL_I2C_Mem_Read+0x228>)
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043de:	88f8      	ldrh	r0, [r7, #6]
 80043e0:	893a      	ldrh	r2, [r7, #8]
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4603      	mov	r3, r0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fa5e 	bl	80048b0 <I2C_RequestMemoryRead>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e1bc      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d113      	bne.n	800442e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	623b      	str	r3, [r7, #32]
 800441a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e190      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	2b01      	cmp	r3, #1
 8004434:	d11b      	bne.n	800446e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e170      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004472:	2b02      	cmp	r3, #2
 8004474:	d11b      	bne.n	80044ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004484:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	e150      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044c4:	e144      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	f200 80f1 	bhi.w	80046b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d123      	bne.n	8004520 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fc79 	bl	8004dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e145      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800451e:	e117      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004524:	2b02      	cmp	r3, #2
 8004526:	d14e      	bne.n	80045c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	2200      	movs	r2, #0
 8004530:	4906      	ldr	r1, [pc, #24]	@ (800454c <HAL_I2C_Mem_Read+0x22c>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 faa4 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e11a      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
 8004542:	bf00      	nop
 8004544:	00100002 	.word	0x00100002
 8004548:	ffff0000 	.word	0xffff0000
 800454c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045c4:	e0c4      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045cc:	2200      	movs	r2, #0
 80045ce:	496c      	ldr	r1, [pc, #432]	@ (8004780 <HAL_I2C_Mem_Read+0x460>)
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fa55 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0cb      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	2200      	movs	r2, #0
 800462a:	4955      	ldr	r1, [pc, #340]	@ (8004780 <HAL_I2C_Mem_Read+0x460>)
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fa27 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e09d      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800464a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046b0:	e04e      	b.n	8004750 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fb8c 	bl	8004dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e058      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d124      	bne.n	8004750 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	2b03      	cmp	r3, #3
 800470c:	d107      	bne.n	800471e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	f47f aeb6 	bne.w	80044c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	00010004 	.word	0x00010004

08004784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4603      	mov	r3, r0
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	460b      	mov	r3, r1
 8004798:	813b      	strh	r3, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f960 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d4:	d103      	bne.n	80047de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e05f      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047e2:	897b      	ldrh	r3, [r7, #10]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	492d      	ldr	r1, [pc, #180]	@ (80048ac <I2C_RequestMemoryWrite+0x128>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f9bb 	bl	8004b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e04c      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa46 	bl	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2b04      	cmp	r3, #4
 8004834:	d107      	bne.n	8004846 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e02b      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004850:	893b      	ldrh	r3, [r7, #8]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]
 800485a:	e021      	b.n	80048a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800485c:	893b      	ldrh	r3, [r7, #8]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	b2da      	uxtb	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800486a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486c:	6a39      	ldr	r1, [r7, #32]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa20 	bl	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	2b04      	cmp	r3, #4
 8004880:	d107      	bne.n	8004892 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e005      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004896:	893b      	ldrh	r3, [r7, #8]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	00010002 	.word	0x00010002

080048b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	461a      	mov	r2, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	817b      	strh	r3, [r7, #10]
 80048c2:	460b      	mov	r3, r1
 80048c4:	813b      	strh	r3, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8c2 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004910:	d103      	bne.n	800491a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004918:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0aa      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800492c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	6a3a      	ldr	r2, [r7, #32]
 8004932:	4952      	ldr	r1, [pc, #328]	@ (8004a7c <I2C_RequestMemoryRead+0x1cc>)
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f91d 	bl	8004b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e097      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f9a8 	bl	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2b04      	cmp	r3, #4
 8004970:	d107      	bne.n	8004982 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e076      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800498c:	893b      	ldrh	r3, [r7, #8]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	e021      	b.n	80049dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004998:	893b      	ldrh	r3, [r7, #8]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b29b      	uxth	r3, r3
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a8:	6a39      	ldr	r1, [r7, #32]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f982 	bl	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d107      	bne.n	80049ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e050      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d2:	893b      	ldrh	r3, [r7, #8]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	6a39      	ldr	r1, [r7, #32]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f967 	bl	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d107      	bne.n	8004a04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e035      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f82b 	bl	8004a80 <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3e:	d103      	bne.n	8004a48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e013      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a4c:	897b      	ldrh	r3, [r7, #10]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	4906      	ldr	r1, [pc, #24]	@ (8004a7c <I2C_RequestMemoryRead+0x1cc>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f886 	bl	8004b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	00010002 	.word	0x00010002

08004a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a90:	e048      	b.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a98:	d044      	beq.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fe fd79 	bl	8003590 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d139      	bne.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10d      	bne.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	e00c      	b.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	43da      	mvns	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d116      	bne.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e023      	b.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10d      	bne.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	43da      	mvns	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	e00c      	b.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d093      	beq.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b82:	e071      	b.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b92:	d123      	bne.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e067      	b.n	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004be2:	d041      	beq.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be4:	f7fe fcd4 	bl	8003590 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d302      	bcc.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d136      	bne.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10c      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e00b      	b.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e021      	b.n	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d10c      	bne.n	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e00b      	b.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	43da      	mvns	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f47f af6d 	bne.w	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc0:	e034      	b.n	8004d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f8e3 	bl	8004e8e <I2C_IsAcknowledgeFailed>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e034      	b.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cd8:	d028      	beq.n	8004d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fe fc59 	bl	8003590 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11d      	bne.n	8004d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	2b80      	cmp	r3, #128	@ 0x80
 8004cfc:	d016      	beq.n	8004d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	f043 0220 	orr.w	r2, r3, #32
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e007      	b.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d36:	2b80      	cmp	r3, #128	@ 0x80
 8004d38:	d1c3      	bne.n	8004cc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d50:	e034      	b.n	8004dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f89b 	bl	8004e8e <I2C_IsAcknowledgeFailed>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e034      	b.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d68:	d028      	beq.n	8004dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fe fc11 	bl	8003590 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11d      	bne.n	8004dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d016      	beq.n	8004dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e007      	b.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d1c3      	bne.n	8004d52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de0:	e049      	b.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d119      	bne.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0210 	mvn.w	r2, #16
 8004df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e030      	b.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e24:	f7fe fbb4 	bl	8003590 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d302      	bcc.n	8004e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11d      	bne.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d016      	beq.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e007      	b.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d1ae      	bne.n	8004de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea4:	d11b      	bne.n	8004ede <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004eae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0bf      	b.n	800507e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd fd0e 	bl	8002934 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004f2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005088 <HAL_LTDC_Init+0x19c>)
 8004f60:	400b      	ands	r3, r1
 8004f62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6899      	ldr	r1, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68d9      	ldr	r1, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8005088 <HAL_LTDC_Init+0x19c>)
 8004f8e:	400b      	ands	r3, r1
 8004f90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	041b      	lsls	r3, r3, #16
 8004f98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68d9      	ldr	r1, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6919      	ldr	r1, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b33      	ldr	r3, [pc, #204]	@ (8005088 <HAL_LTDC_Init+0x19c>)
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6919      	ldr	r1, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6959      	ldr	r1, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b27      	ldr	r3, [pc, #156]	@ (8005088 <HAL_LTDC_Init+0x19c>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6959      	ldr	r1, [r3, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0206 	orr.w	r2, r2, #6
 800505a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	f000f800 	.word	0xf000f800

0800508c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800508c:	b5b0      	push	{r4, r5, r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_LTDC_ConfigLayer+0x1a>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e02c      	b.n	8005100 <HAL_LTDC_ConfigLayer+0x74>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2134      	movs	r1, #52	@ 0x34
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4614      	mov	r4, r2
 80050ca:	461d      	mov	r5, r3
 80050cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f811 	bl	8005108 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bdb0      	pop	{r4, r5, r7, pc}

08005108 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005108:	b480      	push	{r7}
 800510a:	b089      	sub	sp, #36	@ 0x24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005124:	4413      	add	r3, r2
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	01db      	lsls	r3, r3, #7
 8005134:	4413      	add	r3, r2
 8005136:	3384      	adds	r3, #132	@ 0x84
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4611      	mov	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	01d2      	lsls	r2, r2, #7
 8005144:	440a      	add	r2, r1
 8005146:	3284      	adds	r2, #132	@ 0x84
 8005148:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800514c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800515e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005160:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4619      	mov	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	01db      	lsls	r3, r3, #7
 800516c:	440b      	add	r3, r1
 800516e:	3384      	adds	r3, #132	@ 0x84
 8005170:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005176:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005186:	4413      	add	r3, r2
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	01db      	lsls	r3, r3, #7
 8005196:	4413      	add	r3, r2
 8005198:	3384      	adds	r3, #132	@ 0x84
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4611      	mov	r1, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	01d2      	lsls	r2, r2, #7
 80051a6:	440a      	add	r2, r1
 80051a8:	3284      	adds	r2, #132	@ 0x84
 80051aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80051ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051be:	4413      	add	r3, r2
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	01db      	lsls	r3, r3, #7
 80051cc:	440b      	add	r3, r1
 80051ce:	3384      	adds	r3, #132	@ 0x84
 80051d0:	4619      	mov	r1, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	01db      	lsls	r3, r3, #7
 80051e2:	4413      	add	r3, r2
 80051e4:	3384      	adds	r3, #132	@ 0x84
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	4611      	mov	r1, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	01d2      	lsls	r2, r2, #7
 80051f2:	440a      	add	r2, r1
 80051f4:	3284      	adds	r2, #132	@ 0x84
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	01db      	lsls	r3, r3, #7
 8005206:	4413      	add	r3, r2
 8005208:	3384      	adds	r3, #132	@ 0x84
 800520a:	461a      	mov	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	061b      	lsls	r3, r3, #24
 800522c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	01db      	lsls	r3, r3, #7
 8005238:	4413      	add	r3, r2
 800523a:	3384      	adds	r3, #132	@ 0x84
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	01db      	lsls	r3, r3, #7
 8005248:	4413      	add	r3, r2
 800524a:	3384      	adds	r3, #132	@ 0x84
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005258:	461a      	mov	r2, r3
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	431a      	orrs	r2, r3
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	01db      	lsls	r3, r3, #7
 800526c:	440b      	add	r3, r1
 800526e:	3384      	adds	r3, #132	@ 0x84
 8005270:	4619      	mov	r1, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	01db      	lsls	r3, r3, #7
 8005282:	4413      	add	r3, r2
 8005284:	3384      	adds	r3, #132	@ 0x84
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	4611      	mov	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	01d2      	lsls	r2, r2, #7
 8005292:	440a      	add	r2, r1
 8005294:	3284      	adds	r2, #132	@ 0x84
 8005296:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800529a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	01db      	lsls	r3, r3, #7
 80052a6:	4413      	add	r3, r2
 80052a8:	3384      	adds	r3, #132	@ 0x84
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	01db      	lsls	r3, r3, #7
 80052bc:	4413      	add	r3, r2
 80052be:	3384      	adds	r3, #132	@ 0x84
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	4611      	mov	r1, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	01d2      	lsls	r2, r2, #7
 80052cc:	440a      	add	r2, r1
 80052ce:	3284      	adds	r2, #132	@ 0x84
 80052d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	6809      	ldr	r1, [r1, #0]
 80052e6:	4608      	mov	r0, r1
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	01c9      	lsls	r1, r1, #7
 80052ec:	4401      	add	r1, r0
 80052ee:	3184      	adds	r1, #132	@ 0x84
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	01db      	lsls	r3, r3, #7
 80052fe:	4413      	add	r3, r2
 8005300:	3384      	adds	r3, #132	@ 0x84
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	01db      	lsls	r3, r3, #7
 800530e:	4413      	add	r3, r2
 8005310:	3384      	adds	r3, #132	@ 0x84
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	4413      	add	r3, r2
 8005324:	3384      	adds	r3, #132	@ 0x84
 8005326:	461a      	mov	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005336:	2304      	movs	r3, #4
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e01b      	b.n	8005374 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d102      	bne.n	800534a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005344:	2303      	movs	r3, #3
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e014      	b.n	8005374 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d00b      	beq.n	800536a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005356:	2b02      	cmp	r3, #2
 8005358:	d007      	beq.n	800536a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800535e:	2b03      	cmp	r3, #3
 8005360:	d003      	beq.n	800536a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005366:	2b07      	cmp	r3, #7
 8005368:	d102      	bne.n	8005370 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800536a:	2302      	movs	r3, #2
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e001      	b.n	8005374 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005370:	2301      	movs	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	01db      	lsls	r3, r3, #7
 800537e:	4413      	add	r3, r2
 8005380:	3384      	adds	r3, #132	@ 0x84
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	4611      	mov	r1, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	01d2      	lsls	r2, r2, #7
 800538e:	440a      	add	r2, r1
 8005390:	3284      	adds	r2, #132	@ 0x84
 8005392:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005396:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	1acb      	subs	r3, r1, r3
 80053ae:	69f9      	ldr	r1, [r7, #28]
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	6809      	ldr	r1, [r1, #0]
 80053ba:	4608      	mov	r0, r1
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	01c9      	lsls	r1, r1, #7
 80053c0:	4401      	add	r1, r0
 80053c2:	3184      	adds	r1, #132	@ 0x84
 80053c4:	4313      	orrs	r3, r2
 80053c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	01db      	lsls	r3, r3, #7
 80053d2:	4413      	add	r3, r2
 80053d4:	3384      	adds	r3, #132	@ 0x84
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	4611      	mov	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	01d2      	lsls	r2, r2, #7
 80053e2:	440a      	add	r2, r1
 80053e4:	3284      	adds	r2, #132	@ 0x84
 80053e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	01db      	lsls	r3, r3, #7
 80053fa:	4413      	add	r3, r2
 80053fc:	3384      	adds	r3, #132	@ 0x84
 80053fe:	461a      	mov	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	01db      	lsls	r3, r3, #7
 8005410:	4413      	add	r3, r2
 8005412:	3384      	adds	r3, #132	@ 0x84
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	4611      	mov	r1, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	01d2      	lsls	r2, r2, #7
 8005420:	440a      	add	r2, r1
 8005422:	3284      	adds	r2, #132	@ 0x84
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	6013      	str	r3, [r2, #0]
}
 800542a:	bf00      	nop
 800542c:	3724      	adds	r7, #36	@ 0x24
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e267      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d075      	beq.n	8005542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005456:	4b88      	ldr	r3, [pc, #544]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b04      	cmp	r3, #4
 8005460:	d00c      	beq.n	800547c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005462:	4b85      	ldr	r3, [pc, #532]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800546a:	2b08      	cmp	r3, #8
 800546c:	d112      	bne.n	8005494 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800546e:	4b82      	ldr	r3, [pc, #520]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547a:	d10b      	bne.n	8005494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	4b7e      	ldr	r3, [pc, #504]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05b      	beq.n	8005540 <HAL_RCC_OscConfig+0x108>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d157      	bne.n	8005540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e242      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549c:	d106      	bne.n	80054ac <HAL_RCC_OscConfig+0x74>
 800549e:	4b76      	ldr	r3, [pc, #472]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a75      	ldr	r2, [pc, #468]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e01d      	b.n	80054e8 <HAL_RCC_OscConfig+0xb0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x98>
 80054b6:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e00b      	b.n	80054e8 <HAL_RCC_OscConfig+0xb0>
 80054d0:	4b69      	ldr	r3, [pc, #420]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a68      	ldr	r2, [pc, #416]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b66      	ldr	r3, [pc, #408]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a65      	ldr	r2, [pc, #404]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80054e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d013      	beq.n	8005518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7fe f84e 	bl	8003590 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f8:	f7fe f84a 	bl	8003590 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	@ 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e207      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	4b5b      	ldr	r3, [pc, #364]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0xc0>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fe f83a 	bl	8003590 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005520:	f7fe f836 	bl	8003590 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	@ 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e1f3      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005532:	4b51      	ldr	r3, [pc, #324]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0xe8>
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d063      	beq.n	8005616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800554e:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555a:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005562:	2b08      	cmp	r3, #8
 8005564:	d11c      	bne.n	80055a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005566:	4b44      	ldr	r3, [pc, #272]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d116      	bne.n	80055a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005572:	4b41      	ldr	r3, [pc, #260]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_RCC_OscConfig+0x152>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d001      	beq.n	800558a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e1c7      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558a:	4b3b      	ldr	r3, [pc, #236]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4937      	ldr	r1, [pc, #220]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800559e:	e03a      	b.n	8005616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d020      	beq.n	80055ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a8:	4b34      	ldr	r3, [pc, #208]	@ (800567c <HAL_RCC_OscConfig+0x244>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fd ffef 	bl	8003590 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b6:	f7fd ffeb 	bl	8003590 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e1a8      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d4:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4925      	ldr	r1, [pc, #148]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	600b      	str	r3, [r1, #0]
 80055e8:	e015      	b.n	8005616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ea:	4b24      	ldr	r3, [pc, #144]	@ (800567c <HAL_RCC_OscConfig+0x244>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fd ffce 	bl	8003590 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f8:	f7fd ffca 	bl	8003590 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e187      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	4b1b      	ldr	r3, [pc, #108]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d036      	beq.n	8005690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562a:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <HAL_RCC_OscConfig+0x248>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fd ffae 	bl	8003590 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005638:	f7fd ffaa 	bl	8003590 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e167      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564a:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <HAL_RCC_OscConfig+0x240>)
 800564c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x200>
 8005656:	e01b      	b.n	8005690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005658:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <HAL_RCC_OscConfig+0x248>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565e:	f7fd ff97 	bl	8003590 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005664:	e00e      	b.n	8005684 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005666:	f7fd ff93 	bl	8003590 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d907      	bls.n	8005684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e150      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
 8005678:	40023800 	.word	0x40023800
 800567c:	42470000 	.word	0x42470000
 8005680:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005684:	4b88      	ldr	r3, [pc, #544]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ea      	bne.n	8005666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8097 	beq.w	80057cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a2:	4b81      	ldr	r3, [pc, #516]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	4b7d      	ldr	r3, [pc, #500]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	4a7c      	ldr	r2, [pc, #496]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056be:	4b7a      	ldr	r3, [pc, #488]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ce:	4b77      	ldr	r3, [pc, #476]	@ (80058ac <HAL_RCC_OscConfig+0x474>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d118      	bne.n	800570c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056da:	4b74      	ldr	r3, [pc, #464]	@ (80058ac <HAL_RCC_OscConfig+0x474>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a73      	ldr	r2, [pc, #460]	@ (80058ac <HAL_RCC_OscConfig+0x474>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e6:	f7fd ff53 	bl	8003590 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fd ff4f 	bl	8003590 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e10c      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	4b6a      	ldr	r3, [pc, #424]	@ (80058ac <HAL_RCC_OscConfig+0x474>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d106      	bne.n	8005722 <HAL_RCC_OscConfig+0x2ea>
 8005714:	4b64      	ldr	r3, [pc, #400]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005718:	4a63      	ldr	r2, [pc, #396]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005720:	e01c      	b.n	800575c <HAL_RCC_OscConfig+0x324>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b05      	cmp	r3, #5
 8005728:	d10c      	bne.n	8005744 <HAL_RCC_OscConfig+0x30c>
 800572a:	4b5f      	ldr	r3, [pc, #380]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	4a5e      	ldr	r2, [pc, #376]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	6713      	str	r3, [r2, #112]	@ 0x70
 8005736:	4b5c      	ldr	r3, [pc, #368]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573a:	4a5b      	ldr	r2, [pc, #364]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	6713      	str	r3, [r2, #112]	@ 0x70
 8005742:	e00b      	b.n	800575c <HAL_RCC_OscConfig+0x324>
 8005744:	4b58      	ldr	r3, [pc, #352]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005748:	4a57      	ldr	r2, [pc, #348]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005750:	4b55      	ldr	r3, [pc, #340]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005754:	4a54      	ldr	r2, [pc, #336]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005756:	f023 0304 	bic.w	r3, r3, #4
 800575a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fd ff14 	bl	8003590 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576a:	e00a      	b.n	8005782 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576c:	f7fd ff10 	bl	8003590 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0cb      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005782:	4b49      	ldr	r3, [pc, #292]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ee      	beq.n	800576c <HAL_RCC_OscConfig+0x334>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005790:	f7fd fefe 	bl	8003590 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005796:	e00a      	b.n	80057ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fd fefa 	bl	8003590 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e0b5      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ae:	4b3e      	ldr	r3, [pc, #248]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1ee      	bne.n	8005798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d105      	bne.n	80057cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c0:	4b39      	ldr	r3, [pc, #228]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	4a38      	ldr	r2, [pc, #224]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80057c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80a1 	beq.w	8005918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057d6:	4b34      	ldr	r3, [pc, #208]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d05c      	beq.n	800589c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d141      	bne.n	800586e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ea:	4b31      	ldr	r3, [pc, #196]	@ (80058b0 <HAL_RCC_OscConfig+0x478>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fd fece 	bl	8003590 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fd feca 	bl	8003590 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e087      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69da      	ldr	r2, [r3, #28]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	3b01      	subs	r3, #1
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	491b      	ldr	r1, [pc, #108]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 800583c:	4313      	orrs	r3, r2
 800583e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005840:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <HAL_RCC_OscConfig+0x478>)
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005846:	f7fd fea3 	bl	8003590 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584e:	f7fd fe9f 	bl	8003590 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e05c      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005860:	4b11      	ldr	r3, [pc, #68]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x416>
 800586c:	e054      	b.n	8005918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586e:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <HAL_RCC_OscConfig+0x478>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fd fe8c 	bl	8003590 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800587c:	f7fd fe88 	bl	8003590 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e045      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_OscConfig+0x470>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x444>
 800589a:	e03d      	b.n	8005918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d107      	bne.n	80058b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e038      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40007000 	.word	0x40007000
 80058b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005924 <HAL_RCC_OscConfig+0x4ec>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d028      	beq.n	8005914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d121      	bne.n	8005914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	429a      	cmp	r2, r3
 80058dc:	d11a      	bne.n	8005914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d111      	bne.n	8005914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	3b01      	subs	r3, #1
 80058fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005900:	429a      	cmp	r2, r3
 8005902:	d107      	bne.n	8005914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800

08005928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0cc      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800593c:	4b68      	ldr	r3, [pc, #416]	@ (8005ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d90c      	bls.n	8005964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b65      	ldr	r3, [pc, #404]	@ (8005ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005952:	4b63      	ldr	r3, [pc, #396]	@ (8005ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0b8      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800597c:	4b59      	ldr	r3, [pc, #356]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4a58      	ldr	r2, [pc, #352]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005994:	4b53      	ldr	r3, [pc, #332]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4a52      	ldr	r2, [pc, #328]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800599e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a0:	4b50      	ldr	r3, [pc, #320]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	494d      	ldr	r1, [pc, #308]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d044      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d107      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	4b47      	ldr	r3, [pc, #284]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d119      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e07f      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d003      	beq.n	80059e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d107      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e06f      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e067      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a06:	4b37      	ldr	r3, [pc, #220]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f023 0203 	bic.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	4934      	ldr	r1, [pc, #208]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a18:	f7fd fdba 	bl	8003590 <HAL_GetTick>
 8005a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a20:	f7fd fdb6 	bl	8003590 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e04f      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a36:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 020c 	and.w	r2, r3, #12
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d1eb      	bne.n	8005a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a48:	4b25      	ldr	r3, [pc, #148]	@ (8005ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d20c      	bcs.n	8005a70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a56:	4b22      	ldr	r3, [pc, #136]	@ (8005ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5e:	4b20      	ldr	r3, [pc, #128]	@ (8005ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e032      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4916      	ldr	r1, [pc, #88]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	490e      	ldr	r1, [pc, #56]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aae:	f000 f821 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	490a      	ldr	r1, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac0:	5ccb      	ldrb	r3, [r1, r3]
 8005ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac6:	4a09      	ldr	r2, [pc, #36]	@ (8005aec <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005aca:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <HAL_RCC_ClockConfig+0x1c8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fd fd1a 	bl	8003508 <HAL_InitTick>

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023c00 	.word	0x40023c00
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	080096ec 	.word	0x080096ec
 8005aec:	20000018 	.word	0x20000018
 8005af0:	2000001c 	.word	0x2000001c

08005af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b094      	sub	sp, #80	@ 0x50
 8005afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b0c:	4b79      	ldr	r3, [pc, #484]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d00d      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x40>
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	f200 80e1 	bhi.w	8005ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x34>
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b26:	e0db      	b.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b28:	4b73      	ldr	r3, [pc, #460]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b2c:	e0db      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b2e:	4b73      	ldr	r3, [pc, #460]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8005b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b32:	e0d8      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b34:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d063      	beq.n	8005c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	099b      	lsrs	r3, r3, #6
 8005b50:	2200      	movs	r2, #0
 8005b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b66:	4622      	mov	r2, r4
 8005b68:	462b      	mov	r3, r5
 8005b6a:	f04f 0000 	mov.w	r0, #0
 8005b6e:	f04f 0100 	mov.w	r1, #0
 8005b72:	0159      	lsls	r1, r3, #5
 8005b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b78:	0150      	lsls	r0, r2, #5
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4621      	mov	r1, r4
 8005b80:	1a51      	subs	r1, r2, r1
 8005b82:	6139      	str	r1, [r7, #16]
 8005b84:	4629      	mov	r1, r5
 8005b86:	eb63 0301 	sbc.w	r3, r3, r1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b98:	4659      	mov	r1, fp
 8005b9a:	018b      	lsls	r3, r1, #6
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	018a      	lsls	r2, r1, #6
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8005bac:	4659      	mov	r1, fp
 8005bae:	eb63 0901 	sbc.w	r9, r3, r1
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bc6:	4690      	mov	r8, r2
 8005bc8:	4699      	mov	r9, r3
 8005bca:	4623      	mov	r3, r4
 8005bcc:	eb18 0303 	adds.w	r3, r8, r3
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	eb49 0303 	adc.w	r3, r9, r3
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005be6:	4629      	mov	r1, r5
 8005be8:	024b      	lsls	r3, r1, #9
 8005bea:	4621      	mov	r1, r4
 8005bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	024a      	lsls	r2, r1, #9
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c04:	f7fa fb4c 	bl	80002a0 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c10:	e058      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c12:	4b38      	ldr	r3, [pc, #224]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	099b      	lsrs	r3, r3, #6
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	f04f 0000 	mov.w	r0, #0
 8005c34:	f04f 0100 	mov.w	r1, #0
 8005c38:	0159      	lsls	r1, r3, #5
 8005c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c3e:	0150      	lsls	r0, r2, #5
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4641      	mov	r1, r8
 8005c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c64:	ebb2 040a 	subs.w	r4, r2, sl
 8005c68:	eb63 050b 	sbc.w	r5, r3, fp
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	00eb      	lsls	r3, r5, #3
 8005c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7a:	00e2      	lsls	r2, r4, #3
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	461d      	mov	r5, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	18e3      	adds	r3, r4, r3
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	464b      	mov	r3, r9
 8005c88:	eb45 0303 	adc.w	r3, r5, r3
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	028b      	lsls	r3, r1, #10
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	028a      	lsls	r2, r1, #10
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cae:	2200      	movs	r2, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cb8:	f7fa faf2 	bl	80002a0 <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	0c1b      	lsrs	r3, r3, #16
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cde:	e002      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3750      	adds	r7, #80	@ 0x50
 8005cec:	46bd      	mov	sp, r7
 8005cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	007a1200 	.word	0x007a1200

08005d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d04:	4b03      	ldr	r3, [pc, #12]	@ (8005d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d06:	681b      	ldr	r3, [r3, #0]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000018 	.word	0x20000018

08005d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d1c:	f7ff fff0 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0a9b      	lsrs	r3, r3, #10
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4903      	ldr	r1, [pc, #12]	@ (8005d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	080096fc 	.word	0x080096fc

08005d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d075      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d74:	4b91      	ldr	r3, [pc, #580]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7a:	f7fd fc09 	bl	8003590 <HAL_GetTick>
 8005d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d80:	e008      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d82:	f7fd fc05 	bl	8003590 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e189      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d94:	4b8a      	ldr	r3, [pc, #552]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	019a      	lsls	r2, r3, #6
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	071b      	lsls	r3, r3, #28
 8005db8:	4981      	ldr	r1, [pc, #516]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01f      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dcc:	4b7c      	ldr	r3, [pc, #496]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd2:	0f1b      	lsrs	r3, r3, #28
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	019a      	lsls	r2, r3, #6
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	431a      	orrs	r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	071b      	lsls	r3, r3, #28
 8005dec:	4974      	ldr	r1, [pc, #464]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005df4:	4b72      	ldr	r3, [pc, #456]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dfa:	f023 021f 	bic.w	r2, r3, #31
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	496e      	ldr	r1, [pc, #440]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00d      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	019a      	lsls	r2, r3, #6
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	071b      	lsls	r3, r3, #28
 8005e2c:	4964      	ldr	r1, [pc, #400]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e34:	4b61      	ldr	r3, [pc, #388]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e3a:	f7fd fba9 	bl	8003590 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e42:	f7fd fba5 	bl	8003590 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e129      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e54:	4b5a      	ldr	r3, [pc, #360]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d079      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e78:	4b52      	ldr	r3, [pc, #328]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7e:	f7fd fb87 	bl	8003590 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e86:	f7fd fb83 	bl	8003590 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e107      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e98:	4b49      	ldr	r3, [pc, #292]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ea4:	d0ef      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eb2:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	0f1b      	lsrs	r3, r3, #28
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	019a      	lsls	r2, r3, #6
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	071b      	lsls	r3, r3, #28
 8005ed2:	493b      	ldr	r1, [pc, #236]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005eda:	4b39      	ldr	r3, [pc, #228]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ee0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	4934      	ldr	r1, [pc, #208]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01e      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f00:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f06:	0e1b      	lsrs	r3, r3, #24
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	019a      	lsls	r2, r3, #6
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	061b      	lsls	r3, r3, #24
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	071b      	lsls	r3, r3, #28
 8005f20:	4927      	ldr	r1, [pc, #156]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f28:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	4922      	ldr	r1, [pc, #136]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f3e:	4b21      	ldr	r3, [pc, #132]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f44:	f7fd fb24 	bl	8003590 <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f4c:	f7fd fb20 	bl	8003590 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e0a4      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f5e:	4b18      	ldr	r3, [pc, #96]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6a:	d1ef      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 808b 	beq.w	8006090 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	4b10      	ldr	r3, [pc, #64]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	4a0f      	ldr	r2, [pc, #60]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fa2:	f7fd faf5 	bl	8003590 <HAL_GetTick>
 8005fa6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005fa8:	e010      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005faa:	f7fd faf1 	bl	8003590 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d909      	bls.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e075      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005fbc:	42470068 	.word	0x42470068
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	42470070 	.word	0x42470070
 8005fc8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005fcc:	4b38      	ldr	r3, [pc, #224]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0e8      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fd8:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02f      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d028      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ffe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006000:	4b2d      	ldr	r3, [pc, #180]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006006:	4b2c      	ldr	r3, [pc, #176]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800600c:	4a29      	ldr	r2, [pc, #164]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006012:	4b28      	ldr	r3, [pc, #160]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d114      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800601e:	f7fd fab7 	bl	8003590 <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006024:	e00a      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006026:	f7fd fab3 	bl	8003590 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e035      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0ee      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006054:	d10d      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006056:	4b17      	ldr	r3, [pc, #92]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006062:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606a:	4912      	ldr	r1, [pc, #72]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800606c:	4313      	orrs	r3, r2
 800606e:	608b      	str	r3, [r1, #8]
 8006070:	e005      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006072:	4b10      	ldr	r3, [pc, #64]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	4a0f      	ldr	r2, [pc, #60]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006078:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800607c:	6093      	str	r3, [r2, #8]
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006080:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608a:	490a      	ldr	r1, [pc, #40]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800608c:	4313      	orrs	r3, r2
 800608e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	d004      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80060a2:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40007000 	.word	0x40007000
 80060b4:	40023800 	.word	0x40023800
 80060b8:	42470e40 	.word	0x42470e40
 80060bc:	424711e0 	.word	0x424711e0

080060c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e01c      	b.n	800610c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	795b      	ldrb	r3, [r3, #5]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fd4e 	bl	8002b84 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0204 	orr.w	r2, r2, #4
 80060fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_RNG_GenerateRandomNumber+0x1a>
 800612a:	2302      	movs	r3, #2
 800612c:	e044      	b.n	80061b8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	795b      	ldrb	r3, [r3, #5]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d133      	bne.n	80061a6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006144:	f7fd fa24 	bl	8003590 <HAL_GetTick>
 8006148:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800614a:	e018      	b.n	800617e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800614c:	f7fd fa20 	bl	8003590 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d911      	bls.n	800617e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d00a      	beq.n	800617e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e01c      	b.n	80061b8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b01      	cmp	r3, #1
 800618a:	d1df      	bne.n	800614c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	715a      	strb	r2, [r3, #5]
 80061a4:	e004      	b.n	80061b0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	711a      	strb	r2, [r3, #4]

  return status;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e07b      	b.n	80062ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d108      	bne.n	80061ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e2:	d009      	beq.n	80061f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	61da      	str	r2, [r3, #28]
 80061ea:	e005      	b.n	80061f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fc fcd8 	bl	8002bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800622e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627c:	ea42 0103 	orr.w	r1, r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	f003 0104 	and.w	r1, r3, #4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	f003 0210 	and.w	r2, r3, #16
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e01a      	b.n	800631a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fc fcab 	bl	8002c58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b088      	sub	sp, #32
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006332:	f7fd f92d 	bl	8003590 <HAL_GetTick>
 8006336:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d001      	beq.n	800634c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
 800634a:	e12a      	b.n	80065a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_SPI_Transmit+0x36>
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e122      	b.n	80065a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_SPI_Transmit+0x48>
 8006366:	2302      	movs	r3, #2
 8006368:	e11b      	b.n	80065a2 <HAL_SPI_Transmit+0x280>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2203      	movs	r2, #3
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	88fa      	ldrh	r2, [r7, #6]
 8006390:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b8:	d10f      	bne.n	80063da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d007      	beq.n	80063f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006400:	d152      	bne.n	80064a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_SPI_Transmit+0xee>
 800640a:	8b7b      	ldrh	r3, [r7, #26]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d145      	bne.n	800649c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006420:	1c9a      	adds	r2, r3, #2
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006434:	e032      	b.n	800649c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b02      	cmp	r3, #2
 8006442:	d112      	bne.n	800646a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006468:	e018      	b.n	800649c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800646a:	f7fd f891 	bl	8003590 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d803      	bhi.n	8006482 <HAL_SPI_Transmit+0x160>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006480:	d102      	bne.n	8006488 <HAL_SPI_Transmit+0x166>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e082      	b.n	80065a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1c7      	bne.n	8006436 <HAL_SPI_Transmit+0x114>
 80064a6:	e053      	b.n	8006550 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_Transmit+0x194>
 80064b0:	8b7b      	ldrh	r3, [r7, #26]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d147      	bne.n	8006546 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	7812      	ldrb	r2, [r2, #0]
 80064c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064dc:	e033      	b.n	8006546 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d113      	bne.n	8006514 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006512:	e018      	b.n	8006546 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006514:	f7fd f83c 	bl	8003590 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d803      	bhi.n	800652c <HAL_SPI_Transmit+0x20a>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Transmit+0x210>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e02d      	b.n	80065a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1c6      	bne.n	80064de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f8bf 	bl	80066d8 <SPI_EndRxTxTransaction>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
  }
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3720      	adds	r7, #32
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065b8:	b2db      	uxtb	r3, r3
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065d8:	f7fc ffda 	bl	8003590 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065e8:	f7fc ffd2 	bl	8003590 <HAL_GetTick>
 80065ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ee:	4b39      	ldr	r3, [pc, #228]	@ (80066d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	015b      	lsls	r3, r3, #5
 80065f4:	0d1b      	lsrs	r3, r3, #20
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065fe:	e054      	b.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006606:	d050      	beq.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006608:	f7fc ffc2 	bl	8003590 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	429a      	cmp	r2, r3
 8006616:	d902      	bls.n	800661e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d13d      	bne.n	800669a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800662c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006636:	d111      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006640:	d004      	beq.n	800664c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800664a:	d107      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800665a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006664:	d10f      	bne.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e017      	b.n	80066ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d19b      	bne.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000018 	.word	0x20000018

080066d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2201      	movs	r2, #1
 80066ec:	2102      	movs	r1, #2
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff6a 	bl	80065c8 <SPI_WaitFlagStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e032      	b.n	8006770 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800670a:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <SPI_EndRxTxTransaction+0xa0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1b      	ldr	r2, [pc, #108]	@ (800677c <SPI_EndRxTxTransaction+0xa4>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	0d5b      	lsrs	r3, r3, #21
 8006716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006728:	d112      	bne.n	8006750 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2200      	movs	r2, #0
 8006732:	2180      	movs	r1, #128	@ 0x80
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff ff47 	bl	80065c8 <SPI_WaitFlagStateUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d016      	beq.n	800676e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e00f      	b.n	8006770 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	3b01      	subs	r3, #1
 800675a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d0f2      	beq.n	8006750 <SPI_EndRxTxTransaction+0x78>
 800676a:	e000      	b.n	800676e <SPI_EndRxTxTransaction+0x96>
        break;
 800676c:	bf00      	nop
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000018 	.word	0x20000018
 800677c:	165e9f81 	.word	0x165e9f81

08006780 <findslot>:
 8006780:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <findslot+0x2c>)
 8006782:	b510      	push	{r4, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	b118      	cbz	r0, 8006792 <findslot+0x12>
 800678a:	6a03      	ldr	r3, [r0, #32]
 800678c:	b90b      	cbnz	r3, 8006792 <findslot+0x12>
 800678e:	f000 fb19 	bl	8006dc4 <__sinit>
 8006792:	2c13      	cmp	r4, #19
 8006794:	d807      	bhi.n	80067a6 <findslot+0x26>
 8006796:	4806      	ldr	r0, [pc, #24]	@ (80067b0 <findslot+0x30>)
 8006798:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800679c:	3201      	adds	r2, #1
 800679e:	d002      	beq.n	80067a6 <findslot+0x26>
 80067a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	2000      	movs	r0, #0
 80067a8:	e7fc      	b.n	80067a4 <findslot+0x24>
 80067aa:	bf00      	nop
 80067ac:	20000038 	.word	0x20000038
 80067b0:	20025b9c 	.word	0x20025b9c

080067b4 <error>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	4604      	mov	r4, r0
 80067b8:	f000 fb54 	bl	8006e64 <__errno>
 80067bc:	2613      	movs	r6, #19
 80067be:	4605      	mov	r5, r0
 80067c0:	2700      	movs	r7, #0
 80067c2:	4630      	mov	r0, r6
 80067c4:	4639      	mov	r1, r7
 80067c6:	beab      	bkpt	0x00ab
 80067c8:	4606      	mov	r6, r0
 80067ca:	602e      	str	r6, [r5, #0]
 80067cc:	4620      	mov	r0, r4
 80067ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067d0 <checkerror>:
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d101      	bne.n	80067d8 <checkerror+0x8>
 80067d4:	f7ff bfee 	b.w	80067b4 <error>
 80067d8:	4770      	bx	lr

080067da <_swiread>:
 80067da:	b530      	push	{r4, r5, lr}
 80067dc:	b085      	sub	sp, #20
 80067de:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80067e2:	9203      	str	r2, [sp, #12]
 80067e4:	2406      	movs	r4, #6
 80067e6:	ad01      	add	r5, sp, #4
 80067e8:	4620      	mov	r0, r4
 80067ea:	4629      	mov	r1, r5
 80067ec:	beab      	bkpt	0x00ab
 80067ee:	4604      	mov	r4, r0
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff ffed 	bl	80067d0 <checkerror>
 80067f6:	b005      	add	sp, #20
 80067f8:	bd30      	pop	{r4, r5, pc}

080067fa <_read>:
 80067fa:	b570      	push	{r4, r5, r6, lr}
 80067fc:	460e      	mov	r6, r1
 80067fe:	4614      	mov	r4, r2
 8006800:	f7ff ffbe 	bl	8006780 <findslot>
 8006804:	4605      	mov	r5, r0
 8006806:	b930      	cbnz	r0, 8006816 <_read+0x1c>
 8006808:	f000 fb2c 	bl	8006e64 <__errno>
 800680c:	2309      	movs	r3, #9
 800680e:	6003      	str	r3, [r0, #0]
 8006810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006814:	bd70      	pop	{r4, r5, r6, pc}
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	4622      	mov	r2, r4
 800681a:	4631      	mov	r1, r6
 800681c:	f7ff ffdd 	bl	80067da <_swiread>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d0f5      	beq.n	8006810 <_read+0x16>
 8006824:	686b      	ldr	r3, [r5, #4]
 8006826:	1a20      	subs	r0, r4, r0
 8006828:	4403      	add	r3, r0
 800682a:	606b      	str	r3, [r5, #4]
 800682c:	e7f2      	b.n	8006814 <_read+0x1a>

0800682e <_swilseek>:
 800682e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006830:	460c      	mov	r4, r1
 8006832:	4616      	mov	r6, r2
 8006834:	f7ff ffa4 	bl	8006780 <findslot>
 8006838:	4605      	mov	r5, r0
 800683a:	b940      	cbnz	r0, 800684e <_swilseek+0x20>
 800683c:	f000 fb12 	bl	8006e64 <__errno>
 8006840:	2309      	movs	r3, #9
 8006842:	6003      	str	r3, [r0, #0]
 8006844:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006848:	4620      	mov	r0, r4
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	2e02      	cmp	r6, #2
 8006850:	d903      	bls.n	800685a <_swilseek+0x2c>
 8006852:	f000 fb07 	bl	8006e64 <__errno>
 8006856:	2316      	movs	r3, #22
 8006858:	e7f3      	b.n	8006842 <_swilseek+0x14>
 800685a:	2e01      	cmp	r6, #1
 800685c:	d112      	bne.n	8006884 <_swilseek+0x56>
 800685e:	6843      	ldr	r3, [r0, #4]
 8006860:	18e4      	adds	r4, r4, r3
 8006862:	d4f6      	bmi.n	8006852 <_swilseek+0x24>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	260a      	movs	r6, #10
 8006868:	e9cd 3400 	strd	r3, r4, [sp]
 800686c:	466f      	mov	r7, sp
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	beab      	bkpt	0x00ab
 8006874:	4606      	mov	r6, r0
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ffaa 	bl	80067d0 <checkerror>
 800687c:	2800      	cmp	r0, #0
 800687e:	dbe1      	blt.n	8006844 <_swilseek+0x16>
 8006880:	606c      	str	r4, [r5, #4]
 8006882:	e7e1      	b.n	8006848 <_swilseek+0x1a>
 8006884:	2e02      	cmp	r6, #2
 8006886:	6803      	ldr	r3, [r0, #0]
 8006888:	d1ec      	bne.n	8006864 <_swilseek+0x36>
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	260c      	movs	r6, #12
 800688e:	466f      	mov	r7, sp
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	beab      	bkpt	0x00ab
 8006896:	4606      	mov	r6, r0
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff ff99 	bl	80067d0 <checkerror>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d0d0      	beq.n	8006844 <_swilseek+0x16>
 80068a2:	4404      	add	r4, r0
 80068a4:	e7de      	b.n	8006864 <_swilseek+0x36>

080068a6 <_lseek>:
 80068a6:	f7ff bfc2 	b.w	800682e <_swilseek>

080068aa <_swiwrite>:
 80068aa:	b530      	push	{r4, r5, lr}
 80068ac:	b085      	sub	sp, #20
 80068ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80068b2:	9203      	str	r2, [sp, #12]
 80068b4:	2405      	movs	r4, #5
 80068b6:	ad01      	add	r5, sp, #4
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	beab      	bkpt	0x00ab
 80068be:	4604      	mov	r4, r0
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff ff85 	bl	80067d0 <checkerror>
 80068c6:	b005      	add	sp, #20
 80068c8:	bd30      	pop	{r4, r5, pc}

080068ca <_write>:
 80068ca:	b570      	push	{r4, r5, r6, lr}
 80068cc:	460e      	mov	r6, r1
 80068ce:	4615      	mov	r5, r2
 80068d0:	f7ff ff56 	bl	8006780 <findslot>
 80068d4:	4604      	mov	r4, r0
 80068d6:	b930      	cbnz	r0, 80068e6 <_write+0x1c>
 80068d8:	f000 fac4 	bl	8006e64 <__errno>
 80068dc:	2309      	movs	r3, #9
 80068de:	6003      	str	r3, [r0, #0]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	6800      	ldr	r0, [r0, #0]
 80068e8:	462a      	mov	r2, r5
 80068ea:	4631      	mov	r1, r6
 80068ec:	f7ff ffdd 	bl	80068aa <_swiwrite>
 80068f0:	1e03      	subs	r3, r0, #0
 80068f2:	dbf5      	blt.n	80068e0 <_write+0x16>
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	1ae8      	subs	r0, r5, r3
 80068f8:	4402      	add	r2, r0
 80068fa:	42ab      	cmp	r3, r5
 80068fc:	6062      	str	r2, [r4, #4]
 80068fe:	d1f1      	bne.n	80068e4 <_write+0x1a>
 8006900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006904:	2000      	movs	r0, #0
 8006906:	f7ff bf55 	b.w	80067b4 <error>

0800690a <_swiclose>:
 800690a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800690c:	2402      	movs	r4, #2
 800690e:	9001      	str	r0, [sp, #4]
 8006910:	ad01      	add	r5, sp, #4
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	beab      	bkpt	0x00ab
 8006918:	4604      	mov	r4, r0
 800691a:	4620      	mov	r0, r4
 800691c:	f7ff ff58 	bl	80067d0 <checkerror>
 8006920:	b003      	add	sp, #12
 8006922:	bd30      	pop	{r4, r5, pc}

08006924 <_close>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4605      	mov	r5, r0
 8006928:	f7ff ff2a 	bl	8006780 <findslot>
 800692c:	4604      	mov	r4, r0
 800692e:	b930      	cbnz	r0, 800693e <_close+0x1a>
 8006930:	f000 fa98 	bl	8006e64 <__errno>
 8006934:	2309      	movs	r3, #9
 8006936:	6003      	str	r3, [r0, #0]
 8006938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800693c:	bd38      	pop	{r3, r4, r5, pc}
 800693e:	3d01      	subs	r5, #1
 8006940:	2d01      	cmp	r5, #1
 8006942:	d809      	bhi.n	8006958 <_close+0x34>
 8006944:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <_close+0x40>)
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	d104      	bne.n	8006958 <_close+0x34>
 800694e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	2000      	movs	r0, #0
 8006956:	e7f1      	b.n	800693c <_close+0x18>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	f7ff ffd6 	bl	800690a <_swiclose>
 800695e:	2800      	cmp	r0, #0
 8006960:	d0f5      	beq.n	800694e <_close+0x2a>
 8006962:	e7eb      	b.n	800693c <_close+0x18>
 8006964:	20025b9c 	.word	0x20025b9c

08006968 <_swistat>:
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	460c      	mov	r4, r1
 800696c:	f7ff ff08 	bl	8006780 <findslot>
 8006970:	4605      	mov	r5, r0
 8006972:	b930      	cbnz	r0, 8006982 <_swistat+0x1a>
 8006974:	f000 fa76 	bl	8006e64 <__errno>
 8006978:	2309      	movs	r3, #9
 800697a:	6003      	str	r3, [r0, #0]
 800697c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006980:	bd70      	pop	{r4, r5, r6, pc}
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006988:	6063      	str	r3, [r4, #4]
 800698a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800698e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006990:	260c      	movs	r6, #12
 8006992:	4630      	mov	r0, r6
 8006994:	4629      	mov	r1, r5
 8006996:	beab      	bkpt	0x00ab
 8006998:	4605      	mov	r5, r0
 800699a:	4628      	mov	r0, r5
 800699c:	f7ff ff18 	bl	80067d0 <checkerror>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d0eb      	beq.n	800697c <_swistat+0x14>
 80069a4:	6120      	str	r0, [r4, #16]
 80069a6:	2000      	movs	r0, #0
 80069a8:	e7ea      	b.n	8006980 <_swistat+0x18>

080069aa <_fstat>:
 80069aa:	460b      	mov	r3, r1
 80069ac:	b510      	push	{r4, lr}
 80069ae:	2100      	movs	r1, #0
 80069b0:	4604      	mov	r4, r0
 80069b2:	2258      	movs	r2, #88	@ 0x58
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fa4d 	bl	8006e54 <memset>
 80069ba:	4601      	mov	r1, r0
 80069bc:	4620      	mov	r0, r4
 80069be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c2:	f7ff bfd1 	b.w	8006968 <_swistat>

080069c6 <_stat>:
 80069c6:	b538      	push	{r3, r4, r5, lr}
 80069c8:	460d      	mov	r5, r1
 80069ca:	4604      	mov	r4, r0
 80069cc:	2258      	movs	r2, #88	@ 0x58
 80069ce:	2100      	movs	r1, #0
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 fa3f 	bl	8006e54 <memset>
 80069d6:	4620      	mov	r0, r4
 80069d8:	2100      	movs	r1, #0
 80069da:	f000 f811 	bl	8006a00 <_swiopen>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	4604      	mov	r4, r0
 80069e2:	d00b      	beq.n	80069fc <_stat+0x36>
 80069e4:	686b      	ldr	r3, [r5, #4]
 80069e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80069ea:	606b      	str	r3, [r5, #4]
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7ff ffbb 	bl	8006968 <_swistat>
 80069f2:	4605      	mov	r5, r0
 80069f4:	4620      	mov	r0, r4
 80069f6:	f7ff ff95 	bl	8006924 <_close>
 80069fa:	462c      	mov	r4, r5
 80069fc:	4620      	mov	r0, r4
 80069fe:	bd38      	pop	{r3, r4, r5, pc}

08006a00 <_swiopen>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	4f29      	ldr	r7, [pc, #164]	@ (8006aac <_swiopen+0xac>)
 8006a06:	b096      	sub	sp, #88	@ 0x58
 8006a08:	4682      	mov	sl, r0
 8006a0a:	460e      	mov	r6, r1
 8006a0c:	2400      	movs	r4, #0
 8006a0e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006a12:	3301      	adds	r3, #1
 8006a14:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006a18:	d00c      	beq.n	8006a34 <_swiopen+0x34>
 8006a1a:	3401      	adds	r4, #1
 8006a1c:	2c14      	cmp	r4, #20
 8006a1e:	d1f6      	bne.n	8006a0e <_swiopen+0xe>
 8006a20:	f000 fa20 	bl	8006e64 <__errno>
 8006a24:	2318      	movs	r3, #24
 8006a26:	6003      	str	r3, [r0, #0]
 8006a28:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	b016      	add	sp, #88	@ 0x58
 8006a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a34:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006a38:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006a3c:	46e9      	mov	r9, sp
 8006a3e:	d109      	bne.n	8006a54 <_swiopen+0x54>
 8006a40:	4649      	mov	r1, r9
 8006a42:	4650      	mov	r0, sl
 8006a44:	f7ff ffbf 	bl	80069c6 <_stat>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d003      	beq.n	8006a54 <_swiopen+0x54>
 8006a4c:	f000 fa0a 	bl	8006e64 <__errno>
 8006a50:	2311      	movs	r3, #17
 8006a52:	e7e8      	b.n	8006a26 <_swiopen+0x26>
 8006a54:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006a58:	f240 6301 	movw	r3, #1537	@ 0x601
 8006a5c:	07b2      	lsls	r2, r6, #30
 8006a5e:	bf48      	it	mi
 8006a60:	f045 0502 	orrmi.w	r5, r5, #2
 8006a64:	421e      	tst	r6, r3
 8006a66:	bf18      	it	ne
 8006a68:	f045 0504 	orrne.w	r5, r5, #4
 8006a6c:	0733      	lsls	r3, r6, #28
 8006a6e:	bf48      	it	mi
 8006a70:	f025 0504 	bicmi.w	r5, r5, #4
 8006a74:	4650      	mov	r0, sl
 8006a76:	bf48      	it	mi
 8006a78:	f045 0508 	orrmi.w	r5, r5, #8
 8006a7c:	f8cd a000 	str.w	sl, [sp]
 8006a80:	f7f9 fbb6 	bl	80001f0 <strlen>
 8006a84:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006a88:	2501      	movs	r5, #1
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	beab      	bkpt	0x00ab
 8006a90:	4605      	mov	r5, r0
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	db05      	blt.n	8006aa2 <_swiopen+0xa2>
 8006a96:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006a9a:	4447      	add	r7, r8
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	607b      	str	r3, [r7, #4]
 8006aa0:	e7c4      	b.n	8006a2c <_swiopen+0x2c>
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f7ff fe86 	bl	80067b4 <error>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	e7bf      	b.n	8006a2c <_swiopen+0x2c>
 8006aac:	20025b9c 	.word	0x20025b9c

08006ab0 <_get_semihosting_exts>:
 8006ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	4829      	ldr	r0, [pc, #164]	@ (8006b60 <_get_semihosting_exts+0xb0>)
 8006aba:	2100      	movs	r1, #0
 8006abc:	4615      	mov	r5, r2
 8006abe:	f7ff ff9f 	bl	8006a00 <_swiopen>
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f9c3 	bl	8006e54 <memset>
 8006ace:	1c63      	adds	r3, r4, #1
 8006ad0:	d014      	beq.n	8006afc <_get_semihosting_exts+0x4c>
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff fe54 	bl	8006780 <findslot>
 8006ad8:	f04f 080c 	mov.w	r8, #12
 8006adc:	4681      	mov	r9, r0
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	beab      	bkpt	0x00ab
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	f7ff fe72 	bl	80067d0 <checkerror>
 8006aec:	2803      	cmp	r0, #3
 8006aee:	dd02      	ble.n	8006af6 <_get_semihosting_exts+0x46>
 8006af0:	1ec3      	subs	r3, r0, #3
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	dc07      	bgt.n	8006b06 <_get_semihosting_exts+0x56>
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff ff14 	bl	8006924 <_close>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b00:	b003      	add	sp, #12
 8006b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b06:	2204      	movs	r2, #4
 8006b08:	eb0d 0102 	add.w	r1, sp, r2
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f7ff fe74 	bl	80067fa <_read>
 8006b12:	2803      	cmp	r0, #3
 8006b14:	ddef      	ble.n	8006af6 <_get_semihosting_exts+0x46>
 8006b16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b1a:	2b53      	cmp	r3, #83	@ 0x53
 8006b1c:	d1eb      	bne.n	8006af6 <_get_semihosting_exts+0x46>
 8006b1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006b22:	2b48      	cmp	r3, #72	@ 0x48
 8006b24:	d1e7      	bne.n	8006af6 <_get_semihosting_exts+0x46>
 8006b26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006b2a:	2b46      	cmp	r3, #70	@ 0x46
 8006b2c:	d1e3      	bne.n	8006af6 <_get_semihosting_exts+0x46>
 8006b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b32:	2b42      	cmp	r3, #66	@ 0x42
 8006b34:	d1df      	bne.n	8006af6 <_get_semihosting_exts+0x46>
 8006b36:	2201      	movs	r2, #1
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7ff fe77 	bl	800682e <_swilseek>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	dbd8      	blt.n	8006af6 <_get_semihosting_exts+0x46>
 8006b44:	462a      	mov	r2, r5
 8006b46:	4631      	mov	r1, r6
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7ff fe56 	bl	80067fa <_read>
 8006b4e:	4605      	mov	r5, r0
 8006b50:	4620      	mov	r0, r4
 8006b52:	f7ff fee7 	bl	8006924 <_close>
 8006b56:	4628      	mov	r0, r5
 8006b58:	f7ff fe3a 	bl	80067d0 <checkerror>
 8006b5c:	e7d0      	b.n	8006b00 <_get_semihosting_exts+0x50>
 8006b5e:	bf00      	nop
 8006b60:	08009704 	.word	0x08009704

08006b64 <initialise_semihosting_exts>:
 8006b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b66:	4d0a      	ldr	r5, [pc, #40]	@ (8006b90 <initialise_semihosting_exts+0x2c>)
 8006b68:	4c0a      	ldr	r4, [pc, #40]	@ (8006b94 <initialise_semihosting_exts+0x30>)
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	a801      	add	r0, sp, #4
 8006b70:	6029      	str	r1, [r5, #0]
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	f7ff ff9c 	bl	8006ab0 <_get_semihosting_exts>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	dd07      	ble.n	8006b8c <initialise_semihosting_exts+0x28>
 8006b7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b80:	f003 0201 	and.w	r2, r3, #1
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	6023      	str	r3, [r4, #0]
 8006b8c:	b003      	add	sp, #12
 8006b8e:	bd30      	pop	{r4, r5, pc}
 8006b90:	20000028 	.word	0x20000028
 8006b94:	20000024 	.word	0x20000024

08006b98 <_has_ext_stdout_stderr>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4c04      	ldr	r4, [pc, #16]	@ (8006bac <_has_ext_stdout_stderr+0x14>)
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	da01      	bge.n	8006ba6 <_has_ext_stdout_stderr+0xe>
 8006ba2:	f7ff ffdf 	bl	8006b64 <initialise_semihosting_exts>
 8006ba6:	6820      	ldr	r0, [r4, #0]
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	20000024 	.word	0x20000024

08006bb0 <initialise_monitor_handles>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006c68 <initialise_monitor_handles+0xb8>
 8006bba:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	2400      	movs	r4, #0
 8006bc2:	9303      	str	r3, [sp, #12]
 8006bc4:	af01      	add	r7, sp, #4
 8006bc6:	9402      	str	r4, [sp, #8]
 8006bc8:	2501      	movs	r5, #1
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4639      	mov	r1, r7
 8006bce:	beab      	bkpt	0x00ab
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006c6c <initialise_monitor_handles+0xbc>
 8006bd6:	4623      	mov	r3, r4
 8006bd8:	4c20      	ldr	r4, [pc, #128]	@ (8006c5c <initialise_monitor_handles+0xac>)
 8006bda:	f8c8 5000 	str.w	r5, [r8]
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006be2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006be6:	3301      	adds	r3, #1
 8006be8:	2b14      	cmp	r3, #20
 8006bea:	d1fa      	bne.n	8006be2 <initialise_monitor_handles+0x32>
 8006bec:	f7ff ffd4 	bl	8006b98 <_has_ext_stdout_stderr>
 8006bf0:	4d1b      	ldr	r5, [pc, #108]	@ (8006c60 <initialise_monitor_handles+0xb0>)
 8006bf2:	b1d0      	cbz	r0, 8006c2a <initialise_monitor_handles+0x7a>
 8006bf4:	f04f 0a03 	mov.w	sl, #3
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bfe:	2601      	movs	r6, #1
 8006c00:	f8cd a00c 	str.w	sl, [sp, #12]
 8006c04:	9302      	str	r3, [sp, #8]
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	beab      	bkpt	0x00ab
 8006c0c:	4683      	mov	fp, r0
 8006c0e:	4b15      	ldr	r3, [pc, #84]	@ (8006c64 <initialise_monitor_handles+0xb4>)
 8006c10:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c14:	f8c3 b000 	str.w	fp, [r3]
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f8cd a00c 	str.w	sl, [sp, #12]
 8006c1e:	9302      	str	r3, [sp, #8]
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	beab      	bkpt	0x00ab
 8006c26:	4606      	mov	r6, r0
 8006c28:	602e      	str	r6, [r5, #0]
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	bf02      	ittt	eq
 8006c30:	4b0c      	ldreq	r3, [pc, #48]	@ (8006c64 <initialise_monitor_handles+0xb4>)
 8006c32:	681b      	ldreq	r3, [r3, #0]
 8006c34:	602b      	streq	r3, [r5, #0]
 8006c36:	2600      	movs	r6, #0
 8006c38:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	6066      	str	r6, [r4, #4]
 8006c40:	f7ff ffaa 	bl	8006b98 <_has_ext_stdout_stderr>
 8006c44:	b130      	cbz	r0, 8006c54 <initialise_monitor_handles+0xa4>
 8006c46:	4b07      	ldr	r3, [pc, #28]	@ (8006c64 <initialise_monitor_handles+0xb4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006c4e:	682b      	ldr	r3, [r5, #0]
 8006c50:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006c54:	b005      	add	sp, #20
 8006c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20025b9c 	.word	0x20025b9c
 8006c60:	20025b90 	.word	0x20025b90
 8006c64:	20025b94 	.word	0x20025b94
 8006c68:	0800971a 	.word	0x0800971a
 8006c6c:	20025b98 	.word	0x20025b98

08006c70 <_isatty>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	f7ff fd85 	bl	8006780 <findslot>
 8006c76:	2409      	movs	r4, #9
 8006c78:	4605      	mov	r5, r0
 8006c7a:	b920      	cbnz	r0, 8006c86 <_isatty+0x16>
 8006c7c:	f000 f8f2 	bl	8006e64 <__errno>
 8006c80:	6004      	str	r4, [r0, #0]
 8006c82:	2000      	movs	r0, #0
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	beab      	bkpt	0x00ab
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	2c01      	cmp	r4, #1
 8006c90:	4620      	mov	r0, r4
 8006c92:	d0f7      	beq.n	8006c84 <_isatty+0x14>
 8006c94:	f000 f8e6 	bl	8006e64 <__errno>
 8006c98:	2513      	movs	r5, #19
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	2600      	movs	r6, #0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	beab      	bkpt	0x00ab
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	6025      	str	r5, [r4, #0]
 8006ca8:	e7eb      	b.n	8006c82 <_isatty+0x12>
	...

08006cac <std>:
 8006cac:	2300      	movs	r3, #0
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cba:	6083      	str	r3, [r0, #8]
 8006cbc:	8181      	strh	r1, [r0, #12]
 8006cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cc0:	81c2      	strh	r2, [r0, #14]
 8006cc2:	6183      	str	r3, [r0, #24]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	305c      	adds	r0, #92	@ 0x5c
 8006cca:	f000 f8c3 	bl	8006e54 <memset>
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <std+0x58>)
 8006cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x5c>)
 8006cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x60>)
 8006cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x64>)
 8006cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x68>)
 8006ce0:	6224      	str	r4, [r4, #32]
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d006      	beq.n	8006cf4 <std+0x48>
 8006ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cea:	4294      	cmp	r4, r2
 8006cec:	d002      	beq.n	8006cf4 <std+0x48>
 8006cee:	33d0      	adds	r3, #208	@ 0xd0
 8006cf0:	429c      	cmp	r4, r3
 8006cf2:	d105      	bne.n	8006d00 <std+0x54>
 8006cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfc:	f000 b8dc 	b.w	8006eb8 <__retarget_lock_init_recursive>
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	bf00      	nop
 8006d04:	08007711 	.word	0x08007711
 8006d08:	08007733 	.word	0x08007733
 8006d0c:	0800776b 	.word	0x0800776b
 8006d10:	0800778f 	.word	0x0800778f
 8006d14:	20025c3c 	.word	0x20025c3c

08006d18 <stdio_exit_handler>:
 8006d18:	4a02      	ldr	r2, [pc, #8]	@ (8006d24 <stdio_exit_handler+0xc>)
 8006d1a:	4903      	ldr	r1, [pc, #12]	@ (8006d28 <stdio_exit_handler+0x10>)
 8006d1c:	4803      	ldr	r0, [pc, #12]	@ (8006d2c <stdio_exit_handler+0x14>)
 8006d1e:	f000 b869 	b.w	8006df4 <_fwalk_sglue>
 8006d22:	bf00      	nop
 8006d24:	2000002c 	.word	0x2000002c
 8006d28:	080076a9 	.word	0x080076a9
 8006d2c:	2000003c 	.word	0x2000003c

08006d30 <cleanup_stdio>:
 8006d30:	6841      	ldr	r1, [r0, #4]
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <cleanup_stdio+0x34>)
 8006d34:	4299      	cmp	r1, r3
 8006d36:	b510      	push	{r4, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	d001      	beq.n	8006d40 <cleanup_stdio+0x10>
 8006d3c:	f000 fcb4 	bl	80076a8 <_fflush_r>
 8006d40:	68a1      	ldr	r1, [r4, #8]
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <cleanup_stdio+0x38>)
 8006d44:	4299      	cmp	r1, r3
 8006d46:	d002      	beq.n	8006d4e <cleanup_stdio+0x1e>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fcad 	bl	80076a8 <_fflush_r>
 8006d4e:	68e1      	ldr	r1, [r4, #12]
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <cleanup_stdio+0x3c>)
 8006d52:	4299      	cmp	r1, r3
 8006d54:	d004      	beq.n	8006d60 <cleanup_stdio+0x30>
 8006d56:	4620      	mov	r0, r4
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f000 bca4 	b.w	80076a8 <_fflush_r>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	20025c3c 	.word	0x20025c3c
 8006d68:	20025ca4 	.word	0x20025ca4
 8006d6c:	20025d0c 	.word	0x20025d0c

08006d70 <global_stdio_init.part.0>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4b0b      	ldr	r3, [pc, #44]	@ (8006da0 <global_stdio_init.part.0+0x30>)
 8006d74:	4c0b      	ldr	r4, [pc, #44]	@ (8006da4 <global_stdio_init.part.0+0x34>)
 8006d76:	4a0c      	ldr	r2, [pc, #48]	@ (8006da8 <global_stdio_init.part.0+0x38>)
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2104      	movs	r1, #4
 8006d80:	f7ff ff94 	bl	8006cac <std>
 8006d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d88:	2201      	movs	r2, #1
 8006d8a:	2109      	movs	r1, #9
 8006d8c:	f7ff ff8e 	bl	8006cac <std>
 8006d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d94:	2202      	movs	r2, #2
 8006d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9a:	2112      	movs	r1, #18
 8006d9c:	f7ff bf86 	b.w	8006cac <std>
 8006da0:	20025d74 	.word	0x20025d74
 8006da4:	20025c3c 	.word	0x20025c3c
 8006da8:	08006d19 	.word	0x08006d19

08006dac <__sfp_lock_acquire>:
 8006dac:	4801      	ldr	r0, [pc, #4]	@ (8006db4 <__sfp_lock_acquire+0x8>)
 8006dae:	f000 b884 	b.w	8006eba <__retarget_lock_acquire_recursive>
 8006db2:	bf00      	nop
 8006db4:	20025d79 	.word	0x20025d79

08006db8 <__sfp_lock_release>:
 8006db8:	4801      	ldr	r0, [pc, #4]	@ (8006dc0 <__sfp_lock_release+0x8>)
 8006dba:	f000 b87f 	b.w	8006ebc <__retarget_lock_release_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20025d79 	.word	0x20025d79

08006dc4 <__sinit>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	f7ff fff0 	bl	8006dac <__sfp_lock_acquire>
 8006dcc:	6a23      	ldr	r3, [r4, #32]
 8006dce:	b11b      	cbz	r3, 8006dd8 <__sinit+0x14>
 8006dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd4:	f7ff bff0 	b.w	8006db8 <__sfp_lock_release>
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__sinit+0x28>)
 8006dda:	6223      	str	r3, [r4, #32]
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <__sinit+0x2c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f5      	bne.n	8006dd0 <__sinit+0xc>
 8006de4:	f7ff ffc4 	bl	8006d70 <global_stdio_init.part.0>
 8006de8:	e7f2      	b.n	8006dd0 <__sinit+0xc>
 8006dea:	bf00      	nop
 8006dec:	08006d31 	.word	0x08006d31
 8006df0:	20025d74 	.word	0x20025d74

08006df4 <_fwalk_sglue>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	4607      	mov	r7, r0
 8006dfa:	4688      	mov	r8, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	2600      	movs	r6, #0
 8006e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e04:	f1b9 0901 	subs.w	r9, r9, #1
 8006e08:	d505      	bpl.n	8006e16 <_fwalk_sglue+0x22>
 8006e0a:	6824      	ldr	r4, [r4, #0]
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	d1f7      	bne.n	8006e00 <_fwalk_sglue+0xc>
 8006e10:	4630      	mov	r0, r6
 8006e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e16:	89ab      	ldrh	r3, [r5, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d907      	bls.n	8006e2c <_fwalk_sglue+0x38>
 8006e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e20:	3301      	adds	r3, #1
 8006e22:	d003      	beq.n	8006e2c <_fwalk_sglue+0x38>
 8006e24:	4629      	mov	r1, r5
 8006e26:	4638      	mov	r0, r7
 8006e28:	47c0      	blx	r8
 8006e2a:	4306      	orrs	r6, r0
 8006e2c:	3568      	adds	r5, #104	@ 0x68
 8006e2e:	e7e9      	b.n	8006e04 <_fwalk_sglue+0x10>

08006e30 <iprintf>:
 8006e30:	b40f      	push	{r0, r1, r2, r3}
 8006e32:	b507      	push	{r0, r1, r2, lr}
 8006e34:	4906      	ldr	r1, [pc, #24]	@ (8006e50 <iprintf+0x20>)
 8006e36:	ab04      	add	r3, sp, #16
 8006e38:	6808      	ldr	r0, [r1, #0]
 8006e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3e:	6881      	ldr	r1, [r0, #8]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	f000 f865 	bl	8006f10 <_vfiprintf_r>
 8006e46:	b003      	add	sp, #12
 8006e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e4c:	b004      	add	sp, #16
 8006e4e:	4770      	bx	lr
 8006e50:	20000038 	.word	0x20000038

08006e54 <memset>:
 8006e54:	4402      	add	r2, r0
 8006e56:	4603      	mov	r3, r0
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d100      	bne.n	8006e5e <memset+0xa>
 8006e5c:	4770      	bx	lr
 8006e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e62:	e7f9      	b.n	8006e58 <memset+0x4>

08006e64 <__errno>:
 8006e64:	4b01      	ldr	r3, [pc, #4]	@ (8006e6c <__errno+0x8>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000038 	.word	0x20000038

08006e70 <__libc_init_array>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4d0d      	ldr	r5, [pc, #52]	@ (8006ea8 <__libc_init_array+0x38>)
 8006e74:	4c0d      	ldr	r4, [pc, #52]	@ (8006eac <__libc_init_array+0x3c>)
 8006e76:	1b64      	subs	r4, r4, r5
 8006e78:	10a4      	asrs	r4, r4, #2
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	42a6      	cmp	r6, r4
 8006e7e:	d109      	bne.n	8006e94 <__libc_init_array+0x24>
 8006e80:	4d0b      	ldr	r5, [pc, #44]	@ (8006eb0 <__libc_init_array+0x40>)
 8006e82:	4c0c      	ldr	r4, [pc, #48]	@ (8006eb4 <__libc_init_array+0x44>)
 8006e84:	f000 fe40 	bl	8007b08 <_init>
 8006e88:	1b64      	subs	r4, r4, r5
 8006e8a:	10a4      	asrs	r4, r4, #2
 8006e8c:	2600      	movs	r6, #0
 8006e8e:	42a6      	cmp	r6, r4
 8006e90:	d105      	bne.n	8006e9e <__libc_init_array+0x2e>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e98:	4798      	blx	r3
 8006e9a:	3601      	adds	r6, #1
 8006e9c:	e7ee      	b.n	8006e7c <__libc_init_array+0xc>
 8006e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea2:	4798      	blx	r3
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	e7f2      	b.n	8006e8e <__libc_init_array+0x1e>
 8006ea8:	0800975c 	.word	0x0800975c
 8006eac:	0800975c 	.word	0x0800975c
 8006eb0:	0800975c 	.word	0x0800975c
 8006eb4:	08009760 	.word	0x08009760

08006eb8 <__retarget_lock_init_recursive>:
 8006eb8:	4770      	bx	lr

08006eba <__retarget_lock_acquire_recursive>:
 8006eba:	4770      	bx	lr

08006ebc <__retarget_lock_release_recursive>:
 8006ebc:	4770      	bx	lr

08006ebe <__sfputc_r>:
 8006ebe:	6893      	ldr	r3, [r2, #8]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	b410      	push	{r4}
 8006ec6:	6093      	str	r3, [r2, #8]
 8006ec8:	da08      	bge.n	8006edc <__sfputc_r+0x1e>
 8006eca:	6994      	ldr	r4, [r2, #24]
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	db01      	blt.n	8006ed4 <__sfputc_r+0x16>
 8006ed0:	290a      	cmp	r1, #10
 8006ed2:	d103      	bne.n	8006edc <__sfputc_r+0x1e>
 8006ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed8:	f000 bc5d 	b.w	8007796 <__swbuf_r>
 8006edc:	6813      	ldr	r3, [r2, #0]
 8006ede:	1c58      	adds	r0, r3, #1
 8006ee0:	6010      	str	r0, [r2, #0]
 8006ee2:	7019      	strb	r1, [r3, #0]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <__sfputs_r>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	18d5      	adds	r5, r2, r3
 8006ef6:	42ac      	cmp	r4, r5
 8006ef8:	d101      	bne.n	8006efe <__sfputs_r+0x12>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e007      	b.n	8006f0e <__sfputs_r+0x22>
 8006efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f02:	463a      	mov	r2, r7
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff ffda 	bl	8006ebe <__sfputc_r>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d1f3      	bne.n	8006ef6 <__sfputs_r+0xa>
 8006f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f10 <_vfiprintf_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	460d      	mov	r5, r1
 8006f16:	b09d      	sub	sp, #116	@ 0x74
 8006f18:	4614      	mov	r4, r2
 8006f1a:	4698      	mov	r8, r3
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	b118      	cbz	r0, 8006f28 <_vfiprintf_r+0x18>
 8006f20:	6a03      	ldr	r3, [r0, #32]
 8006f22:	b90b      	cbnz	r3, 8006f28 <_vfiprintf_r+0x18>
 8006f24:	f7ff ff4e 	bl	8006dc4 <__sinit>
 8006f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f2a:	07d9      	lsls	r1, r3, #31
 8006f2c:	d405      	bmi.n	8006f3a <_vfiprintf_r+0x2a>
 8006f2e:	89ab      	ldrh	r3, [r5, #12]
 8006f30:	059a      	lsls	r2, r3, #22
 8006f32:	d402      	bmi.n	8006f3a <_vfiprintf_r+0x2a>
 8006f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f36:	f7ff ffc0 	bl	8006eba <__retarget_lock_acquire_recursive>
 8006f3a:	89ab      	ldrh	r3, [r5, #12]
 8006f3c:	071b      	lsls	r3, r3, #28
 8006f3e:	d501      	bpl.n	8006f44 <_vfiprintf_r+0x34>
 8006f40:	692b      	ldr	r3, [r5, #16]
 8006f42:	b99b      	cbnz	r3, 8006f6c <_vfiprintf_r+0x5c>
 8006f44:	4629      	mov	r1, r5
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 fc64 	bl	8007814 <__swsetup_r>
 8006f4c:	b170      	cbz	r0, 8006f6c <_vfiprintf_r+0x5c>
 8006f4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f50:	07dc      	lsls	r4, r3, #31
 8006f52:	d504      	bpl.n	8006f5e <_vfiprintf_r+0x4e>
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f58:	b01d      	add	sp, #116	@ 0x74
 8006f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	0598      	lsls	r0, r3, #22
 8006f62:	d4f7      	bmi.n	8006f54 <_vfiprintf_r+0x44>
 8006f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f66:	f7ff ffa9 	bl	8006ebc <__retarget_lock_release_recursive>
 8006f6a:	e7f3      	b.n	8006f54 <_vfiprintf_r+0x44>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f70:	2320      	movs	r3, #32
 8006f72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f7a:	2330      	movs	r3, #48	@ 0x30
 8006f7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800712c <_vfiprintf_r+0x21c>
 8006f80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f84:	f04f 0901 	mov.w	r9, #1
 8006f88:	4623      	mov	r3, r4
 8006f8a:	469a      	mov	sl, r3
 8006f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f90:	b10a      	cbz	r2, 8006f96 <_vfiprintf_r+0x86>
 8006f92:	2a25      	cmp	r2, #37	@ 0x25
 8006f94:	d1f9      	bne.n	8006f8a <_vfiprintf_r+0x7a>
 8006f96:	ebba 0b04 	subs.w	fp, sl, r4
 8006f9a:	d00b      	beq.n	8006fb4 <_vfiprintf_r+0xa4>
 8006f9c:	465b      	mov	r3, fp
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f7ff ffa2 	bl	8006eec <__sfputs_r>
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f000 80a7 	beq.w	80070fc <_vfiprintf_r+0x1ec>
 8006fae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fb0:	445a      	add	r2, fp
 8006fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 809f 	beq.w	80070fc <_vfiprintf_r+0x1ec>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fc8:	f10a 0a01 	add.w	sl, sl, #1
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	9307      	str	r3, [sp, #28]
 8006fd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fd6:	4654      	mov	r4, sl
 8006fd8:	2205      	movs	r2, #5
 8006fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fde:	4853      	ldr	r0, [pc, #332]	@ (800712c <_vfiprintf_r+0x21c>)
 8006fe0:	f7f9 f90e 	bl	8000200 <memchr>
 8006fe4:	9a04      	ldr	r2, [sp, #16]
 8006fe6:	b9d8      	cbnz	r0, 8007020 <_vfiprintf_r+0x110>
 8006fe8:	06d1      	lsls	r1, r2, #27
 8006fea:	bf44      	itt	mi
 8006fec:	2320      	movmi	r3, #32
 8006fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ff2:	0713      	lsls	r3, r2, #28
 8006ff4:	bf44      	itt	mi
 8006ff6:	232b      	movmi	r3, #43	@ 0x2b
 8006ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8007000:	2b2a      	cmp	r3, #42	@ 0x2a
 8007002:	d015      	beq.n	8007030 <_vfiprintf_r+0x120>
 8007004:	9a07      	ldr	r2, [sp, #28]
 8007006:	4654      	mov	r4, sl
 8007008:	2000      	movs	r0, #0
 800700a:	f04f 0c0a 	mov.w	ip, #10
 800700e:	4621      	mov	r1, r4
 8007010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007014:	3b30      	subs	r3, #48	@ 0x30
 8007016:	2b09      	cmp	r3, #9
 8007018:	d94b      	bls.n	80070b2 <_vfiprintf_r+0x1a2>
 800701a:	b1b0      	cbz	r0, 800704a <_vfiprintf_r+0x13a>
 800701c:	9207      	str	r2, [sp, #28]
 800701e:	e014      	b.n	800704a <_vfiprintf_r+0x13a>
 8007020:	eba0 0308 	sub.w	r3, r0, r8
 8007024:	fa09 f303 	lsl.w	r3, r9, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	9304      	str	r3, [sp, #16]
 800702c:	46a2      	mov	sl, r4
 800702e:	e7d2      	b.n	8006fd6 <_vfiprintf_r+0xc6>
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	1d19      	adds	r1, r3, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	9103      	str	r1, [sp, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	bfbb      	ittet	lt
 800703c:	425b      	neglt	r3, r3
 800703e:	f042 0202 	orrlt.w	r2, r2, #2
 8007042:	9307      	strge	r3, [sp, #28]
 8007044:	9307      	strlt	r3, [sp, #28]
 8007046:	bfb8      	it	lt
 8007048:	9204      	strlt	r2, [sp, #16]
 800704a:	7823      	ldrb	r3, [r4, #0]
 800704c:	2b2e      	cmp	r3, #46	@ 0x2e
 800704e:	d10a      	bne.n	8007066 <_vfiprintf_r+0x156>
 8007050:	7863      	ldrb	r3, [r4, #1]
 8007052:	2b2a      	cmp	r3, #42	@ 0x2a
 8007054:	d132      	bne.n	80070bc <_vfiprintf_r+0x1ac>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	1d1a      	adds	r2, r3, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	9203      	str	r2, [sp, #12]
 800705e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007062:	3402      	adds	r4, #2
 8007064:	9305      	str	r3, [sp, #20]
 8007066:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800713c <_vfiprintf_r+0x22c>
 800706a:	7821      	ldrb	r1, [r4, #0]
 800706c:	2203      	movs	r2, #3
 800706e:	4650      	mov	r0, sl
 8007070:	f7f9 f8c6 	bl	8000200 <memchr>
 8007074:	b138      	cbz	r0, 8007086 <_vfiprintf_r+0x176>
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	eba0 000a 	sub.w	r0, r0, sl
 800707c:	2240      	movs	r2, #64	@ 0x40
 800707e:	4082      	lsls	r2, r0
 8007080:	4313      	orrs	r3, r2
 8007082:	3401      	adds	r4, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708a:	4829      	ldr	r0, [pc, #164]	@ (8007130 <_vfiprintf_r+0x220>)
 800708c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007090:	2206      	movs	r2, #6
 8007092:	f7f9 f8b5 	bl	8000200 <memchr>
 8007096:	2800      	cmp	r0, #0
 8007098:	d03f      	beq.n	800711a <_vfiprintf_r+0x20a>
 800709a:	4b26      	ldr	r3, [pc, #152]	@ (8007134 <_vfiprintf_r+0x224>)
 800709c:	bb1b      	cbnz	r3, 80070e6 <_vfiprintf_r+0x1d6>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	3307      	adds	r3, #7
 80070a2:	f023 0307 	bic.w	r3, r3, #7
 80070a6:	3308      	adds	r3, #8
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ac:	443b      	add	r3, r7
 80070ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80070b0:	e76a      	b.n	8006f88 <_vfiprintf_r+0x78>
 80070b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070b6:	460c      	mov	r4, r1
 80070b8:	2001      	movs	r0, #1
 80070ba:	e7a8      	b.n	800700e <_vfiprintf_r+0xfe>
 80070bc:	2300      	movs	r3, #0
 80070be:	3401      	adds	r4, #1
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	4619      	mov	r1, r3
 80070c4:	f04f 0c0a 	mov.w	ip, #10
 80070c8:	4620      	mov	r0, r4
 80070ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ce:	3a30      	subs	r2, #48	@ 0x30
 80070d0:	2a09      	cmp	r2, #9
 80070d2:	d903      	bls.n	80070dc <_vfiprintf_r+0x1cc>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0c6      	beq.n	8007066 <_vfiprintf_r+0x156>
 80070d8:	9105      	str	r1, [sp, #20]
 80070da:	e7c4      	b.n	8007066 <_vfiprintf_r+0x156>
 80070dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80070e0:	4604      	mov	r4, r0
 80070e2:	2301      	movs	r3, #1
 80070e4:	e7f0      	b.n	80070c8 <_vfiprintf_r+0x1b8>
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	462a      	mov	r2, r5
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <_vfiprintf_r+0x228>)
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	4630      	mov	r0, r6
 80070f2:	f3af 8000 	nop.w
 80070f6:	4607      	mov	r7, r0
 80070f8:	1c78      	adds	r0, r7, #1
 80070fa:	d1d6      	bne.n	80070aa <_vfiprintf_r+0x19a>
 80070fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070fe:	07d9      	lsls	r1, r3, #31
 8007100:	d405      	bmi.n	800710e <_vfiprintf_r+0x1fe>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d402      	bmi.n	800710e <_vfiprintf_r+0x1fe>
 8007108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800710a:	f7ff fed7 	bl	8006ebc <__retarget_lock_release_recursive>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	065b      	lsls	r3, r3, #25
 8007112:	f53f af1f 	bmi.w	8006f54 <_vfiprintf_r+0x44>
 8007116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007118:	e71e      	b.n	8006f58 <_vfiprintf_r+0x48>
 800711a:	ab03      	add	r3, sp, #12
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	462a      	mov	r2, r5
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <_vfiprintf_r+0x228>)
 8007122:	a904      	add	r1, sp, #16
 8007124:	4630      	mov	r0, r6
 8007126:	f000 f91b 	bl	8007360 <_printf_i>
 800712a:	e7e4      	b.n	80070f6 <_vfiprintf_r+0x1e6>
 800712c:	0800971e 	.word	0x0800971e
 8007130:	08009728 	.word	0x08009728
 8007134:	00000000 	.word	0x00000000
 8007138:	08006eed 	.word	0x08006eed
 800713c:	08009724 	.word	0x08009724

08007140 <sbrk_aligned>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	4e0f      	ldr	r6, [pc, #60]	@ (8007180 <sbrk_aligned+0x40>)
 8007144:	460c      	mov	r4, r1
 8007146:	6831      	ldr	r1, [r6, #0]
 8007148:	4605      	mov	r5, r0
 800714a:	b911      	cbnz	r1, 8007152 <sbrk_aligned+0x12>
 800714c:	f000 fc70 	bl	8007a30 <_sbrk_r>
 8007150:	6030      	str	r0, [r6, #0]
 8007152:	4621      	mov	r1, r4
 8007154:	4628      	mov	r0, r5
 8007156:	f000 fc6b 	bl	8007a30 <_sbrk_r>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d103      	bne.n	8007166 <sbrk_aligned+0x26>
 800715e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007162:	4620      	mov	r0, r4
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d0f8      	beq.n	8007162 <sbrk_aligned+0x22>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fc5c 	bl	8007a30 <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d1f2      	bne.n	8007162 <sbrk_aligned+0x22>
 800717c:	e7ef      	b.n	800715e <sbrk_aligned+0x1e>
 800717e:	bf00      	nop
 8007180:	20025d7c 	.word	0x20025d7c

08007184 <_malloc_r>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	1ccd      	adds	r5, r1, #3
 800718a:	f025 0503 	bic.w	r5, r5, #3
 800718e:	3508      	adds	r5, #8
 8007190:	2d0c      	cmp	r5, #12
 8007192:	bf38      	it	cc
 8007194:	250c      	movcc	r5, #12
 8007196:	2d00      	cmp	r5, #0
 8007198:	4606      	mov	r6, r0
 800719a:	db01      	blt.n	80071a0 <_malloc_r+0x1c>
 800719c:	42a9      	cmp	r1, r5
 800719e:	d904      	bls.n	80071aa <_malloc_r+0x26>
 80071a0:	230c      	movs	r3, #12
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007280 <_malloc_r+0xfc>
 80071ae:	f000 faa3 	bl	80076f8 <__malloc_lock>
 80071b2:	f8d8 3000 	ldr.w	r3, [r8]
 80071b6:	461c      	mov	r4, r3
 80071b8:	bb44      	cbnz	r4, 800720c <_malloc_r+0x88>
 80071ba:	4629      	mov	r1, r5
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ffbf 	bl	8007140 <sbrk_aligned>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	4604      	mov	r4, r0
 80071c6:	d158      	bne.n	800727a <_malloc_r+0xf6>
 80071c8:	f8d8 4000 	ldr.w	r4, [r8]
 80071cc:	4627      	mov	r7, r4
 80071ce:	2f00      	cmp	r7, #0
 80071d0:	d143      	bne.n	800725a <_malloc_r+0xd6>
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d04b      	beq.n	800726e <_malloc_r+0xea>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	eb04 0903 	add.w	r9, r4, r3
 80071e0:	f000 fc26 	bl	8007a30 <_sbrk_r>
 80071e4:	4581      	cmp	r9, r0
 80071e6:	d142      	bne.n	800726e <_malloc_r+0xea>
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	1a6d      	subs	r5, r5, r1
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ffa6 	bl	8007140 <sbrk_aligned>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d03a      	beq.n	800726e <_malloc_r+0xea>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	442b      	add	r3, r5
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	bb62      	cbnz	r2, 8007260 <_malloc_r+0xdc>
 8007206:	f8c8 7000 	str.w	r7, [r8]
 800720a:	e00f      	b.n	800722c <_malloc_r+0xa8>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	1b52      	subs	r2, r2, r5
 8007210:	d420      	bmi.n	8007254 <_malloc_r+0xd0>
 8007212:	2a0b      	cmp	r2, #11
 8007214:	d917      	bls.n	8007246 <_malloc_r+0xc2>
 8007216:	1961      	adds	r1, r4, r5
 8007218:	42a3      	cmp	r3, r4
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	bf18      	it	ne
 800721e:	6059      	strne	r1, [r3, #4]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	bf08      	it	eq
 8007224:	f8c8 1000 	streq.w	r1, [r8]
 8007228:	5162      	str	r2, [r4, r5]
 800722a:	604b      	str	r3, [r1, #4]
 800722c:	4630      	mov	r0, r6
 800722e:	f000 fa69 	bl	8007704 <__malloc_unlock>
 8007232:	f104 000b 	add.w	r0, r4, #11
 8007236:	1d23      	adds	r3, r4, #4
 8007238:	f020 0007 	bic.w	r0, r0, #7
 800723c:	1ac2      	subs	r2, r0, r3
 800723e:	bf1c      	itt	ne
 8007240:	1a1b      	subne	r3, r3, r0
 8007242:	50a3      	strne	r3, [r4, r2]
 8007244:	e7af      	b.n	80071a6 <_malloc_r+0x22>
 8007246:	6862      	ldr	r2, [r4, #4]
 8007248:	42a3      	cmp	r3, r4
 800724a:	bf0c      	ite	eq
 800724c:	f8c8 2000 	streq.w	r2, [r8]
 8007250:	605a      	strne	r2, [r3, #4]
 8007252:	e7eb      	b.n	800722c <_malloc_r+0xa8>
 8007254:	4623      	mov	r3, r4
 8007256:	6864      	ldr	r4, [r4, #4]
 8007258:	e7ae      	b.n	80071b8 <_malloc_r+0x34>
 800725a:	463c      	mov	r4, r7
 800725c:	687f      	ldr	r7, [r7, #4]
 800725e:	e7b6      	b.n	80071ce <_malloc_r+0x4a>
 8007260:	461a      	mov	r2, r3
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	42a3      	cmp	r3, r4
 8007266:	d1fb      	bne.n	8007260 <_malloc_r+0xdc>
 8007268:	2300      	movs	r3, #0
 800726a:	6053      	str	r3, [r2, #4]
 800726c:	e7de      	b.n	800722c <_malloc_r+0xa8>
 800726e:	230c      	movs	r3, #12
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	4630      	mov	r0, r6
 8007274:	f000 fa46 	bl	8007704 <__malloc_unlock>
 8007278:	e794      	b.n	80071a4 <_malloc_r+0x20>
 800727a:	6005      	str	r5, [r0, #0]
 800727c:	e7d6      	b.n	800722c <_malloc_r+0xa8>
 800727e:	bf00      	nop
 8007280:	20025d80 	.word	0x20025d80

08007284 <_printf_common>:
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	4616      	mov	r6, r2
 800728a:	4698      	mov	r8, r3
 800728c:	688a      	ldr	r2, [r1, #8]
 800728e:	690b      	ldr	r3, [r1, #16]
 8007290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007294:	4293      	cmp	r3, r2
 8007296:	bfb8      	it	lt
 8007298:	4613      	movlt	r3, r2
 800729a:	6033      	str	r3, [r6, #0]
 800729c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072a0:	4607      	mov	r7, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	b10a      	cbz	r2, 80072aa <_printf_common+0x26>
 80072a6:	3301      	adds	r3, #1
 80072a8:	6033      	str	r3, [r6, #0]
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	0699      	lsls	r1, r3, #26
 80072ae:	bf42      	ittt	mi
 80072b0:	6833      	ldrmi	r3, [r6, #0]
 80072b2:	3302      	addmi	r3, #2
 80072b4:	6033      	strmi	r3, [r6, #0]
 80072b6:	6825      	ldr	r5, [r4, #0]
 80072b8:	f015 0506 	ands.w	r5, r5, #6
 80072bc:	d106      	bne.n	80072cc <_printf_common+0x48>
 80072be:	f104 0a19 	add.w	sl, r4, #25
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	6832      	ldr	r2, [r6, #0]
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	dc26      	bgt.n	800731a <_printf_common+0x96>
 80072cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	3b00      	subs	r3, #0
 80072d4:	bf18      	it	ne
 80072d6:	2301      	movne	r3, #1
 80072d8:	0692      	lsls	r2, r2, #26
 80072da:	d42b      	bmi.n	8007334 <_printf_common+0xb0>
 80072dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072e0:	4641      	mov	r1, r8
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c8      	blx	r9
 80072e6:	3001      	adds	r0, #1
 80072e8:	d01e      	beq.n	8007328 <_printf_common+0xa4>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	f003 0306 	and.w	r3, r3, #6
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	bf02      	ittt	eq
 80072f6:	68e5      	ldreq	r5, [r4, #12]
 80072f8:	6833      	ldreq	r3, [r6, #0]
 80072fa:	1aed      	subeq	r5, r5, r3
 80072fc:	68a3      	ldr	r3, [r4, #8]
 80072fe:	bf0c      	ite	eq
 8007300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007304:	2500      	movne	r5, #0
 8007306:	4293      	cmp	r3, r2
 8007308:	bfc4      	itt	gt
 800730a:	1a9b      	subgt	r3, r3, r2
 800730c:	18ed      	addgt	r5, r5, r3
 800730e:	2600      	movs	r6, #0
 8007310:	341a      	adds	r4, #26
 8007312:	42b5      	cmp	r5, r6
 8007314:	d11a      	bne.n	800734c <_printf_common+0xc8>
 8007316:	2000      	movs	r0, #0
 8007318:	e008      	b.n	800732c <_printf_common+0xa8>
 800731a:	2301      	movs	r3, #1
 800731c:	4652      	mov	r2, sl
 800731e:	4641      	mov	r1, r8
 8007320:	4638      	mov	r0, r7
 8007322:	47c8      	blx	r9
 8007324:	3001      	adds	r0, #1
 8007326:	d103      	bne.n	8007330 <_printf_common+0xac>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	3501      	adds	r5, #1
 8007332:	e7c6      	b.n	80072c2 <_printf_common+0x3e>
 8007334:	18e1      	adds	r1, r4, r3
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	2030      	movs	r0, #48	@ 0x30
 800733a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800733e:	4422      	add	r2, r4
 8007340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007348:	3302      	adds	r3, #2
 800734a:	e7c7      	b.n	80072dc <_printf_common+0x58>
 800734c:	2301      	movs	r3, #1
 800734e:	4622      	mov	r2, r4
 8007350:	4641      	mov	r1, r8
 8007352:	4638      	mov	r0, r7
 8007354:	47c8      	blx	r9
 8007356:	3001      	adds	r0, #1
 8007358:	d0e6      	beq.n	8007328 <_printf_common+0xa4>
 800735a:	3601      	adds	r6, #1
 800735c:	e7d9      	b.n	8007312 <_printf_common+0x8e>
	...

08007360 <_printf_i>:
 8007360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	7e0f      	ldrb	r7, [r1, #24]
 8007366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007368:	2f78      	cmp	r7, #120	@ 0x78
 800736a:	4691      	mov	r9, r2
 800736c:	4680      	mov	r8, r0
 800736e:	460c      	mov	r4, r1
 8007370:	469a      	mov	sl, r3
 8007372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007376:	d807      	bhi.n	8007388 <_printf_i+0x28>
 8007378:	2f62      	cmp	r7, #98	@ 0x62
 800737a:	d80a      	bhi.n	8007392 <_printf_i+0x32>
 800737c:	2f00      	cmp	r7, #0
 800737e:	f000 80d2 	beq.w	8007526 <_printf_i+0x1c6>
 8007382:	2f58      	cmp	r7, #88	@ 0x58
 8007384:	f000 80b9 	beq.w	80074fa <_printf_i+0x19a>
 8007388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800738c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007390:	e03a      	b.n	8007408 <_printf_i+0xa8>
 8007392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007396:	2b15      	cmp	r3, #21
 8007398:	d8f6      	bhi.n	8007388 <_printf_i+0x28>
 800739a:	a101      	add	r1, pc, #4	@ (adr r1, 80073a0 <_printf_i+0x40>)
 800739c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073a0:	080073f9 	.word	0x080073f9
 80073a4:	0800740d 	.word	0x0800740d
 80073a8:	08007389 	.word	0x08007389
 80073ac:	08007389 	.word	0x08007389
 80073b0:	08007389 	.word	0x08007389
 80073b4:	08007389 	.word	0x08007389
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007389 	.word	0x08007389
 80073c0:	08007389 	.word	0x08007389
 80073c4:	08007389 	.word	0x08007389
 80073c8:	08007389 	.word	0x08007389
 80073cc:	0800750d 	.word	0x0800750d
 80073d0:	08007437 	.word	0x08007437
 80073d4:	080074c7 	.word	0x080074c7
 80073d8:	08007389 	.word	0x08007389
 80073dc:	08007389 	.word	0x08007389
 80073e0:	0800752f 	.word	0x0800752f
 80073e4:	08007389 	.word	0x08007389
 80073e8:	08007437 	.word	0x08007437
 80073ec:	08007389 	.word	0x08007389
 80073f0:	08007389 	.word	0x08007389
 80073f4:	080074cf 	.word	0x080074cf
 80073f8:	6833      	ldr	r3, [r6, #0]
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6032      	str	r2, [r6, #0]
 8007400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007408:	2301      	movs	r3, #1
 800740a:	e09d      	b.n	8007548 <_printf_i+0x1e8>
 800740c:	6833      	ldr	r3, [r6, #0]
 800740e:	6820      	ldr	r0, [r4, #0]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	6031      	str	r1, [r6, #0]
 8007414:	0606      	lsls	r6, r0, #24
 8007416:	d501      	bpl.n	800741c <_printf_i+0xbc>
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	e003      	b.n	8007424 <_printf_i+0xc4>
 800741c:	0645      	lsls	r5, r0, #25
 800741e:	d5fb      	bpl.n	8007418 <_printf_i+0xb8>
 8007420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007424:	2d00      	cmp	r5, #0
 8007426:	da03      	bge.n	8007430 <_printf_i+0xd0>
 8007428:	232d      	movs	r3, #45	@ 0x2d
 800742a:	426d      	negs	r5, r5
 800742c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007430:	4859      	ldr	r0, [pc, #356]	@ (8007598 <_printf_i+0x238>)
 8007432:	230a      	movs	r3, #10
 8007434:	e011      	b.n	800745a <_printf_i+0xfa>
 8007436:	6821      	ldr	r1, [r4, #0]
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	0608      	lsls	r0, r1, #24
 800743c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007440:	d402      	bmi.n	8007448 <_printf_i+0xe8>
 8007442:	0649      	lsls	r1, r1, #25
 8007444:	bf48      	it	mi
 8007446:	b2ad      	uxthmi	r5, r5
 8007448:	2f6f      	cmp	r7, #111	@ 0x6f
 800744a:	4853      	ldr	r0, [pc, #332]	@ (8007598 <_printf_i+0x238>)
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	bf14      	ite	ne
 8007450:	230a      	movne	r3, #10
 8007452:	2308      	moveq	r3, #8
 8007454:	2100      	movs	r1, #0
 8007456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800745a:	6866      	ldr	r6, [r4, #4]
 800745c:	60a6      	str	r6, [r4, #8]
 800745e:	2e00      	cmp	r6, #0
 8007460:	bfa2      	ittt	ge
 8007462:	6821      	ldrge	r1, [r4, #0]
 8007464:	f021 0104 	bicge.w	r1, r1, #4
 8007468:	6021      	strge	r1, [r4, #0]
 800746a:	b90d      	cbnz	r5, 8007470 <_printf_i+0x110>
 800746c:	2e00      	cmp	r6, #0
 800746e:	d04b      	beq.n	8007508 <_printf_i+0x1a8>
 8007470:	4616      	mov	r6, r2
 8007472:	fbb5 f1f3 	udiv	r1, r5, r3
 8007476:	fb03 5711 	mls	r7, r3, r1, r5
 800747a:	5dc7      	ldrb	r7, [r0, r7]
 800747c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007480:	462f      	mov	r7, r5
 8007482:	42bb      	cmp	r3, r7
 8007484:	460d      	mov	r5, r1
 8007486:	d9f4      	bls.n	8007472 <_printf_i+0x112>
 8007488:	2b08      	cmp	r3, #8
 800748a:	d10b      	bne.n	80074a4 <_printf_i+0x144>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	07df      	lsls	r7, r3, #31
 8007490:	d508      	bpl.n	80074a4 <_printf_i+0x144>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	6861      	ldr	r1, [r4, #4]
 8007496:	4299      	cmp	r1, r3
 8007498:	bfde      	ittt	le
 800749a:	2330      	movle	r3, #48	@ 0x30
 800749c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80074a4:	1b92      	subs	r2, r2, r6
 80074a6:	6122      	str	r2, [r4, #16]
 80074a8:	f8cd a000 	str.w	sl, [sp]
 80074ac:	464b      	mov	r3, r9
 80074ae:	aa03      	add	r2, sp, #12
 80074b0:	4621      	mov	r1, r4
 80074b2:	4640      	mov	r0, r8
 80074b4:	f7ff fee6 	bl	8007284 <_printf_common>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d14a      	bne.n	8007552 <_printf_i+0x1f2>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074c0:	b004      	add	sp, #16
 80074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	4833      	ldr	r0, [pc, #204]	@ (800759c <_printf_i+0x23c>)
 80074d0:	2778      	movs	r7, #120	@ 0x78
 80074d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	6831      	ldr	r1, [r6, #0]
 80074da:	061f      	lsls	r7, r3, #24
 80074dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80074e0:	d402      	bmi.n	80074e8 <_printf_i+0x188>
 80074e2:	065f      	lsls	r7, r3, #25
 80074e4:	bf48      	it	mi
 80074e6:	b2ad      	uxthmi	r5, r5
 80074e8:	6031      	str	r1, [r6, #0]
 80074ea:	07d9      	lsls	r1, r3, #31
 80074ec:	bf44      	itt	mi
 80074ee:	f043 0320 	orrmi.w	r3, r3, #32
 80074f2:	6023      	strmi	r3, [r4, #0]
 80074f4:	b11d      	cbz	r5, 80074fe <_printf_i+0x19e>
 80074f6:	2310      	movs	r3, #16
 80074f8:	e7ac      	b.n	8007454 <_printf_i+0xf4>
 80074fa:	4827      	ldr	r0, [pc, #156]	@ (8007598 <_printf_i+0x238>)
 80074fc:	e7e9      	b.n	80074d2 <_printf_i+0x172>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f023 0320 	bic.w	r3, r3, #32
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	e7f6      	b.n	80074f6 <_printf_i+0x196>
 8007508:	4616      	mov	r6, r2
 800750a:	e7bd      	b.n	8007488 <_printf_i+0x128>
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	6825      	ldr	r5, [r4, #0]
 8007510:	6961      	ldr	r1, [r4, #20]
 8007512:	1d18      	adds	r0, r3, #4
 8007514:	6030      	str	r0, [r6, #0]
 8007516:	062e      	lsls	r6, r5, #24
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	d501      	bpl.n	8007520 <_printf_i+0x1c0>
 800751c:	6019      	str	r1, [r3, #0]
 800751e:	e002      	b.n	8007526 <_printf_i+0x1c6>
 8007520:	0668      	lsls	r0, r5, #25
 8007522:	d5fb      	bpl.n	800751c <_printf_i+0x1bc>
 8007524:	8019      	strh	r1, [r3, #0]
 8007526:	2300      	movs	r3, #0
 8007528:	6123      	str	r3, [r4, #16]
 800752a:	4616      	mov	r6, r2
 800752c:	e7bc      	b.n	80074a8 <_printf_i+0x148>
 800752e:	6833      	ldr	r3, [r6, #0]
 8007530:	1d1a      	adds	r2, r3, #4
 8007532:	6032      	str	r2, [r6, #0]
 8007534:	681e      	ldr	r6, [r3, #0]
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	2100      	movs	r1, #0
 800753a:	4630      	mov	r0, r6
 800753c:	f7f8 fe60 	bl	8000200 <memchr>
 8007540:	b108      	cbz	r0, 8007546 <_printf_i+0x1e6>
 8007542:	1b80      	subs	r0, r0, r6
 8007544:	6060      	str	r0, [r4, #4]
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	6123      	str	r3, [r4, #16]
 800754a:	2300      	movs	r3, #0
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007550:	e7aa      	b.n	80074a8 <_printf_i+0x148>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	4632      	mov	r2, r6
 8007556:	4649      	mov	r1, r9
 8007558:	4640      	mov	r0, r8
 800755a:	47d0      	blx	sl
 800755c:	3001      	adds	r0, #1
 800755e:	d0ad      	beq.n	80074bc <_printf_i+0x15c>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	079b      	lsls	r3, r3, #30
 8007564:	d413      	bmi.n	800758e <_printf_i+0x22e>
 8007566:	68e0      	ldr	r0, [r4, #12]
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	4298      	cmp	r0, r3
 800756c:	bfb8      	it	lt
 800756e:	4618      	movlt	r0, r3
 8007570:	e7a6      	b.n	80074c0 <_printf_i+0x160>
 8007572:	2301      	movs	r3, #1
 8007574:	4632      	mov	r2, r6
 8007576:	4649      	mov	r1, r9
 8007578:	4640      	mov	r0, r8
 800757a:	47d0      	blx	sl
 800757c:	3001      	adds	r0, #1
 800757e:	d09d      	beq.n	80074bc <_printf_i+0x15c>
 8007580:	3501      	adds	r5, #1
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	9903      	ldr	r1, [sp, #12]
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	42ab      	cmp	r3, r5
 800758a:	dcf2      	bgt.n	8007572 <_printf_i+0x212>
 800758c:	e7eb      	b.n	8007566 <_printf_i+0x206>
 800758e:	2500      	movs	r5, #0
 8007590:	f104 0619 	add.w	r6, r4, #25
 8007594:	e7f5      	b.n	8007582 <_printf_i+0x222>
 8007596:	bf00      	nop
 8007598:	0800972f 	.word	0x0800972f
 800759c:	08009740 	.word	0x08009740

080075a0 <__sflush_r>:
 80075a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	0716      	lsls	r6, r2, #28
 80075aa:	4605      	mov	r5, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	d454      	bmi.n	800765a <__sflush_r+0xba>
 80075b0:	684b      	ldr	r3, [r1, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc02      	bgt.n	80075bc <__sflush_r+0x1c>
 80075b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dd48      	ble.n	800764e <__sflush_r+0xae>
 80075bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075be:	2e00      	cmp	r6, #0
 80075c0:	d045      	beq.n	800764e <__sflush_r+0xae>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075c8:	682f      	ldr	r7, [r5, #0]
 80075ca:	6a21      	ldr	r1, [r4, #32]
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	d030      	beq.n	8007632 <__sflush_r+0x92>
 80075d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	0759      	lsls	r1, r3, #29
 80075d6:	d505      	bpl.n	80075e4 <__sflush_r+0x44>
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075de:	b10b      	cbz	r3, 80075e4 <__sflush_r+0x44>
 80075e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e8:	6a21      	ldr	r1, [r4, #32]
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b0      	blx	r6
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	d106      	bne.n	8007602 <__sflush_r+0x62>
 80075f4:	6829      	ldr	r1, [r5, #0]
 80075f6:	291d      	cmp	r1, #29
 80075f8:	d82b      	bhi.n	8007652 <__sflush_r+0xb2>
 80075fa:	4a2a      	ldr	r2, [pc, #168]	@ (80076a4 <__sflush_r+0x104>)
 80075fc:	410a      	asrs	r2, r1
 80075fe:	07d6      	lsls	r6, r2, #31
 8007600:	d427      	bmi.n	8007652 <__sflush_r+0xb2>
 8007602:	2200      	movs	r2, #0
 8007604:	6062      	str	r2, [r4, #4]
 8007606:	04d9      	lsls	r1, r3, #19
 8007608:	6922      	ldr	r2, [r4, #16]
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	d504      	bpl.n	8007618 <__sflush_r+0x78>
 800760e:	1c42      	adds	r2, r0, #1
 8007610:	d101      	bne.n	8007616 <__sflush_r+0x76>
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	b903      	cbnz	r3, 8007618 <__sflush_r+0x78>
 8007616:	6560      	str	r0, [r4, #84]	@ 0x54
 8007618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800761a:	602f      	str	r7, [r5, #0]
 800761c:	b1b9      	cbz	r1, 800764e <__sflush_r+0xae>
 800761e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007622:	4299      	cmp	r1, r3
 8007624:	d002      	beq.n	800762c <__sflush_r+0x8c>
 8007626:	4628      	mov	r0, r5
 8007628:	f000 fa24 	bl	8007a74 <_free_r>
 800762c:	2300      	movs	r3, #0
 800762e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007630:	e00d      	b.n	800764e <__sflush_r+0xae>
 8007632:	2301      	movs	r3, #1
 8007634:	4628      	mov	r0, r5
 8007636:	47b0      	blx	r6
 8007638:	4602      	mov	r2, r0
 800763a:	1c50      	adds	r0, r2, #1
 800763c:	d1c9      	bne.n	80075d2 <__sflush_r+0x32>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0c6      	beq.n	80075d2 <__sflush_r+0x32>
 8007644:	2b1d      	cmp	r3, #29
 8007646:	d001      	beq.n	800764c <__sflush_r+0xac>
 8007648:	2b16      	cmp	r3, #22
 800764a:	d11e      	bne.n	800768a <__sflush_r+0xea>
 800764c:	602f      	str	r7, [r5, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	e022      	b.n	8007698 <__sflush_r+0xf8>
 8007652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007656:	b21b      	sxth	r3, r3
 8007658:	e01b      	b.n	8007692 <__sflush_r+0xf2>
 800765a:	690f      	ldr	r7, [r1, #16]
 800765c:	2f00      	cmp	r7, #0
 800765e:	d0f6      	beq.n	800764e <__sflush_r+0xae>
 8007660:	0793      	lsls	r3, r2, #30
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	bf08      	it	eq
 8007666:	694b      	ldreq	r3, [r1, #20]
 8007668:	600f      	str	r7, [r1, #0]
 800766a:	bf18      	it	ne
 800766c:	2300      	movne	r3, #0
 800766e:	eba6 0807 	sub.w	r8, r6, r7
 8007672:	608b      	str	r3, [r1, #8]
 8007674:	f1b8 0f00 	cmp.w	r8, #0
 8007678:	dde9      	ble.n	800764e <__sflush_r+0xae>
 800767a:	6a21      	ldr	r1, [r4, #32]
 800767c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800767e:	4643      	mov	r3, r8
 8007680:	463a      	mov	r2, r7
 8007682:	4628      	mov	r0, r5
 8007684:	47b0      	blx	r6
 8007686:	2800      	cmp	r0, #0
 8007688:	dc08      	bgt.n	800769c <__sflush_r+0xfc>
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	4407      	add	r7, r0
 800769e:	eba8 0800 	sub.w	r8, r8, r0
 80076a2:	e7e7      	b.n	8007674 <__sflush_r+0xd4>
 80076a4:	dfbffffe 	.word	0xdfbffffe

080076a8 <_fflush_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	690b      	ldr	r3, [r1, #16]
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b913      	cbnz	r3, 80076b8 <_fflush_r+0x10>
 80076b2:	2500      	movs	r5, #0
 80076b4:	4628      	mov	r0, r5
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	b118      	cbz	r0, 80076c2 <_fflush_r+0x1a>
 80076ba:	6a03      	ldr	r3, [r0, #32]
 80076bc:	b90b      	cbnz	r3, 80076c2 <_fflush_r+0x1a>
 80076be:	f7ff fb81 	bl	8006dc4 <__sinit>
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f3      	beq.n	80076b2 <_fflush_r+0xa>
 80076ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076cc:	07d0      	lsls	r0, r2, #31
 80076ce:	d404      	bmi.n	80076da <_fflush_r+0x32>
 80076d0:	0599      	lsls	r1, r3, #22
 80076d2:	d402      	bmi.n	80076da <_fflush_r+0x32>
 80076d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d6:	f7ff fbf0 	bl	8006eba <__retarget_lock_acquire_recursive>
 80076da:	4628      	mov	r0, r5
 80076dc:	4621      	mov	r1, r4
 80076de:	f7ff ff5f 	bl	80075a0 <__sflush_r>
 80076e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076e4:	07da      	lsls	r2, r3, #31
 80076e6:	4605      	mov	r5, r0
 80076e8:	d4e4      	bmi.n	80076b4 <_fflush_r+0xc>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	059b      	lsls	r3, r3, #22
 80076ee:	d4e1      	bmi.n	80076b4 <_fflush_r+0xc>
 80076f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076f2:	f7ff fbe3 	bl	8006ebc <__retarget_lock_release_recursive>
 80076f6:	e7dd      	b.n	80076b4 <_fflush_r+0xc>

080076f8 <__malloc_lock>:
 80076f8:	4801      	ldr	r0, [pc, #4]	@ (8007700 <__malloc_lock+0x8>)
 80076fa:	f7ff bbde 	b.w	8006eba <__retarget_lock_acquire_recursive>
 80076fe:	bf00      	nop
 8007700:	20025d78 	.word	0x20025d78

08007704 <__malloc_unlock>:
 8007704:	4801      	ldr	r0, [pc, #4]	@ (800770c <__malloc_unlock+0x8>)
 8007706:	f7ff bbd9 	b.w	8006ebc <__retarget_lock_release_recursive>
 800770a:	bf00      	nop
 800770c:	20025d78 	.word	0x20025d78

08007710 <__sread>:
 8007710:	b510      	push	{r4, lr}
 8007712:	460c      	mov	r4, r1
 8007714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007718:	f000 f978 	bl	8007a0c <_read_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	bfab      	itete	ge
 8007720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007722:	89a3      	ldrhlt	r3, [r4, #12]
 8007724:	181b      	addge	r3, r3, r0
 8007726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800772a:	bfac      	ite	ge
 800772c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800772e:	81a3      	strhlt	r3, [r4, #12]
 8007730:	bd10      	pop	{r4, pc}

08007732 <__swrite>:
 8007732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007736:	461f      	mov	r7, r3
 8007738:	898b      	ldrh	r3, [r1, #12]
 800773a:	05db      	lsls	r3, r3, #23
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
 8007740:	4616      	mov	r6, r2
 8007742:	d505      	bpl.n	8007750 <__swrite+0x1e>
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	2302      	movs	r3, #2
 800774a:	2200      	movs	r2, #0
 800774c:	f000 f94c 	bl	80079e8 <_lseek_r>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	4632      	mov	r2, r6
 800775e:	463b      	mov	r3, r7
 8007760:	4628      	mov	r0, r5
 8007762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	f000 b973 	b.w	8007a50 <_write_r>

0800776a <__sseek>:
 800776a:	b510      	push	{r4, lr}
 800776c:	460c      	mov	r4, r1
 800776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007772:	f000 f939 	bl	80079e8 <_lseek_r>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	bf15      	itete	ne
 800777c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800777e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007786:	81a3      	strheq	r3, [r4, #12]
 8007788:	bf18      	it	ne
 800778a:	81a3      	strhne	r3, [r4, #12]
 800778c:	bd10      	pop	{r4, pc}

0800778e <__sclose>:
 800778e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007792:	f000 b8f7 	b.w	8007984 <_close_r>

08007796 <__swbuf_r>:
 8007796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007798:	460e      	mov	r6, r1
 800779a:	4614      	mov	r4, r2
 800779c:	4605      	mov	r5, r0
 800779e:	b118      	cbz	r0, 80077a8 <__swbuf_r+0x12>
 80077a0:	6a03      	ldr	r3, [r0, #32]
 80077a2:	b90b      	cbnz	r3, 80077a8 <__swbuf_r+0x12>
 80077a4:	f7ff fb0e 	bl	8006dc4 <__sinit>
 80077a8:	69a3      	ldr	r3, [r4, #24]
 80077aa:	60a3      	str	r3, [r4, #8]
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	071a      	lsls	r2, r3, #28
 80077b0:	d501      	bpl.n	80077b6 <__swbuf_r+0x20>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	b943      	cbnz	r3, 80077c8 <__swbuf_r+0x32>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 f82b 	bl	8007814 <__swsetup_r>
 80077be:	b118      	cbz	r0, 80077c8 <__swbuf_r+0x32>
 80077c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80077c4:	4638      	mov	r0, r7
 80077c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	6922      	ldr	r2, [r4, #16]
 80077cc:	1a98      	subs	r0, r3, r2
 80077ce:	6963      	ldr	r3, [r4, #20]
 80077d0:	b2f6      	uxtb	r6, r6
 80077d2:	4283      	cmp	r3, r0
 80077d4:	4637      	mov	r7, r6
 80077d6:	dc05      	bgt.n	80077e4 <__swbuf_r+0x4e>
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f7ff ff64 	bl	80076a8 <_fflush_r>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d1ed      	bne.n	80077c0 <__swbuf_r+0x2a>
 80077e4:	68a3      	ldr	r3, [r4, #8]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	60a3      	str	r3, [r4, #8]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	701e      	strb	r6, [r3, #0]
 80077f2:	6962      	ldr	r2, [r4, #20]
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d004      	beq.n	8007804 <__swbuf_r+0x6e>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	07db      	lsls	r3, r3, #31
 80077fe:	d5e1      	bpl.n	80077c4 <__swbuf_r+0x2e>
 8007800:	2e0a      	cmp	r6, #10
 8007802:	d1df      	bne.n	80077c4 <__swbuf_r+0x2e>
 8007804:	4621      	mov	r1, r4
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff ff4e 	bl	80076a8 <_fflush_r>
 800780c:	2800      	cmp	r0, #0
 800780e:	d0d9      	beq.n	80077c4 <__swbuf_r+0x2e>
 8007810:	e7d6      	b.n	80077c0 <__swbuf_r+0x2a>
	...

08007814 <__swsetup_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4b29      	ldr	r3, [pc, #164]	@ (80078bc <__swsetup_r+0xa8>)
 8007818:	4605      	mov	r5, r0
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	460c      	mov	r4, r1
 800781e:	b118      	cbz	r0, 8007828 <__swsetup_r+0x14>
 8007820:	6a03      	ldr	r3, [r0, #32]
 8007822:	b90b      	cbnz	r3, 8007828 <__swsetup_r+0x14>
 8007824:	f7ff face 	bl	8006dc4 <__sinit>
 8007828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782c:	0719      	lsls	r1, r3, #28
 800782e:	d422      	bmi.n	8007876 <__swsetup_r+0x62>
 8007830:	06da      	lsls	r2, r3, #27
 8007832:	d407      	bmi.n	8007844 <__swsetup_r+0x30>
 8007834:	2209      	movs	r2, #9
 8007836:	602a      	str	r2, [r5, #0]
 8007838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007842:	e033      	b.n	80078ac <__swsetup_r+0x98>
 8007844:	0758      	lsls	r0, r3, #29
 8007846:	d512      	bpl.n	800786e <__swsetup_r+0x5a>
 8007848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800784a:	b141      	cbz	r1, 800785e <__swsetup_r+0x4a>
 800784c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007850:	4299      	cmp	r1, r3
 8007852:	d002      	beq.n	800785a <__swsetup_r+0x46>
 8007854:	4628      	mov	r0, r5
 8007856:	f000 f90d 	bl	8007a74 <_free_r>
 800785a:	2300      	movs	r3, #0
 800785c:	6363      	str	r3, [r4, #52]	@ 0x34
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	2300      	movs	r3, #0
 8007868:	6063      	str	r3, [r4, #4]
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f043 0308 	orr.w	r3, r3, #8
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	b94b      	cbnz	r3, 800788e <__swsetup_r+0x7a>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007884:	d003      	beq.n	800788e <__swsetup_r+0x7a>
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f83f 	bl	800790c <__smakebuf_r>
 800788e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007892:	f013 0201 	ands.w	r2, r3, #1
 8007896:	d00a      	beq.n	80078ae <__swsetup_r+0x9a>
 8007898:	2200      	movs	r2, #0
 800789a:	60a2      	str	r2, [r4, #8]
 800789c:	6962      	ldr	r2, [r4, #20]
 800789e:	4252      	negs	r2, r2
 80078a0:	61a2      	str	r2, [r4, #24]
 80078a2:	6922      	ldr	r2, [r4, #16]
 80078a4:	b942      	cbnz	r2, 80078b8 <__swsetup_r+0xa4>
 80078a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078aa:	d1c5      	bne.n	8007838 <__swsetup_r+0x24>
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	0799      	lsls	r1, r3, #30
 80078b0:	bf58      	it	pl
 80078b2:	6962      	ldrpl	r2, [r4, #20]
 80078b4:	60a2      	str	r2, [r4, #8]
 80078b6:	e7f4      	b.n	80078a2 <__swsetup_r+0x8e>
 80078b8:	2000      	movs	r0, #0
 80078ba:	e7f7      	b.n	80078ac <__swsetup_r+0x98>
 80078bc:	20000038 	.word	0x20000038

080078c0 <__swhatbuf_r>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	460c      	mov	r4, r1
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	2900      	cmp	r1, #0
 80078ca:	b096      	sub	sp, #88	@ 0x58
 80078cc:	4615      	mov	r5, r2
 80078ce:	461e      	mov	r6, r3
 80078d0:	da0d      	bge.n	80078ee <__swhatbuf_r+0x2e>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	bf14      	ite	ne
 80078de:	2340      	movne	r3, #64	@ 0x40
 80078e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078e4:	2000      	movs	r0, #0
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	b016      	add	sp, #88	@ 0x58
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	466a      	mov	r2, sp
 80078f0:	f000 f858 	bl	80079a4 <_fstat_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	dbec      	blt.n	80078d2 <__swhatbuf_r+0x12>
 80078f8:	9901      	ldr	r1, [sp, #4]
 80078fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007902:	4259      	negs	r1, r3
 8007904:	4159      	adcs	r1, r3
 8007906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800790a:	e7eb      	b.n	80078e4 <__swhatbuf_r+0x24>

0800790c <__smakebuf_r>:
 800790c:	898b      	ldrh	r3, [r1, #12]
 800790e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007910:	079d      	lsls	r5, r3, #30
 8007912:	4606      	mov	r6, r0
 8007914:	460c      	mov	r4, r1
 8007916:	d507      	bpl.n	8007928 <__smakebuf_r+0x1c>
 8007918:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	2301      	movs	r3, #1
 8007922:	6163      	str	r3, [r4, #20]
 8007924:	b003      	add	sp, #12
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	ab01      	add	r3, sp, #4
 800792a:	466a      	mov	r2, sp
 800792c:	f7ff ffc8 	bl	80078c0 <__swhatbuf_r>
 8007930:	9f00      	ldr	r7, [sp, #0]
 8007932:	4605      	mov	r5, r0
 8007934:	4639      	mov	r1, r7
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff fc24 	bl	8007184 <_malloc_r>
 800793c:	b948      	cbnz	r0, 8007952 <__smakebuf_r+0x46>
 800793e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007942:	059a      	lsls	r2, r3, #22
 8007944:	d4ee      	bmi.n	8007924 <__smakebuf_r+0x18>
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	e7e2      	b.n	8007918 <__smakebuf_r+0xc>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	6020      	str	r0, [r4, #0]
 8007956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007962:	b15b      	cbz	r3, 800797c <__smakebuf_r+0x70>
 8007964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007968:	4630      	mov	r0, r6
 800796a:	f000 f82d 	bl	80079c8 <_isatty_r>
 800796e:	b128      	cbz	r0, 800797c <__smakebuf_r+0x70>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	431d      	orrs	r5, r3
 8007980:	81a5      	strh	r5, [r4, #12]
 8007982:	e7cf      	b.n	8007924 <__smakebuf_r+0x18>

08007984 <_close_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d06      	ldr	r5, [pc, #24]	@ (80079a0 <_close_r+0x1c>)
 8007988:	2300      	movs	r3, #0
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7fe ffc8 	bl	8006924 <_close>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_close_r+0x1a>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_close_r+0x1a>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	20025d84 	.word	0x20025d84

080079a4 <_fstat_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d07      	ldr	r5, [pc, #28]	@ (80079c4 <_fstat_r+0x20>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	4611      	mov	r1, r2
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	f7fe fffa 	bl	80069aa <_fstat>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	d102      	bne.n	80079c0 <_fstat_r+0x1c>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	b103      	cbz	r3, 80079c0 <_fstat_r+0x1c>
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	bd38      	pop	{r3, r4, r5, pc}
 80079c2:	bf00      	nop
 80079c4:	20025d84 	.word	0x20025d84

080079c8 <_isatty_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d06      	ldr	r5, [pc, #24]	@ (80079e4 <_isatty_r+0x1c>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	f7ff f94c 	bl	8006c70 <_isatty>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_isatty_r+0x1a>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_isatty_r+0x1a>
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	20025d84 	.word	0x20025d84

080079e8 <_lseek_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4d07      	ldr	r5, [pc, #28]	@ (8007a08 <_lseek_r+0x20>)
 80079ec:	4604      	mov	r4, r0
 80079ee:	4608      	mov	r0, r1
 80079f0:	4611      	mov	r1, r2
 80079f2:	2200      	movs	r2, #0
 80079f4:	602a      	str	r2, [r5, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	f7fe ff55 	bl	80068a6 <_lseek>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_lseek_r+0x1e>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_lseek_r+0x1e>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	20025d84 	.word	0x20025d84

08007a0c <_read_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d07      	ldr	r5, [pc, #28]	@ (8007a2c <_read_r+0x20>)
 8007a10:	4604      	mov	r4, r0
 8007a12:	4608      	mov	r0, r1
 8007a14:	4611      	mov	r1, r2
 8007a16:	2200      	movs	r2, #0
 8007a18:	602a      	str	r2, [r5, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f7fe feed 	bl	80067fa <_read>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_read_r+0x1e>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_read_r+0x1e>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	20025d84 	.word	0x20025d84

08007a30 <_sbrk_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d06      	ldr	r5, [pc, #24]	@ (8007a4c <_sbrk_r+0x1c>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	f7fb fcd0 	bl	80033e0 <_sbrk>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_sbrk_r+0x1a>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_sbrk_r+0x1a>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	20025d84 	.word	0x20025d84

08007a50 <_write_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4d07      	ldr	r5, [pc, #28]	@ (8007a70 <_write_r+0x20>)
 8007a54:	4604      	mov	r4, r0
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	602a      	str	r2, [r5, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f7fe ff33 	bl	80068ca <_write>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_write_r+0x1e>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_write_r+0x1e>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20025d84 	.word	0x20025d84

08007a74 <_free_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4605      	mov	r5, r0
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	d041      	beq.n	8007b00 <_free_r+0x8c>
 8007a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a80:	1f0c      	subs	r4, r1, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bfb8      	it	lt
 8007a86:	18e4      	addlt	r4, r4, r3
 8007a88:	f7ff fe36 	bl	80076f8 <__malloc_lock>
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b04 <_free_r+0x90>)
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	b933      	cbnz	r3, 8007aa0 <_free_r+0x2c>
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	6014      	str	r4, [r2, #0]
 8007a96:	4628      	mov	r0, r5
 8007a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a9c:	f7ff be32 	b.w	8007704 <__malloc_unlock>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d908      	bls.n	8007ab6 <_free_r+0x42>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	1821      	adds	r1, r4, r0
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf01      	itttt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	1809      	addeq	r1, r1, r0
 8007ab2:	6021      	streq	r1, [r4, #0]
 8007ab4:	e7ed      	b.n	8007a92 <_free_r+0x1e>
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b10b      	cbz	r3, 8007ac0 <_free_r+0x4c>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d9fa      	bls.n	8007ab6 <_free_r+0x42>
 8007ac0:	6811      	ldr	r1, [r2, #0]
 8007ac2:	1850      	adds	r0, r2, r1
 8007ac4:	42a0      	cmp	r0, r4
 8007ac6:	d10b      	bne.n	8007ae0 <_free_r+0x6c>
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	4401      	add	r1, r0
 8007acc:	1850      	adds	r0, r2, r1
 8007ace:	4283      	cmp	r3, r0
 8007ad0:	6011      	str	r1, [r2, #0]
 8007ad2:	d1e0      	bne.n	8007a96 <_free_r+0x22>
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	6053      	str	r3, [r2, #4]
 8007ada:	4408      	add	r0, r1
 8007adc:	6010      	str	r0, [r2, #0]
 8007ade:	e7da      	b.n	8007a96 <_free_r+0x22>
 8007ae0:	d902      	bls.n	8007ae8 <_free_r+0x74>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	e7d6      	b.n	8007a96 <_free_r+0x22>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	1821      	adds	r1, r4, r0
 8007aec:	428b      	cmp	r3, r1
 8007aee:	bf04      	itt	eq
 8007af0:	6819      	ldreq	r1, [r3, #0]
 8007af2:	685b      	ldreq	r3, [r3, #4]
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	bf04      	itt	eq
 8007af8:	1809      	addeq	r1, r1, r0
 8007afa:	6021      	streq	r1, [r4, #0]
 8007afc:	6054      	str	r4, [r2, #4]
 8007afe:	e7ca      	b.n	8007a96 <_free_r+0x22>
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	bf00      	nop
 8007b04:	20025d80 	.word	0x20025d80

08007b08 <_init>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr

08007b14 <_fini>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr
